Index: app/src/main/java/com/optiflowx/optikeysx/core/preferences/PreferencesHelper.kt
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/preferences/PreferencesHelper.kt b/app/src/main/java/com/optiflowx/optikeysx/core/preferences/PreferencesHelper.kt
deleted file mode 100644
--- a/app/src/main/java/com/optiflowx/optikeysx/core/preferences/PreferencesHelper.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ /dev/null	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
@@ -1,110 +0,0 @@
-package com.optiflowx.optikeysx.core.preferences
-
-import android.content.Context
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.Immutable
-import androidx.compose.runtime.MutableState
-import androidx.compose.runtime.Stable
-import androidx.compose.runtime.collectAsState
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.rememberCoroutineScope
-import androidx.compose.ui.platform.LocalContext
-import androidx.datastore.preferences.core.Preferences
-import androidx.datastore.preferences.core.edit
-import androidx.datastore.preferences.core.emptyPreferences
-import androidx.datastore.preferences.preferencesDataStore
-import kotlinx.coroutines.flow.Flow
-import kotlinx.coroutines.flow.catch
-import kotlinx.coroutines.flow.first
-import kotlinx.coroutines.flow.map
-import kotlinx.coroutines.launch
-import java.io.IOException
-
-
-private val Context.dataStore by preferencesDataStore(
-    name = "AppleKeyboardPreferences_pd"
-)
-
-@Immutable
-class PreferencesHelper(context: Context) : IPreferencesAPI {
-    // dataSource access the DataStore file and does the manipulation based on our requirements.
-    @Stable
-    private val dataStore = context.dataStore
-
-    /* This returns us a flow of data from DataStore. Basically as soon we update the value in Datastore,
-        the values returned by it also changes. */
-    @Stable
-    override fun <T> getFlowPreference(key: Preferences.Key<T>, defaultValue: T): Flow<T> {
-        return dataStore.data.catch { exception ->
-            if (exception is IOException) {
-                emit(emptyPreferences())
-            } else throw exception
-        }.map { preferences ->
-            val result = preferences[key] ?: defaultValue
-            result
-        }
-    }
-
-
-    /* This returns the last saved value of the key. If we change the value,
-        it wont effect the values produced by this function */
-    @Stable
-    override suspend fun <T> getPreference(key: Preferences.Key<T>, defaultValue: T): T {
-        return dataStore.data.first()[key] ?: defaultValue
-    }
-
-    @Stable
-    override suspend fun <T> putPreference(key: Preferences.Key<T>, value: T) {
-        dataStore.edit { preferences ->
-            preferences[key] = value
-        }
-    }
-
-    @Stable
-    override suspend fun <T> removePreference(key: Preferences.Key<T>) {
-        dataStore.edit { preferences ->
-            preferences.remove(key)
-        }
-    }
-
-    @Stable
-    override suspend fun clearAllPreferences() {
-        dataStore.edit { preferences ->
-            preferences.clear()
-        }
-    }
-}
-
-
-
-@Composable
-fun <T> rememberPreference(
-    key: Preferences.Key<T>,
-    defaultValue: T,
-): MutableState<T> {
-    val coroutineScope = rememberCoroutineScope()
-    val context = LocalContext.current
-    val state = remember {
-        context.dataStore.data
-            .map {
-                it[key] ?: defaultValue
-            }
-    }.collectAsState(initial = defaultValue)
-
-    return remember {
-        object : MutableState<T> {
-            override var value: T
-                get() = state.value
-                set(value) {
-                    coroutineScope.launch {
-                        context.dataStore.edit {
-                            it[key] = value
-                        }
-                    }
-                }
-
-            override fun component1() = value
-            override fun component2(): (T) -> Unit = { value = it }
-        }
-    }
-}
Index: app/src/main/java/com/optiflowx/optikeysx/viewmodels/AppViewModel.kt
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/viewmodels/AppViewModel.kt b/app/src/main/java/com/optiflowx/optikeysx/viewmodels/AppViewModel.kt
deleted file mode 100644
--- a/app/src/main/java/com/optiflowx/optikeysx/viewmodels/AppViewModel.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ /dev/null	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
@@ -1,72 +0,0 @@
-package com.optiflowx.optikeysx.viewmodels
-
-import android.content.Context
-import androidx.compose.runtime.Immutable
-import androidx.lifecycle.ViewModel
-import androidx.lifecycle.viewModelScope
-import com.optiflowx.optikeysx.core.preferences.PreferencesHelper
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.launch
-
-
-@Immutable
-class AppViewModel(context: Context) : ViewModel() {
-    val preferences = PreferencesHelper(context)
-    private val pC = PrefsConstants
-    private val dispatcherIO = Dispatchers.IO
-
-//    init {
-//        viewModelScope.launch {
-//            val isFirstRun = preferences.getPreference(pC.FIRST_RUN_KEY, true)
-//
-//            if (isFirstRun) {
-//                preferences.putPreference(pC.FIRST_RUN_KEY, false)
-//            }
-//        }
-//    }
-
-    fun updateFontType(value: String) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.FONT_TYPE_KEY, value)
-    }
-
-    fun updateVibrateOnKeyPress(value: Boolean) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.VIBRATE_ON_KEY_PRESS_KEY, value)
-    }
-
-    fun updateSoundOnKeyPress(value: Boolean) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.SOUND_ON_KEY_PRESS_KEY, value)
-    }
-
-    fun updateAutoCapitalisation(value: Boolean) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.AUTO_CAPITALISATION_KEY, value)
-    }
-
-    fun updateDotShortcut(value: Boolean) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.DOT_SHORTCUT_KEY, value)
-    }
-
-    fun updateEnableCapsLock(value: Boolean) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.ENABLE_CAPS_LOCK_KEY, value)
-    }
-
-    fun updateCheckSpelling(value: Boolean) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.CHECK_SPELLING_KEY, value)
-    }
-
-    fun updateCharacterPreview(value: Boolean) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.CHARACTER_PREVIEW_KEY, value)
-    }
-
-    fun updateAutoCorrection(value: Boolean) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.AUTO_CORRECTION_KEY, value)
-    }
-
-    fun updateSmartPunctuation(value: Boolean) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.SMART_PUNCTUATION_KEY, value)
-    }
-
-    fun updatePredictive(value: Boolean) = viewModelScope.launch(dispatcherIO) {
-        preferences.putPreference(pC.PREDICTIVE_KEY, value)
-    }
-}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/enums/KeyboardLanguage.kt
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/enums/KeyboardLanguage.kt b/app/src/main/java/com/optiflowx/optikeysx/core/enums/KeyboardLanguage.kt
deleted file mode 100644
--- a/app/src/main/java/com/optiflowx/optikeysx/core/enums/KeyboardLanguage.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ /dev/null	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
@@ -1,16 +0,0 @@
-package com.optiflowx.optikeysx.core.enums
-
-import androidx.compose.runtime.Immutable
-
-
-@Immutable
-enum class KeyboardLanguage {
-    English,
-    Spanish,
-    French,
-    Portuguese,
-    German,
-    Italian,
-    Dutch,
-    Russian,
-}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/state/HomeScreenStateHolder.kt
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/state/HomeScreenStateHolder.kt b/app/src/main/java/com/optiflowx/optikeysx/state/HomeScreenStateHolder.kt
deleted file mode 100644
--- a/app/src/main/java/com/optiflowx/optikeysx/state/HomeScreenStateHolder.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ /dev/null	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
@@ -1,9 +0,0 @@
-package com.optiflowx.optikeysx.state
-
-import com.optiflowx.optikeysx.viewmodels.AppViewModel
-
-class HomeScreenStateHolder(
-    private val viewModel: AppViewModel
-) {
-
-}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/state/KeyboardHolderState.kt
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/state/KeyboardHolderState.kt b/app/src/main/java/com/optiflowx/optikeysx/state/KeyboardHolderState.kt
deleted file mode 100644
--- a/app/src/main/java/com/optiflowx/optikeysx/state/KeyboardHolderState.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ /dev/null	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
@@ -1,22 +0,0 @@
-package com.optiflowx.optikeysx.state
-
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.Stable
-import androidx.compose.runtime.remember
-
-@Stable
-
-class KeyboardState(
-
-) {
-
-}
-
-@Composable
-fun rememberKeyboardStateHolder(
-
-) = remember {
-    KeyboardState(
-
-    )
-}
Index: app/src/main/java/com/optiflowx/optikeysx/core/preferences/PreferencesConstants.kt
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/preferences/PreferencesConstants.kt b/app/src/main/java/com/optiflowx/optikeysx/core/preferences/PreferencesConstants.kt
deleted file mode 100644
--- a/app/src/main/java/com/optiflowx/optikeysx/core/preferences/PreferencesConstants.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ /dev/null	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
@@ -1,21 +0,0 @@
-package com.optiflowx.optikeysx.core.preferences
-
-import androidx.compose.runtime.Immutable
-import androidx.datastore.preferences.core.booleanPreferencesKey
-import androidx.datastore.preferences.core.stringPreferencesKey
-
-@Immutable
-object PrefsConstants {
-//    val FIRST_RUN_KEY = booleanPreferencesKey("FIRST_RUN_KEY")
-    val FONT_TYPE_KEY = stringPreferencesKey("FONT_TYPE_KEY")
-    val VIBRATE_ON_KEY_PRESS_KEY = booleanPreferencesKey("VIBRATE_ON_KEY_PRESS_KEY")
-    val SOUND_ON_KEY_PRESS_KEY = booleanPreferencesKey("SOUND_ON_KEY_PRESS_KEY")
-    val AUTO_CAPITALISATION_KEY = booleanPreferencesKey("AUTO_CAPITALISATION_KEY")
-    val AUTO_CORRECTION_KEY = booleanPreferencesKey("AUTO_CORRECTION_KEY")
-    val DOT_SHORTCUT_KEY = booleanPreferencesKey("DOT_SHORTCUT_KEY")
-    val ENABLE_CAPS_LOCK_KEY = booleanPreferencesKey("ENABLE_CAPS_LOCK_KEY")
-    val PREDICTIVE_KEY = booleanPreferencesKey("PREDICTIVE_KEY")
-    val SMART_PUNCTUATION_KEY = booleanPreferencesKey("SMART_PUNCTUATION_KEY")
-    val CHARACTER_PREVIEW_KEY = booleanPreferencesKey("CHARACTER_PREVIEW_KEY")
-    val CHECK_SPELLING_KEY = booleanPreferencesKey("CHECK_SPELLING_KEY")
-}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/services/IMEService.kt
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/services/IMEService.kt b/app/src/main/java/com/optiflowx/optikeysx/services/IMEService.kt
deleted file mode 100644
--- a/app/src/main/java/com/optiflowx/optikeysx/services/IMEService.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ /dev/null	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
@@ -1,144 +0,0 @@
-package com.optiflowx.optikeysx.services
-
-import android.os.Build
-import android.view.View
-import android.view.inputmethod.EditorInfo
-import android.view.inputmethod.InputMethodManager
-import androidx.annotation.CallSuper
-import androidx.compose.ui.graphics.Color
-import androidx.compose.ui.graphics.toArgb
-import androidx.core.view.ViewCompat
-import androidx.core.view.WindowCompat
-import androidx.core.view.WindowInsetsCompat
-import androidx.lifecycle.Lifecycle
-import androidx.lifecycle.ViewModelStore
-import androidx.lifecycle.ViewModelStoreOwner
-import androidx.lifecycle.setViewTreeLifecycleOwner
-import androidx.lifecycle.setViewTreeViewModelStoreOwner
-import androidx.savedstate.SavedStateRegistry
-import androidx.savedstate.SavedStateRegistryController
-import androidx.savedstate.SavedStateRegistryOwner
-import androidx.savedstate.setViewTreeSavedStateRegistryOwner
-import com.optiflowx.optikeysx.views.defaults.DefaultKeyboard
-import com.optiflowx.optikeysx.views.number.DefaultNumberKeyboardView
-import com.optiflowx.optikeysx.views.phone.DefaultPhoneKeyboardView
-import splitties.experimental.ExperimentalSplittiesApi
-import splitties.views.InputType
-
-
-@Suppress("DEPRECATION")
-class IMEService : LifecycleInputMethodService(), ViewModelStoreOwner, SavedStateRegistryOwner {
-
-    override val viewModelStore: ViewModelStore
-        get() = store
-    override val lifecycle: Lifecycle
-        get() = dispatcher.lifecycle
-
-    //ViewModelStore Methods
-    private val store = ViewModelStore()
-
-    //SaveStateRegistry Methods
-    private val savedStateRegistryController = SavedStateRegistryController.create(this)
-
-    override val savedStateRegistry: SavedStateRegistry get() = savedStateRegistryController.savedStateRegistry
-
-    /**
-     * This is the main entry point of the IME. This is called every time the user starts inputting
-     * and the IME is asked to provide a view.
-     *
-     * @param editorInfo Information about the text editor requesting the input, which we can use
-     * to tailor the UI to the text field.
-     * @param restarting Whether this is a restart of a previously running session.
-     **/
-    @OptIn(ExperimentalSplittiesApi::class)
-    @CallSuper
-    override fun onStartInputView(editorInfo: EditorInfo?, restarting: Boolean) {
-        val inputType = editorInfo?.inputType?.and(EditorInfo.IME_MASK_ACTION)
-
-        val mIMM = this.getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
-
-        val locale = mIMM.currentInputMethodSubtype?.languageTag!!
-
-//        val imil: List<InputMethodInfo> = mIMM.enabledInputMethodList
-//        for (imi in imil) {
-//            Log.i("KEYBOARD INFO", "input method info: ${imi.serviceInfo}")
-//        }
-//
-//        val imsl: List<InputMethodSubtype> = mIMM.getEnabledInputMethodSubtypeList(
-//            imil[0], true
-//        )
-//
-//        for (ims in imsl) {
-//            Log.i("KEYBOARD INFO", "input method subtype: ${ims.getDisplayName(this, packageName, applicationInfo)}")
-//        }
-
-
-        when (inputType) {
-            InputType.number.value -> this.setInputView(DefaultNumberKeyboardView(this, locale))
-
-            InputType.phone.value -> this.setInputView(DefaultPhoneKeyboardView(this, locale))
-
-            else -> {
-                this.setInputView(DefaultKeyboard(this, locale))
-            }
-        }
-
-        super.onStartInputView(editorInfo, restarting)
-    }
-
-    @CallSuper
-    override fun onFinishInputView(finishingInput: Boolean) {
-
-        super.onFinishInputView(finishingInput)
-    }
-
-    override fun onDestroy() {
-        store.clear()
-        super.onDestroy()
-    }
-
-    override fun onCreateInputView(): View {
-        val mIMM = this.getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
-        val locale = mIMM.currentInputMethodSubtype?.languageTag!!
-
-        val view = DefaultKeyboard(this, locale)
-        val windowCompat = window?.window
-
-
-        if (windowCompat != null) {
-            windowCompat.decorView.let { decorView ->
-                decorView.setViewTreeLifecycleOwner(this)
-                decorView.setViewTreeViewModelStoreOwner(this)
-                decorView.setViewTreeSavedStateRegistryOwner(this)
-            }
-
-            windowCompat.navigationBarColor = Color.Transparent.toArgb()
-
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
-                windowCompat.setDecorFitsSystemWindows(false)
-            } else {
-                ViewCompat.setOnApplyWindowInsetsListener(view) { _, insets ->
-                    insets.replaceSystemWindowInsets(
-                        0,
-                        0,
-                        0,
-                        5
-                    )
-                }
-            }
-
-            WindowCompat.getInsetsController(windowCompat, view).apply {
-                hide(WindowInsetsCompat.Type.navigationBars())
-            }
-        }
-
-
-        return view
-    }
-
-
-    override fun onCreate() {
-        super.onCreate()
-        savedStateRegistryController.performRestore(null)
-    }
-}
Index: app/src/main/java/com/optiflowx/optikeysx/services/LifecycleInputMethodService.kt
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/services/LifecycleInputMethodService.kt b/app/src/main/java/com/optiflowx/optikeysx/services/LifecycleInputMethodService.kt
deleted file mode 100644
--- a/app/src/main/java/com/optiflowx/optikeysx/services/LifecycleInputMethodService.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ /dev/null	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
@@ -1,50 +0,0 @@
-package com.optiflowx.optikeysx.services
-
-import android.content.Intent
-import android.inputmethodservice.InputMethodService
-import android.view.inputmethod.EditorInfo
-import androidx.annotation.CallSuper
-import androidx.compose.runtime.Stable
-import androidx.lifecycle.LifecycleOwner
-import androidx.lifecycle.ServiceLifecycleDispatcher
-
-@Stable
-abstract class LifecycleInputMethodService : InputMethodService(), LifecycleOwner {
-
-    protected val dispatcher = ServiceLifecycleDispatcher(this)
-
-    @CallSuper
-    override fun onStartInputView(editorInfo: EditorInfo?, restarting: Boolean) {
-        dispatcher.onServicePreSuperOnStart()
-        super.onStartInputView(editorInfo, restarting)
-    }
-
-    @CallSuper
-    override fun onCreate() {
-        dispatcher.onServicePreSuperOnCreate()
-        super.onCreate()
-    }
-
-    @CallSuper
-    override fun onBindInput() {
-        dispatcher.onServicePreSuperOnBind()
-        super.onBindInput()
-    }
-
-
-    // this method is added only to annotate it with @CallSuper.
-    // In usual service super.onStartCommand is no-op, but in LifecycleService
-    // it results in mDispatcher.onServicePreSuperOnStart() call, because
-    // super.onStartCommand calls onStart().
-    @CallSuper
-    override fun onStartCommand(intent: Intent?, flags: Int, startId: Int): Int {
-        return super.onStartCommand(intent, flags, startId)
-    }
-
-    @CallSuper
-    override fun onDestroy() {
-        dispatcher.onServicePreSuperOnDestroy()
-        super.onDestroy()
-    }
-
-}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/utils/IMEPopup.kt
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/utils/IMEPopup.kt b/app/src/main/java/com/optiflowx/optikeysx/core/utils/IMEPopup.kt
deleted file mode 100644
--- a/app/src/main/java/com/optiflowx/optikeysx/core/utils/IMEPopup.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ /dev/null	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
@@ -1,672 +0,0 @@
-package com.optiflowx.optikeysx.core.utils
-
-import android.annotation.SuppressLint
-import android.content.Context
-import android.graphics.Outline
-import android.graphics.PixelFormat
-import android.graphics.Rect
-import android.os.Build
-import android.os.Looper
-import android.view.Gravity
-import android.view.MotionEvent
-import android.view.View
-import android.view.ViewGroup
-import android.view.ViewOutlineProvider
-import android.view.WindowManager
-import androidx.annotation.RequiresApi
-import androidx.annotation.VisibleForTesting
-import androidx.compose.animation.core.withInfiniteAnimationFrameNanos
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.CompositionContext
-import androidx.compose.runtime.DisposableEffect
-import androidx.compose.runtime.LaunchedEffect
-import androidx.compose.runtime.SideEffect
-import androidx.compose.runtime.derivedStateOf
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.rememberCompositionContext
-import androidx.compose.runtime.rememberUpdatedState
-import androidx.compose.runtime.saveable.rememberSaveable
-import androidx.compose.runtime.setValue
-import androidx.compose.runtime.snapshots.SnapshotStateObserver
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.R
-import androidx.compose.ui.UiComposable
-import androidx.compose.ui.draw.alpha
-import androidx.compose.ui.layout.Layout
-import androidx.compose.ui.layout.LayoutCoordinates
-import androidx.compose.ui.layout.onGloballyPositioned
-import androidx.compose.ui.layout.onSizeChanged
-import androidx.compose.ui.layout.positionInWindow
-import androidx.compose.ui.platform.AbstractComposeView
-import androidx.compose.ui.platform.LocalDensity
-import androidx.compose.ui.platform.LocalLayoutDirection
-import androidx.compose.ui.platform.LocalView
-import androidx.compose.ui.platform.ViewRootForInspector
-import androidx.compose.ui.semantics.popup
-import androidx.compose.ui.semantics.semantics
-import androidx.compose.ui.unit.Density
-import androidx.compose.ui.unit.IntOffset
-import androidx.compose.ui.unit.IntRect
-import androidx.compose.ui.unit.IntSize
-import androidx.compose.ui.unit.LayoutDirection
-import androidx.compose.ui.unit.dp
-import androidx.compose.ui.util.fastMap
-import androidx.compose.ui.window.PopupPositionProvider
-import androidx.lifecycle.findViewTreeLifecycleOwner
-import androidx.lifecycle.findViewTreeViewModelStoreOwner
-import androidx.lifecycle.setViewTreeLifecycleOwner
-import androidx.lifecycle.setViewTreeViewModelStoreOwner
-import androidx.savedstate.findViewTreeSavedStateRegistryOwner
-import androidx.savedstate.setViewTreeSavedStateRegistryOwner
-import kotlinx.coroutines.isActive
-import java.util.UUID
-import kotlin.math.roundToInt
-
-//@Immutable
-//class IMEPopupProperties @ExperimentalComposeUiApi constructor(
-//    val focusable: Boolean = false,
-//    val dismissOnBackPress: Boolean = true,
-//    val dismissOnClickOutside: Boolean = true,
-//    val securePolicy: SecureFlagPolicy = SecureFlagPolicy.Inherit,
-//    val excludeFromSystemGesture: Boolean = true,
-//    val clippingEnabled: Boolean = true,
-//    val usePlatformDefaultWidth: Boolean = false
-//) {
-//    @OptIn(ExperimentalComposeUiApi::class)
-//    constructor(
-//        focusable: Boolean = false,
-//        dismissOnBackPress: Boolean = true,
-//        dismissOnClickOutside: Boolean = true,
-//        securePolicy: SecureFlagPolicy = SecureFlagPolicy.Inherit,
-//        excludeFromSystemGesture: Boolean = true,
-//        clippingEnabled: Boolean = true,
-//    ) : this(
-//        focusable = focusable,
-//        dismissOnBackPress = dismissOnBackPress,
-//        dismissOnClickOutside = dismissOnClickOutside,
-//        securePolicy = securePolicy,
-//        excludeFromSystemGesture = excludeFromSystemGesture,
-//        clippingEnabled = clippingEnabled,
-//        usePlatformDefaultWidth = false
-//    )
-//
-//    override fun equals(other: Any?): Boolean {
-//        if (this === other) return true
-//        if (other !is IMEPopupProperties) return false
-//
-//        if (focusable != other.focusable) return false
-//        if (dismissOnBackPress != other.dismissOnBackPress) return false
-//        if (dismissOnClickOutside != other.dismissOnClickOutside) return false
-//        if (securePolicy != other.securePolicy) return false
-//        if (excludeFromSystemGesture != other.excludeFromSystemGesture) return false
-//        if (clippingEnabled != other.clippingEnabled) return false
-//        if (usePlatformDefaultWidth != other.usePlatformDefaultWidth) return false
-//
-//        return true
-//    }
-//
-//    override fun hashCode(): Int {
-//        var result = dismissOnBackPress.hashCode()
-//        result = 31 * result + focusable.hashCode()
-//        result = 31 * result + dismissOnBackPress.hashCode()
-//        result = 31 * result + dismissOnClickOutside.hashCode()
-//        result = 31 * result + securePolicy.hashCode()
-//        result = 31 * result + excludeFromSystemGesture.hashCode()
-//        result = 31 * result + clippingEnabled.hashCode()
-//        result = 31 * result + usePlatformDefaultWidth.hashCode()
-//        return result
-//    }
-//}
-
-/**
- * Opens a popup with the given content.
- *
- * A popup is a floating container that appears on top of the current activity.
- * It is especially useful for non-modal UI surfaces that remain hidden until they
- * are needed, for example floating menus like Cut/Copy/Paste.
- *
- * The popup is positioned relative to its parent, using the [alignment] and [offset].
- * The popup is visible as long as it is part of the composition hierarchy.
- */
-@Composable
-fun IMEPopup(
-    alignment: Alignment = Alignment.TopStart,
-    onDismissRequest: (() -> Unit)? = null,
-//    properties: IMEPopupProperties = IMEPopupProperties(),
-    content: @Composable () -> Unit
-) {
-    val popupPosition = remember(alignment) {
-        object : PopupPositionProvider {
-            override fun calculatePosition(
-                anchorBounds: IntRect,
-                windowSize: IntSize,
-                layoutDirection: LayoutDirection,
-                popupContentSize: IntSize
-            ): IntOffset {
-                val anchorAlignmentPoint = alignment.align(
-                    IntSize.Zero,
-                    anchorBounds.size,
-                    layoutDirection
-                )
-                // Note the negative sign. IMEPopup alignment point contributes negative offset.
-                val popupAlignmentPoint = -alignment.align(
-                    IntSize.Zero,
-                    popupContentSize,
-                    layoutDirection
-                )
-
-                return anchorBounds.topLeft +
-                        anchorAlignmentPoint +
-                        popupAlignmentPoint
-            }
-        }
-    }
-
-    IMEPopup(
-        popupPositionProvider = popupPosition,
-        onDismissRequest = onDismissRequest,
-        content = content
-    )
-}
-
-@Composable
-fun IMEPopup(
-    popupPositionProvider: PopupPositionProvider,
-    onDismissRequest: (() -> Unit)? = null,
-    content: @Composable () -> Unit
-) {
-    val view = LocalView.current
-    val density = LocalDensity.current
-    val layoutDirection = LocalLayoutDirection.current
-    val parentComposition = rememberCompositionContext()
-    val currentContent by rememberUpdatedState(content)
-    val popupId = rememberSaveable { UUID.randomUUID() }
-    val popupLayout = remember {
-        PopupLayout(
-            onDismissRequest = onDismissRequest,
-            composeView = view,
-            density = density,
-            initialPositionProvider = popupPositionProvider,
-            popupId = popupId
-        ).apply {
-            setContent(parentComposition) {
-                SimpleStack(
-                    Modifier
-                        .semantics { this.popup() }
-                        // Get the size of the content
-                        .onSizeChanged {
-                            popupContentSize = it
-                            updatePosition()
-                        }
-                        // Hide the popup while we can't position it correctly
-                        .alpha(if (canCalculatePosition) 1f else 0f)
-                ) {
-                    currentContent()
-                }
-            }
-        }
-    }
-
-    DisposableEffect(popupLayout) {
-        popupLayout.show()
-        popupLayout.updateParameters(
-            onDismissRequest = onDismissRequest,
-            layoutDirection = layoutDirection
-        )
-        onDispose {
-            popupLayout.disposeComposition()
-            // Remove the window
-            popupLayout.dismiss()
-        }
-    }
-
-    SideEffect {
-        popupLayout.updateParameters(
-            onDismissRequest = onDismissRequest,
-            layoutDirection = layoutDirection
-        )
-    }
-
-    DisposableEffect(popupPositionProvider) {
-        popupLayout.positionProvider = popupPositionProvider
-        popupLayout.updatePosition()
-        onDispose {}
-    }
-
-    // The parent's bounds can change on any frame without onGloballyPositioned being called, if
-    // e.g. the soft keyboard changes visibility. For that reason, we need to check if we've moved
-    // on every frame. However, we don't need to handle all moves – most position changes will be
-    // handled by onGloballyPositioned. This polling loop only needs to handle the case where the
-    // view's absolute position on the screen has changed, so we do a quick check to see if it has,
-    // and only do the other position calculations in that case.
-    LaunchedEffect(popupLayout) {
-        while (isActive) {
-            withInfiniteAnimationFrameNanos {}
-            popupLayout.pollForLocationOnScreenChange()
-        }
-    }
-
-    // TODO(soboleva): Look at module arrangement so that Box can be
-    //  used instead of this custom Layout
-    // Get the parent's position, size and layout direction
-    Layout(
-        content = {},
-        modifier = Modifier
-            .onGloballyPositioned { childCoordinates ->
-                // This callback is best-effort – the screen coordinates of this layout node can
-                // change at any time without this callback being fired (e.g. during IME visibility
-                // change). For that reason, updating the position in this callback is not
-                // sufficient, and the coordinates are also re-calculated on every frame.
-                val parentCoordinates = childCoordinates.parentLayoutCoordinates!!
-                popupLayout.updateParentLayoutCoordinates(parentCoordinates)
-            }
-    ) { _, _ ->
-        popupLayout.parentLayoutDirection = layoutDirection
-        layout(0, 0) {}
-    }
-}
-
-
-// TODO(soboleva): Look at module dependencies so that we can get code reuse between
-// IMEPopup's SimpleStack and Box.
-@Suppress("NOTHING_TO_INLINE")
-@Composable
-private inline fun SimpleStack(modifier: Modifier, noinline content: @Composable () -> Unit) {
-    Layout(content = content, modifier = modifier) { measurables, constraints ->
-        when (measurables.size) {
-            0 -> layout(0, 0) {}
-            1 -> {
-                val p = measurables[0].measure(constraints)
-                layout(p.width, p.height) {
-                    p.placeRelative(0, 0)
-                }
-            }
-
-            else -> {
-                val placeables = measurables.fastMap { it.measure(constraints) }
-                var width = 0
-                var height = 0
-                for (i in 0..placeables.lastIndex) {
-                    val p = placeables[i]
-                    width = maxOf(width, p.width)
-                    height = maxOf(height, p.height)
-                }
-                layout(width, height) {
-                    for (i in 0..placeables.lastIndex) {
-                        val p = placeables[i]
-                        p.placeRelative(0, 0)
-                    }
-                }
-            }
-        }
-    }
-}
-
-/**
- * The layout the popup uses to display its content.
- *
- * @param composeView The parent view of the popup which is the AndroidComposeView.
- */
-@SuppressLint("ViewConstructor")
-internal class PopupLayout(
-    private var onDismissRequest: (() -> Unit)?,
-    private val composeView: View,
-    density: Density,
-    initialPositionProvider: PopupPositionProvider,
-    popupId: UUID,
-    private val popupLayoutHelper: PopupLayoutHelper = if (Build.VERSION.SDK_INT >= 29) {
-        PopupLayoutHelperImpl29()
-    } else {
-        PopupLayoutHelperImpl()
-    }
-) : AbstractComposeView(composeView.context),
-    ViewRootForInspector {
-    private val windowManager =
-        composeView.context.getSystemService(Context.WINDOW_SERVICE) as WindowManager
-
-    @VisibleForTesting
-    internal val params = createLayoutParams()
-
-    /** The logic of positioning the popup relative to its parent. */
-    var positionProvider = initialPositionProvider
-
-    // Position params
-    var parentLayoutDirection: LayoutDirection = LayoutDirection.Ltr
-    var popupContentSize: IntSize? by mutableStateOf(null)
-    private var parentLayoutCoordinates: LayoutCoordinates? by mutableStateOf(null)
-    private var parentBounds: IntRect? = null
-
-    /** Track parent coordinates and content size; only show popup once we have both. */
-    val canCalculatePosition by derivedStateOf {
-        parentLayoutCoordinates != null && popupContentSize != null
-    }
-
-    // On systems older than Android S, there is a bug in the surface insets matrix math used by
-    // elevation, so high values of maxSupportedElevation break accessibility services: b/232788477.
-    private val maxSupportedElevation = 8.dp
-
-    // The window visible frame used for the last popup position calculation.
-    private val previousWindowVisibleFrame = Rect()
-
-    override val subCompositionView: AbstractComposeView get() = this
-
-    private val snapshotStateObserver = SnapshotStateObserver(onChangedExecutor = { command ->
-        // This is the same executor logic used by AndroidComposeView's OwnerSnapshotObserver, which
-        // drives most of the state observation in compose UI.
-        if (handler?.looper === Looper.myLooper()) {
-            command()
-        } else {
-            handler?.post(command)
-        }
-    })
-
-    init {
-        id = android.R.id.content
-        setViewTreeLifecycleOwner(composeView.findViewTreeLifecycleOwner())
-        setViewTreeViewModelStoreOwner(composeView.findViewTreeViewModelStoreOwner())
-        setViewTreeSavedStateRegistryOwner(composeView.findViewTreeSavedStateRegistryOwner())
-        // Set unique id for AbstractComposeView. This allows state restoration for the state
-        // defined inside the IMEPopup via rememberSaveable()
-        setTag(R.id.compose_view_saveable_id_tag, "IMEPopup:$popupId")
-
-        // Enable children to draw their shadow by not clipping them
-        clipChildren = false
-        // Allocate space for elevation
-        with(density) { elevation = maxSupportedElevation.toPx() }
-        // Simple outline to force window manager to allocate space for shadow.
-        // Note that the outline affects clickable area for the dismiss listener. In case of shapes
-        // like circle the area for dismiss might be to small (rectangular outline consuming clicks
-        // outside of the circle).
-        outlineProvider = object : ViewOutlineProvider() {
-            override fun getOutline(view: View, result: Outline) {
-                result.setRect(0, 0, view.width, view.height)
-                // We set alpha to 0 to hide the view's shadow and let the composable to draw its
-                // own shadow. This still enables us to get the extra space needed in the surface.
-                result.alpha = 0f
-            }
-        }
-    }
-
-    private var content: @Composable () -> Unit by mutableStateOf({})
-
-    override var shouldCreateCompositionOnAttachedToWindow: Boolean = false
-        private set
-
-    fun show() {
-        windowManager.addView(this, params)
-    }
-
-    fun setContent(parent: CompositionContext, content: @Composable () -> Unit) {
-        setParentCompositionContext(parent)
-        this.content = content
-        shouldCreateCompositionOnAttachedToWindow = true
-    }
-
-    @Composable
-    @UiComposable
-    override fun Content() { content() }
-
-    override fun onAttachedToWindow() {
-        super.onAttachedToWindow()
-        snapshotStateObserver.start()
-    }
-
-    override fun onDetachedFromWindow() {
-        super.onDetachedFromWindow()
-        snapshotStateObserver.stop()
-        snapshotStateObserver.clear()
-    }
-
-    fun updateParameters(
-        onDismissRequest: (() -> Unit)?,
-        layoutDirection: LayoutDirection
-    ) {
-        this.onDismissRequest = onDismissRequest
-//        setIsFocusable()
-//        setSecurePolicy()
-//        setClippingEnabled()
-        superSetLayoutDirection(layoutDirection)
-    }
-
-    private fun applyNewFlags(flags: Int) {
-        params.flags = flags
-        popupLayoutHelper.updateViewLayout(windowManager, this, params)
-    }
-
-    /**
-     * Updates the [LayoutCoordinates] object that is used by [updateParentBounds] to calculate
-     * the position of the popup. If the new [LayoutCoordinates] reports new parent bounds, calls
-     * [updatePosition].
-     */
-    fun updateParentLayoutCoordinates(parentLayoutCoordinates: LayoutCoordinates) {
-        this.parentLayoutCoordinates = parentLayoutCoordinates
-        updateParentBounds()
-    }
-
-    /**
-     * Used by [pollForLocationOnScreenChange] to read the [composeView]'s absolute position
-     * on screen. The array is stored as a field instead of allocated in the method because it's
-     * called on every frame.
-     */
-    private val locationOnScreen = IntArray(2)
-
-    /**
-     * Returns true if the absolute location of the [composeView] on the screen has changed since
-     * the last call. This method asks the view for its location instead of using Compose APIs like
-     * [LayoutCoordinates] because it does less work, and this method is intended to be called on
-     * every frame.
-     *
-     * The location can change without any callbacks being fired if, for example, the soft keyboard
-     * is shown or hidden when the window is in `adjustPan` mode. In that case, the window's root
-     * view (`ViewRootImpl`) will "scroll" the view hierarchy in a special way that doesn't fire any
-     * callbacks.
-     */
-    fun pollForLocationOnScreenChange() {
-        val (oldX, oldY) = locationOnScreen
-        composeView.getLocationOnScreen(locationOnScreen)
-        if (oldX != locationOnScreen[0] || oldY != locationOnScreen[1]) {
-            updateParentBounds()
-        }
-    }
-
-    /**
-     * Re-calculates the bounds of the parent layout node that this popup is anchored to. If they've
-     * changed since the last call, calls [updatePosition] to actually calculate the popup's new
-     * position and update the window.
-     */
-    @VisibleForTesting
-    internal fun updateParentBounds() {
-        val coordinates = parentLayoutCoordinates ?: return
-        val layoutSize = coordinates.size
-
-        val position = coordinates.positionInWindow()
-        val layoutPosition = IntOffset(position.x.roundToInt(), position.y.roundToInt())
-
-        val newParentBounds = IntRect(layoutPosition, layoutSize)
-        if (newParentBounds != parentBounds) {
-            this.parentBounds = newParentBounds
-            updatePosition()
-        }
-    }
-
-    /**
-     * Updates the position of the popup based on current position properties.
-     */
-    fun updatePosition() {
-        val parentBounds = parentBounds ?: return
-        val popupContentSize = popupContentSize ?: return
-
-        val windowSize = previousWindowVisibleFrame.let {
-            popupLayoutHelper.getWindowVisibleDisplayFrame(composeView, it)
-            val bounds = it.toIntBounds()
-            IntSize(width = bounds.width, height = bounds.height)
-        }
-
-        var popupPosition = IntOffset.Zero
-        snapshotStateObserver.observeReads(this, onCommitAffectingPopupPosition) {
-            popupPosition = positionProvider.calculatePosition(
-                parentBounds,
-                windowSize,
-                parentLayoutDirection,
-                popupContentSize
-            )
-        }
-
-        params.x = popupPosition.x
-        params.y = popupPosition.y
-
-//        if (properties.excludeFromSystemGesture) {
-//            // Resolve conflict with gesture navigation back when dragging this handle view on the
-//            // edge of the screen.
-//            popupLayoutHelper.setGestureExclusionRects(this, windowSize.width, windowSize.height)
-//        }
-
-        popupLayoutHelper.updateViewLayout(windowManager, this, params)
-    }
-
-    /**
-     * Remove the view from the [WindowManager].
-     */
-    fun dismiss() {
-        setViewTreeLifecycleOwner(null)
-        windowManager.removeViewImmediate(this)
-    }
-
-    /**
-     * Handles touch screen motion events and calls [onDismissRequest] when the
-     * users clicks outside the popup.
-     */
-    @SuppressLint("ClickableViewAccessibility")
-    override fun onTouchEvent(event: MotionEvent?): Boolean {
-//        if (!properties.dismissOnClickOutside) {
-//            return super.onTouchEvent(event)
-//        }
-        // Note that this implementation is taken from PopupWindow. It actually does not seem to
-        // matter whether we return true or false as some upper layer decides on whether the
-        // event is propagated to other windows or not. So for focusable the event is consumed but
-        // for not focusable it is propagated to other windows.
-        if ((event?.action == MotionEvent.ACTION_DOWN) &&
-            ((event.x < 0) || (event.x >= width) || (event.y < 0) || (event.y >= height))
-        ) {
-            onDismissRequest?.invoke()
-            return true
-        } else if (event?.action == MotionEvent.ACTION_OUTSIDE) {
-            onDismissRequest?.invoke()
-            return true
-        }
-
-        return super.onTouchEvent(event)
-    }
-
-    // Sets the "real" layout direction for our content that we obtain from the parent composition.
-    private fun superSetLayoutDirection(layoutDirection: LayoutDirection) {
-        val direction = when (layoutDirection) {
-            LayoutDirection.Ltr -> android.util.LayoutDirection.LTR
-            LayoutDirection.Rtl -> android.util.LayoutDirection.RTL
-        }
-        super.setLayoutDirection(direction)
-    }
-
-    /**
-     * Initialize the LayoutParams specific to [android.widget.PopupWindow].
-     */
-    private fun createLayoutParams(): WindowManager.LayoutParams {
-        return WindowManager.LayoutParams().apply {
-            // Start to position the popup in the top left corner, a new position will be calculated
-            gravity = Gravity.START or Gravity.TOP
-
-            // Flags specific to android.widget.PopupWindow
-            flags = flags and (
-                    WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES or
-                            WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or
-                            WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE or
-                            WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM or
-                            WindowManager.LayoutParams.FLAG_SPLIT_TOUCH
-                    ).inv()
-
-            // Enables us to intercept outside clicks even when popup is not focusable
-            flags = flags or WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH
-
-            type = WindowManager.LayoutParams.TYPE_APPLICATION_SUB_PANEL
-
-            // Get the Window token from the parent view
-            token = composeView.applicationWindowToken
-
-            // Wrap the frame layout which contains composable content
-            width = WindowManager.LayoutParams.WRAP_CONTENT
-            height = WindowManager.LayoutParams.WRAP_CONTENT
-
-            format = PixelFormat.TRANSLUCENT
-
-            // accessibilityTitle is not exposed as a public API therefore we set popup window
-            // title which is used as a fallback by a11y services
-            title = composeView.context.resources.getString(R.string.default_popup_window_title)
-        }
-    }
-
-    private companion object {
-        private val onCommitAffectingPopupPosition = { popupLayout: PopupLayout ->
-            if (popupLayout.isAttachedToWindow) {
-                popupLayout.updatePosition()
-            }
-        }
-    }
-}
-
-/**
- * Collection of methods delegated to platform methods to support APIs only available on newer
- * platforms and testing.
- */
-@VisibleForTesting
-internal interface PopupLayoutHelper {
-    fun getWindowVisibleDisplayFrame(composeView: View, outRect: Rect)
-    fun setGestureExclusionRects(composeView: View, width: Int, height: Int)
-    fun updateViewLayout(
-        windowManager: WindowManager,
-        popupView: View,
-        params: ViewGroup.LayoutParams
-    )
-}
-
-private open class PopupLayoutHelperImpl : PopupLayoutHelper {
-    override fun getWindowVisibleDisplayFrame(composeView: View, outRect: Rect) {
-        composeView.getWindowVisibleDisplayFrame(outRect)
-    }
-
-    override fun setGestureExclusionRects(composeView: View, width: Int, height: Int) {
-        // do nothing
-    }
-
-    override fun updateViewLayout(
-        windowManager: WindowManager,
-        popupView: View,
-        params: ViewGroup.LayoutParams
-    ) {
-        windowManager.updateViewLayout(popupView, params)
-    }
-}
-
-@RequiresApi(29)
-private class PopupLayoutHelperImpl29 : PopupLayoutHelperImpl() {
-    override fun setGestureExclusionRects(composeView: View, width: Int, height: Int) {
-        composeView.systemGestureExclusionRects = mutableListOf(
-            Rect(
-                0,
-                0,
-                width,
-                height
-            )
-        )
-    }
-}
-
-private fun Rect.toIntBounds() = IntRect(
-    left = left,
-    top = top,
-    right = right,
-    bottom = bottom
-)
-
Index: app/src/main/java/com/optiflowx/optikeysx/core/preferences/IPreferencesAPI.kt
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/preferences/IPreferencesAPI.kt b/app/src/main/java/com/optiflowx/optikeysx/core/preferences/IPreferencesAPI.kt
deleted file mode 100644
--- a/app/src/main/java/com/optiflowx/optikeysx/core/preferences/IPreferencesAPI.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ /dev/null	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
@@ -1,14 +0,0 @@
-package com.optiflowx.optikeysx.core.preferences
-
-import androidx.compose.runtime.Immutable
-import androidx.datastore.preferences.core.Preferences
-import kotlinx.coroutines.flow.Flow
-
-@Immutable
-interface IPreferencesAPI {
-    fun <T> getFlowPreference(key: Preferences.Key<T>, defaultValue: T): Flow<T>
-    suspend fun <T> getPreference(key: Preferences.Key<T>, defaultValue: T): T
-    suspend fun <T> putPreference(key: Preferences.Key<T>, value: T)
-    suspend fun <T> removePreference(key: Preferences.Key<T>)
-    suspend fun clearAllPreferences()
-}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/data/VoskLocalModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/data/VoskLocalModel.kt b/app/src/main/java/com/optiflowx/optikeysx/core/data/VoskLocalModel.kt
new file mode 100644
--- /dev/null	(date 1707315545995)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/data/VoskLocalModel.kt	(date 1707315545995)
@@ -0,0 +1,55 @@
+package com.optiflowx.optikeysx.core.data
+
+import java.io.Serializable
+import java.util.Locale
+
+data class VoskLocalModel(val path: String, val locale: Locale, val filename: String) : Serializable {
+
+    companion object {
+        fun serialize(model: VoskLocalModel): String {
+            return "[path:\"" + encode(model.path) +
+                    "\", locale:\"" + model.locale +
+                    "\", name:\"" + encode(model.filename) + "\"]"
+        }
+
+        fun deserialize(serialized: String?): VoskLocalModel {
+
+            throw RuntimeException() // TODO: implement
+        }
+
+        private fun encode(s: String?): String {
+            val sb = StringBuilder()
+            var c: Char
+            for (i in 0 until s!!.length) {
+                c = s[i]
+                when (c) {
+                    ',', '"', '\\', ':' -> {
+                        sb.append("\\")
+                        sb.append(String.format("%02x", c.code))
+                    }
+
+                    else -> sb.append(c)
+                }
+            }
+            return sb.toString()
+        }
+
+        private fun decode(s: String): String {
+            val sb = StringBuilder()
+            var c: Char
+            var i = 0
+            while (i < s.length) {
+                c = s[i]
+                if (c == '\\') {
+                    i++
+                    sb.append(s.substring(i, i + 2).toInt().toChar())
+                    i += 2
+                } else {
+                    sb.append(c)
+                }
+                i++
+            }
+            return sb.toString()
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/data/VoskServerData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/data/VoskServerData.kt b/app/src/main/java/com/optiflowx/optikeysx/core/data/VoskServerData.kt
new file mode 100644
--- /dev/null	(date 1707315546162)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/data/VoskServerData.kt	(date 1707315546162)
@@ -0,0 +1,41 @@
+package com.optiflowx.optikeysx.core.data
+
+import java.io.Serializable
+import java.net.URI
+import java.net.URISyntaxException
+import java.util.Locale
+import java.util.Objects
+
+class VoskServerData(
+    val uri: URI, // placeholder for now
+    val locale: Locale?
+) : Serializable, Comparable<VoskServerData> {
+    override fun compareTo(other: VoskServerData): Int {
+        return uri.compareTo(other.uri)
+    }
+
+    override fun equals(other: Any?): Boolean {
+        if (this === other) return true
+        if (other == null || javaClass != other.javaClass) return false
+        val that = other as VoskServerData
+        return uri == that.uri && locale == that.locale
+    }
+
+    override fun hashCode(): Int {
+        return Objects.hash(uri, locale)
+    }
+
+    companion object {
+        fun serialize(data: VoskServerData): String {
+            return data.uri.toString()
+        }
+
+        fun deserialize(data: String?): VoskServerData? {
+            return try {
+                VoskServerData(URI(data), null)
+            } catch (e: URISyntaxException) {
+                null
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/ModelInfo.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/ModelInfo.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/ModelInfo.kt
new file mode 100644
--- /dev/null	(date 1707315546116)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/ModelInfo.kt	(date 1707315546116)
@@ -0,0 +1,13 @@
+package com.optiflowx.optikeysx.core.downloader.messages
+
+import java.util.Locale
+
+data class ModelInfo(val url: String, val filename: String, val locale: Locale = Locale.ROOT) {
+    override fun toString(): String {
+        return "ModelInfo{" +
+                "url='" + url + '\'' +
+                ", filename='" + filename + '\'' +
+                ", locale=" + locale +
+                '}'
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/FileDownloader.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/FileDownloader.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/FileDownloader.kt
new file mode 100644
--- /dev/null	(date 1707315604691)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/FileDownloader.kt	(date 1707315604691)
@@ -0,0 +1,66 @@
+package com.optiflowx.optikeysx.core.downloader
+
+import android.content.Context
+import android.content.Intent
+import android.net.Uri
+import android.os.Build
+import com.optiflowx.optikeysx.core.data.ModelLink
+import com.optiflowx.optikeysx.core.downloader.FileDownloadService
+import com.optiflowx.optikeysx.core.downloader.messages.ModelInfo
+import java.util.Locale
+
+object FileDownloader {
+    const val ACTION = "action"
+    const val ACTION_DOWNLOAD = "action_download"
+    const val ACTION_UNZIP = "action_unzip"
+
+    const val DOWNLOAD_URL = "download_url"
+    const val DOWNLOAD_FILENAME = "download_filename"
+    const val DOWNLOAD_LOCALE = "download_locale"
+
+    const val UNZIP_URI = "unzip_uri"
+    const val UNZIP_LOCALE = "unzip_locale"
+    fun getInfoForIntent(intent: Intent): ModelInfo? {
+        val url = intent.getStringExtra(DOWNLOAD_URL)
+        val filename = intent.getStringExtra(DOWNLOAD_FILENAME)
+        val locale = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+            intent.getSerializableExtra(DOWNLOAD_LOCALE, Locale::class.java)
+        } else {
+            intent.getSerializableExtra(DOWNLOAD_LOCALE) as Locale?
+        }
+        return if (url == null || filename == null || locale == null) null else ModelInfo(
+            url,
+            filename,
+            locale
+        )
+    }
+
+    fun downloadModel(model: ModelLink, context: Context) {
+        var context = context
+        context = context.applicationContext
+        val serviceIntent = Intent(context, FileDownloadService::class.java)
+        serviceIntent.putExtra(ACTION, ACTION_DOWNLOAD)
+        serviceIntent.putExtra(DOWNLOAD_URL, model.link)
+        serviceIntent.putExtra(DOWNLOAD_FILENAME, model.filename)
+        serviceIntent.putExtra(DOWNLOAD_LOCALE, model.locale)
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            context.startForegroundService(serviceIntent)
+        } else {
+            context.startService(serviceIntent)
+        }
+    }
+
+    fun importModel(uri: Uri, context: Context) {
+        var context = context
+        context = context.applicationContext
+        val serviceIntent = Intent(context, FileDownloadService::class.java)
+        serviceIntent.putExtra(ACTION, ACTION_UNZIP)
+        serviceIntent.putExtra(UNZIP_URI, uri)
+//        serviceIntent.putExtra(UNZIP_LOCALE, locale)
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            context.startForegroundService(serviceIntent)
+        } else {
+            context.startService(serviceIntent)
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/FileDownloadService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/FileDownloadService.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/FileDownloadService.kt
new file mode 100644
--- /dev/null	(date 1707347307284)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/FileDownloadService.kt	(date 1707347307284)
@@ -0,0 +1,349 @@
+package com.optiflowx.optikeysx.core.downloader
+
+import android.Manifest
+import android.app.Service
+import android.content.Intent
+import android.content.pm.PackageManager
+import android.content.pm.ServiceInfo.FOREGROUND_SERVICE_TYPE_DATA_SYNC
+import android.net.Uri
+import android.os.Build
+import android.os.IBinder
+import android.util.Log
+import androidx.core.app.ActivityCompat
+import androidx.core.app.NotificationCompat
+import androidx.core.app.NotificationManagerCompat
+import com.optiflowx.optikeysx.Constants
+import com.optiflowx.optikeysx.Constants.getTemporaryDownloadLocation
+import com.optiflowx.optikeysx.Constants.getTemporaryUnzipLocation
+import com.optiflowx.optikeysx.R
+import com.optiflowx.optikeysx.core.Tools
+import com.optiflowx.optikeysx.core.downloader.messages.*
+import org.greenrobot.eventbus.EventBus
+import org.greenrobot.eventbus.Subscribe
+import org.greenrobot.eventbus.ThreadMode
+import java.io.*
+import java.net.URL
+import java.util.*
+import java.util.concurrent.Executor
+import java.util.concurrent.Executors
+
+class FileDownloadService : Service() {
+    private val executor: Executor = Executors.newSingleThreadExecutor()
+    private lateinit var notificationManager: NotificationManagerCompat
+    private lateinit var notificationBuilder: NotificationCompat.Builder
+    private var currentModel: ModelInfo? = null
+    private val queuedModels: Queue<ModelInfo> = LinkedList()
+    private var currentState = State.NONE
+    private var downloadProgress = 0f
+    private var unzipProgress = 0f
+
+    private var interrupt = false
+
+    override fun onCreate() {
+        super.onCreate()
+        EventBus.getDefault().register(this)
+        notificationManager = NotificationManagerCompat.from(this)
+        notificationBuilder = NotificationCompat.Builder(this, Constants.DOWNLOADER_CHANNEL_ID)
+        notificationBuilder.setContentTitle("OptiKeysX: Downloading Model")
+            .setContentText("Loading...")
+            .setSmallIcon(R.drawable.icon_notification).priority = NotificationCompat.PRIORITY_LOW
+        notificationBuilder.setProgress(0, 0, true)
+        notificationBuilder.foregroundServiceBehavior =
+            NotificationCompat.FOREGROUND_SERVICE_IMMEDIATE
+    }
+
+    override fun onStartCommand(intent: Intent, flags: Int, startId: Int): Int {
+        when (intent.getStringExtra(FileDownloader.ACTION)) {
+            FileDownloader.ACTION_DOWNLOAD -> {
+                val modelInfo = FileDownloader.getInfoForIntent(intent) ?: return START_NOT_STICKY
+                Log.d(TAG, "Got message $modelInfo")
+                queuedModels.add(modelInfo)
+                sendEnqueued(modelInfo)
+                executor.execute { main() }
+            }
+
+            FileDownloader.ACTION_UNZIP -> {
+                val uri = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+                    intent.getParcelableExtra(FileDownloader.UNZIP_URI, Uri::class.java)
+                } else {
+                    intent.getParcelableExtra(FileDownloader.UNZIP_URI)
+                }
+                executor.execute { unzipUri(uri!!) }
+            }
+        }
+        startForeground(notificationId, notificationBuilder.build())
+
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU) {
+            startForeground(notificationId, notificationBuilder.build())
+        } else {
+            startForeground(notificationId, notificationBuilder.build(),
+                FOREGROUND_SERVICE_TYPE_DATA_SYNC)
+        }
+
+        return START_NOT_STICKY
+    }
+
+    private fun unzipUri(uri: Uri) {
+        Log.d(TAG, "Unzipping $uri")
+        val filename = "ImportedFile.zip"
+        val file = getTemporaryDownloadLocation(this, filename)
+        Tools.copyStreamToFile(contentResolver!!.openInputStream(uri)!!, file)
+        unzipProgress = 0f
+        currentModel = ModelInfo(uri.toString(), file.name)
+        setState(State.NONE)
+        unzipFile(file)
+        if (interrupt) {
+            interrupted(file)
+        }
+        Log.d(TAG, "Finished unzipping")
+        file.delete()
+        setState(State.FINISHED)
+        Log.d(TAG, "Finished processing $currentModel")
+        mainEnd()
+    }
+
+    private fun main() {
+        currentModel = queuedModels.poll()
+        val currentModelS = currentModel ?: return
+        Log.d(TAG, "Started processing $currentModelS")
+        downloadProgress = 0f
+        unzipProgress = 0f
+        setState(State.NONE)
+        val downloadLocation = getTemporaryDownloadLocation(
+            applicationContext, currentModelS.filename
+        )
+        if (!downloadLocation.parentFile!!.exists()) {
+            downloadLocation.parentFile!!.mkdirs()
+        }
+        try {
+            downloadFile(downloadLocation)
+        } catch (e: IOException) {
+            e.printStackTrace()
+            setError(e.message)
+            mainEnd()
+            return
+        }
+        if (interrupt) {
+            interrupted(downloadLocation)
+            return
+        }
+        Log.d(TAG, "Finished downloading")
+        try {
+            unzipFile(downloadLocation)
+        } catch (e: IOException) {
+            e.printStackTrace()
+            setError(e.message)
+            mainEnd()
+            return
+        }
+        if (interrupt) {
+            interrupted(downloadLocation)
+        }
+        Log.d(TAG, "Finished unzipping")
+        downloadLocation.delete()
+        setState(State.FINISHED)
+        Log.d(TAG, "Finished processing $currentModel")
+        mainEnd()
+    }
+
+    private fun interrupted(downloadLocation: File?) {
+        downloadLocation?.let {
+            if (it.exists()) {
+                it.delete()
+            }
+        }
+        val unzipFolder = getTemporaryUnzipLocation(this)
+        if (unzipFolder.exists()) {
+            Tools.deleteRecursive(unzipFolder)
+        }
+
+        Log.d(TAG, "Download Canceled")
+        EventBus.getDefault().post(
+            CancelFinished(currentModel!!)
+        )
+        updateNotification()
+
+        interrupt = false
+        mainEnd()
+    }
+
+    private fun mainEnd() {
+        downloadProgress = 0f
+        unzipProgress = 0f
+        currentState = State.NONE
+        currentModel = null
+        if (queuedModels.isEmpty()) stopForeground(false)
+    }
+
+    @Throws(IOException::class)
+    private fun downloadFile(downloadLocation: File) {
+        setState(State.DOWNLOAD_STARTED)
+        val url = URL(currentModel!!.url)
+        val urlConnection = url.openConnection()
+        urlConnection.connect()
+        val lengthOfFile = urlConnection.contentLength
+        Log.d("TAG", "Length of file: $lengthOfFile")
+        setDownloadProgress(0f)
+        val input: InputStream = BufferedInputStream(url.openStream())
+        val output: OutputStream = FileOutputStream(downloadLocation)
+        val data = ByteArray(1024) // 1mb
+        var total: Float = 0f
+        var count: Int
+        while (input.read(data).also { count = it } != -1 && !interrupt) {
+            total += count
+            setDownloadProgress(total / lengthOfFile)
+            output.write(data, 0, count)
+        }
+        output.flush()
+        output.close()
+        input.close()
+        if (!interrupt) {
+            setDownloadProgress(1f)
+            setState(State.DOWNLOAD_FINISHED)
+        }
+    }
+
+    @Throws(IOException::class)
+    private fun unzipFile(downloadLocation: File) {
+        setState(State.UNZIP_STARTED)
+//        val unzipDestination = getDirectoryForModel(
+//            applicationContext, currentModel!!.locale
+//        )
+//        if (!unzipDestination.exists()) {
+//            unzipDestination.mkdirs()
+//        }
+//        val unzipFolder = getTemporaryUnzipLocation(this)
+//        val currentUnzipFolder = File(unzipFolder, unzipDestination.name)
+        ZipTools.unzip(
+            downloadLocation, currentModel!!.locale, applicationContext,
+            errorObserver = {
+                setError(it)
+            }
+        ) { d: Double -> setUnzipProgress(d.toFloat()) }
+        setUnzipProgress(1f)
+        setState(State.UNZIP_FINISHED)
+    }
+
+    private var lastDownloadProgress = 0f
+    private var lastUnzipProgress = 0f
+    private var lastState: State = State.NONE
+    private var lastUpdateTime: Long = 0
+    private fun updateNotification() {
+        if (lastDownloadProgress == downloadProgress && lastUnzipProgress == unzipProgress && lastState == currentState) // nothing changed
+            return
+        val currentTime = System.currentTimeMillis()
+        if (currentTime - lastUpdateTime < minUpdateTime) {
+            if (lastState == currentState) { // it's a progress update
+                if (!(downloadProgress == 1f && unzipProgress == 0f) && unzipProgress != 1f) { // it's not the last progress update
+                    lastUpdateTime = currentTime
+                    return
+                }
+            }
+        }
+        lastUpdateTime = currentTime
+        when (currentState) {
+            State.NONE -> notificationBuilder.setContentText("Unknown")
+                .setProgress(0, 0, true)
+
+            State.DOWNLOAD_STARTED, State.DOWNLOAD_FINISHED -> notificationBuilder.setContentText(
+                "Download has started"
+            ).setProgress(PROGRESS_MAX, (downloadProgress * PROGRESS_MAX).toInt(), false)
+
+            State.UNZIP_STARTED, State.UNZIP_FINISHED -> notificationBuilder.setContentText(
+                "Unzipping the model"
+            ).setProgress(PROGRESS_MAX, (unzipProgress * PROGRESS_MAX).toInt(), false)
+
+            State.FINISHED -> notificationBuilder.setContentText("Download Completed!")
+                .setProgress(0, 0, false)
+
+            State.ERROR -> notificationBuilder.setContentText("An error occurred while downloading.")
+                .setProgress(0, 0, false)
+
+            State.CANCELED -> notificationBuilder.setContentText("Downloading Canceled")
+                .setProgress(0, 0, false)
+
+            else -> {}
+        }
+
+        if (ActivityCompat.checkSelfPermission(
+                this, Manifest.permission.POST_NOTIFICATIONS
+            ) == PackageManager.PERMISSION_GRANTED
+        ) {
+            notificationManager.notify(notificationId, notificationBuilder.build())
+        }
+        lastDownloadProgress = downloadProgress
+        lastUnzipProgress = unzipProgress
+        lastState = currentState
+    }
+
+    private fun setState(state: State) {
+        currentState = state
+        EventBus.getDefault().post(DownloadState(currentModel!!, state))
+        updateNotification()
+    }
+
+    private fun setDownloadProgress(progress: Float) {
+        downloadProgress = progress
+        EventBus.getDefault().post(DownloadProgress(currentModel!!, downloadProgress))
+        updateNotification()
+    }
+
+    private fun setUnzipProgress(progress: Float) {
+        unzipProgress = progress
+        EventBus.getDefault().post(UnzipProgress(currentModel!!, unzipProgress))
+        updateNotification()
+    }
+
+    private fun setError(message: String?) {
+        setState(State.ERROR)
+        EventBus.getDefault().post(DownloadError(currentModel!!, message ?: ""))
+        updateNotification()
+    }
+
+    private fun sendEnqueued(modelInfo: ModelInfo) {
+        EventBus.getDefault().post(DownloadState(modelInfo, State.QUEUED))
+    }
+
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    fun handleStatusQuery() {
+        EventBus.getDefault()
+            .post(Status(currentModel, queuedModels, downloadProgress, unzipProgress, currentState))
+    }
+
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    fun handleCancelPending(event: CancelPending) {
+        if (queuedModels.remove(event.info)) {
+            EventBus.getDefault().post(
+                Status(
+                    currentModel, queuedModels, downloadProgress, unzipProgress, currentState
+                )
+            )
+        }
+    }
+
+    @Subscribe(threadMode = ThreadMode.MAIN)
+    fun handleCancelCurrent(event: CancelCurrent) {
+        if (currentModel == event.info) {
+            interrupt = true
+            setState(State.CANCELED)
+        }
+    }
+
+    override fun onBind(intent: Intent): IBinder? {
+        return null
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+        stopSelf()
+        EventBus.getDefault().unregister(this)
+    }
+
+    companion object {
+        private const val TAG = "FileDownloadService"
+        private const val notificationId = 1
+        private const val PROGRESS_MAX = 100
+        private const val minUpdateTime = (1000 / 5 // 5 updates a second;
+                ).toLong()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/ZipTools.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/ZipTools.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/ZipTools.kt
new file mode 100644
--- /dev/null	(date 1707315546050)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/ZipTools.kt	(date 1707315546050)
@@ -0,0 +1,143 @@
+package com.optiflowx.optikeysx.core.downloader
+
+import android.content.Context
+import android.util.Log
+import androidx.lifecycle.Observer
+import com.optiflowx.optikeysx.Constants
+import com.optiflowx.optikeysx.core.Tools.deleteRecursive
+import java.io.*
+import java.util.Locale
+import java.util.regex.Pattern
+import java.util.zip.ZipEntry
+import java.util.zip.ZipFile
+
+object ZipTools {
+    private const val TAG = "ZipTools"
+    private val localePattern: Pattern =
+        Pattern.compile("vosk-model-(small-)?(\\w\\w(-\\w\\w)?)-(\\w+-)?\\d\\.\\d+.*")
+
+    @Throws(IOException::class)
+    fun unzip(
+        archive: File,
+//        tempUnzipLocation: File,
+//        unzipFinalDestination: File,
+        definedLocale: Locale = Locale.ROOT,
+        context: Context,
+        errorObserver: Observer<String>? = null,
+        progressObserver: Observer<Double>
+    ) {
+        var locale = definedLocale
+        val tempUnzipLocation = Constants.getTemporaryUnzipLocation(context)
+
+        if (!tempUnzipLocation.parentFile!!.exists()){
+            tempUnzipLocation.parentFile!!.mkdirs()
+        }
+
+        if (tempUnzipLocation.exists()) {
+            deleteRecursive(tempUnzipLocation)
+        }
+        val zipfile = ZipFile(archive)
+        val e = zipfile.entries()
+        val size = zipfile.size().toDouble()
+
+        var foundAmFinalMDL = false
+        var i = 0
+        while (e.hasMoreElements()) {
+            progressObserver.onChanged(i / size)
+            val entry = e.nextElement() as ZipEntry
+            if (locale == Locale.ROOT) {
+                Log.d(TAG, "Trying to detect locale: ${entry.name}")
+                val matcher = localePattern.matcher(entry.name)
+                if (matcher.matches()) {
+                    locale = Locale.forLanguageTag(matcher.group(2)!!)
+                    Log.d(TAG, "Locale detected: ${locale.toLanguageTag()}")
+                }
+            }
+
+            // Some tests to make sure it actually is a Vosk model
+            if (!foundAmFinalMDL && entry.name.endsWith("/am/final.mdl")) {
+                foundAmFinalMDL = true
+            }
+
+            // outdated, but final.mdl might be elsewhere
+            if (!foundAmFinalMDL && entry.name.endsWith("/final.mdl")) {
+                foundAmFinalMDL = true
+            }
+
+            unzipEntry(zipfile, entry, tempUnzipLocation.absolutePath)
+            i++
+        }
+
+        if (!foundAmFinalMDL) {
+            // Not a Vosk model!
+            Log.e(TAG, "Not a Vosk model: ${archive.absolutePath}")
+            errorObserver?.onChanged("Zip is not a Vosk model!")
+            tempUnzipLocation.delete()
+            return
+        }
+
+        val unzipFinalDestination = Constants.getDirectoryForModel(
+            context, locale
+        )
+        if (!unzipFinalDestination.exists()) {
+            unzipFinalDestination.mkdirs()
+        }
+
+        Log.d(TAG, "Unzipping finished. Moving to ${unzipFinalDestination.absolutePath}")
+
+//        var moveSuccess: Boolean
+//        if (unzipFinalDestination.exists()) {
+//            moveSuccess = true
+//            for (f in tempUnzipLocation.listFiles()!!) {
+//                moveSuccess = f.renameTo(File(unzipFinalDestination, f.name))
+//                if (!moveSuccess) break
+//            }
+//            tempUnzipLocation.delete()
+//        } else {
+//            moveSuccess = tempUnzipLocation.renameTo(unzipFinalDestination)
+//        }
+
+        val moveSuccess = tempUnzipLocation.renameTo(unzipFinalDestination)
+        if (!moveSuccess) {
+            Log.e(TAG, "Model exists at ${unzipFinalDestination.absolutePath}")
+            errorObserver?.onChanged("Model exists")
+            tempUnzipLocation.delete()
+        }
+    }
+
+    @Throws(IOException::class)
+    private fun unzipEntry(zipfile: ZipFile, entry: ZipEntry, outputDir: String) {
+        if (entry.isDirectory) {
+            createDir(File(outputDir, entry.name))
+            return
+        }
+        val outputFile = File(outputDir, entry.name)
+        if (!outputFile.parentFile!!.exists()) {
+            createDir(outputFile.parentFile!!)
+        }
+        Log.v("ZIP E", "Extracting: $entry")
+        zipfile.getInputStream(entry).use { zin ->
+            BufferedInputStream(zin).use { inputStream ->
+                BufferedOutputStream(
+                    FileOutputStream(outputFile)
+                ).use { outputStream ->
+                    val b = ByteArray(1024)
+                    var n: Int
+                    while (inputStream.read(b, 0, 1024).also { n = it } >= 0) {
+                        outputStream.write(b, 0, n)
+                    }
+                }
+            }
+        }
+    }
+
+    private fun createDir(dir: File) {
+        if (dir.exists()) {
+            return
+        }
+        Log.v("ZIP E", "Creating dir " + dir.name)
+        if (!dir.mkdirs()) {
+            throw RuntimeException("Can not create dir $dir")
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/GrantPermissionsUI.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/GrantPermissionsUI.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/GrantPermissionsUI.kt
new file mode 100644
--- /dev/null	(date 1707376148506)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/GrantPermissionsUI.kt	(date 1707376148506)
@@ -0,0 +1,85 @@
+package com.optiflowx.optikeysx.ui.cupertino
+
+import android.Manifest
+import android.app.Activity
+import android.content.Intent
+import android.provider.Settings
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.height
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.State
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.unit.dp
+import androidx.core.app.ActivityCompat
+import io.github.alexzhirkevich.cupertino.CupertinoButton
+import io.github.alexzhirkevich.cupertino.CupertinoText
+import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
+import splitties.systemservices.inputMethodManager
+
+@OptIn(ExperimentalCupertinoApi::class)
+@Composable
+fun GrantPermissionUI(
+    mic: State<Boolean>,
+    ime: State<Boolean>,
+    kSS: State<Boolean>,
+    nP: State<Boolean>,
+    activity: Activity,
+) {
+    val PERMISSIONS_REQUEST_RECORD_AUDIO = 1
+    val context = LocalContext.current
+
+    Column(
+        verticalArrangement = Arrangement.Center,
+        horizontalAlignment = Alignment.CenterHorizontally,
+        modifier = Modifier.fillMaxSize(),
+    ) {
+        CupertinoButton(onClick = {
+            ActivityCompat.requestPermissions(
+                activity, arrayOf(
+                    Manifest.permission.RECORD_AUDIO
+                ), PERMISSIONS_REQUEST_RECORD_AUDIO
+            )
+        }, enabled = !mic.value) {
+            if (mic.value) {
+                CupertinoText("Microphone Permission Granted")
+            } else {
+                CupertinoText("Microphone Permission Not Granted")
+            }
+        }
+        Spacer(modifier = Modifier.height(20.dp))
+        CupertinoButton(onClick = {
+            context.startActivity(Intent(Settings.ACTION_INPUT_METHOD_SETTINGS))
+        }, enabled = !ime.value) {
+            if (ime.value) {
+                CupertinoText("Keyboard Enabled")
+            } else {
+                CupertinoText("Keyboard Not Enabled")
+            }
+        }
+        Spacer(modifier = Modifier.height(20.dp))
+        CupertinoButton(onClick = {
+            inputMethodManager.showInputMethodPicker()
+        }, enabled = !kSS.value) {
+            if (kSS.value) {
+                CupertinoText("Keyboard Selected")
+            } else {
+                CupertinoText("Keyboard Not Selected")
+            }
+        }
+        Spacer(modifier = Modifier.height(20.dp))
+        CupertinoButton(onClick = {
+            inputMethodManager.showInputMethodPicker()
+        }, enabled = !nP.value) {
+            if (nP.value) {
+                CupertinoText("Notifications Permission Granted")
+            } else {
+                CupertinoText("Notifications Permission Not Granted")
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/data/InstalledModelReference.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/data/InstalledModelReference.kt b/app/src/main/java/com/optiflowx/optikeysx/core/data/InstalledModelReference.kt
new file mode 100644
--- /dev/null	(date 1707315545922)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/data/InstalledModelReference.kt	(date 1707315545922)
@@ -0,0 +1,6 @@
+package com.optiflowx.optikeysx.core.data
+
+import kotlinx.serialization.Serializable
+
+@Serializable
+data class InstalledModelReference(val path: String, val name: String, val type: ModelType)
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/data/ModelLink.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/data/ModelLink.kt b/app/src/main/java/com/optiflowx/optikeysx/core/data/ModelLink.kt
new file mode 100644
--- /dev/null	(date 1707315545933)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/data/ModelLink.kt	(date 1707315545933)
@@ -0,0 +1,96 @@
+package com.optiflowx.optikeysx.core.data
+
+import java.util.Locale
+
+// Locale list available at: https://stackoverflow.com/questions/7973023/what-is-the-list-of-supported-languages-locales-on-android
+/**
+ *
+ */
+enum class ModelLink(
+    val link: String,
+    val locale: Locale
+) {
+    ENGLISH_US(
+        "https://alphacephei.com/vosk/models/vosk-model-small-en-us-0.15.zip",
+        Locale.US
+    ),
+    ENGLISH_IN(
+        "https://alphacephei.com/vosk/models/vosk-model-small-en-in-0.4.zip",
+        Locale("en", "IN")
+    ),
+    CHINESE(
+        "https://alphacephei.com/vosk/models/vosk-model-small-cn-0.22.zip",
+        Locale.CHINESE
+    ),
+    RUSSIAN(
+        "https://alphacephei.com/vosk/models/vosk-model-small-ru-0.22.zip",
+        Locale("ru")
+    ),
+    FRENCH(
+        "https://alphacephei.com/vosk/models/vosk-model-small-fr-0.22.zip",
+        Locale.FRENCH
+    ),
+    GERMAN(
+        "https://alphacephei.com/vosk/models/vosk-model-small-de-0.15.zip",
+        Locale.GERMAN
+    ),
+    SPANISH(
+        "https://alphacephei.com/vosk/models/vosk-model-small-es-0.42.zip",
+        Locale("es")
+    ),
+    PORTUGUESE(
+        "https://alphacephei.com/vosk/models/vosk-model-small-pt-0.3.zip",
+        Locale("pt")
+    ),
+    TURKISH(
+        "https://alphacephei.com/vosk/models/vosk-model-small-tr-0.3.zip",
+        Locale("tr")
+    ),
+    VIETNAMESE(
+        "https://alphacephei.com/vosk/models/vosk-model-small-vn-0.3.zip",
+        Locale("vi")
+    ),
+    ITALIAN(
+        "https://alphacephei.com/vosk/models/vosk-model-small-it-0.22.zip",
+        Locale.ITALIAN
+    ),
+    DUTCH(
+        "https://alphacephei.com/vosk/models/vosk-model-small-nl-0.22.zip",
+        Locale("nl")
+    ),
+    CATALAN(
+        "https://alphacephei.com/vosk/models/vosk-model-small-ca-0.4.zip",
+        Locale("ca")
+    ),
+    PERSIAN(
+        "https://alphacephei.com/vosk/models/vosk-model-small-fa-0.4.zip",
+        Locale("fa")
+    ),
+    KAZAKH(
+        "https://alphacephei.com/vosk/models/vosk-model-small-kz-0.15.zip",
+        Locale("kk")
+    ),
+    JAPANESE(
+        "https://alphacephei.com/vosk/models/vosk-model-small-ja-0.22.zip",
+        Locale.JAPANESE
+    ),
+    ESPERANTO(
+        "https://alphacephei.com/vosk/models/vosk-model-small-eo-0.42.zip",
+        Locale("eo")
+    ),
+    HINDI(
+        "https://alphacephei.com/vosk/models/vosk-model-small-hi-0.22.zip",
+        Locale("hi")
+    ),
+    CZECH(
+        "https://alphacephei.com/vosk/models/vosk-model-small-cs-0.4-rhasspy.zip",
+        Locale("cs")
+    ),
+    POLISH(
+        "https://alphacephei.com/vosk/models/vosk-model-small-pl-0.22.zip",
+        Locale("pl")
+    );
+
+    val filename: String
+        get() = link.substring(link.lastIndexOf('/') + 1, link.lastIndexOf('.'))
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/data/ModelType.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/data/ModelType.kt b/app/src/main/java/com/optiflowx/optikeysx/core/data/ModelType.kt
new file mode 100644
--- /dev/null	(date 1707315546126)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/data/ModelType.kt	(date 1707315546126)
@@ -0,0 +1,8 @@
+package com.optiflowx.optikeysx.core.data
+
+import kotlinx.serialization.Serializable
+
+@Serializable
+enum class ModelType {
+    VoskLocal
+}
\ No newline at end of file
Index: app/src/main/res/xml/method.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<input-method xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n    <subtype android:label=\"English (Global)\"\r\n        android:imeSubtypeLocale=\"en_US\"\r\n        android:languageTag=\"en-US\"\r\n        android:imeSubtypeMode=\"keyboard\"\r\n        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />\r\n\r\n    <subtype android:label=\"Russian\"\r\n        android:imeSubtypeLocale=\"ru\"\r\n        android:languageTag=\"ru\"\r\n        android:imeSubtypeMode=\"keyboard\"\r\n        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />\r\n\r\n    <subtype android:label=\"Spanish\"\r\n        android:imeSubtypeLocale=\"es\"\r\n        android:languageTag=\"es\"\r\n        android:imeSubtypeMode=\"keyboard\"\r\n        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />\r\n\r\n    <subtype android:label=\"French (France)\"\r\n        android:imeSubtypeLocale=\"fr_FR\"\r\n        android:languageTag=\"fr-FR\"\r\n        android:imeSubtypeMode=\"keyboard\"\r\n        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />\r\n\r\n    <subtype android:label=\"Italian\"\r\n        android:imeSubtypeLocale=\"it\"\r\n        android:languageTag=\"it\"\r\n        android:imeSubtypeMode=\"keyboard\"\r\n        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />\r\n\r\n    <subtype android:label=\"Portuguese (Brazil)\"\r\n        android:imeSubtypeLocale=\"pt_BR\"\r\n        android:languageTag=\"pt-BR\"\r\n        android:imeSubtypeMode=\"keyboard\"\r\n        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />\r\n\r\n    <subtype android:label=\"Portuguese (Portugal)\"\r\n        android:imeSubtypeLocale=\"pt_PT\"\r\n        android:languageTag=\"pt-PT\"\r\n        android:imeSubtypeMode=\"keyboard\"\r\n        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />\r\n\r\n    <subtype android:label=\"Dutch\"\r\n        android:imeSubtypeLocale=\"nl\"\r\n        android:languageTag=\"nl\"\r\n        android:imeSubtypeMode=\"keyboard\"\r\n        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />\r\n\r\n    <subtype android:label=\"Turkish\"\r\n        android:imeSubtypeLocale=\"tr\"\r\n        android:languageTag=\"tr\"\r\n        android:imeSubtypeMode=\"keyboard\"\r\n        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />\r\n\r\n<!--    <subtype android:label=\"German\"-->\r\n<!--        android:imeSubtypeLocale=\"de\"-->\r\n<!--        android:languageTag=\"de\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Ukrainian\"-->\r\n<!--        android:imeSubtypeLocale=\"uk\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Romanian\"-->\r\n<!--        android:imeSubtypeLocale=\"ro\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Hungarian\"-->\r\n<!--        android:imeSubtypeLocale=\"hu\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Arabic\"-->\r\n<!--        android:imeSubtypeLocale=\"ar\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Hindi\"-->\r\n<!--        android:imeSubtypeLocale=\"hi\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Danish\"-->\r\n<!--        android:imeSubtypeLocale=\"da\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Filipino\"-->\r\n<!--        android:imeSubtypeLocale=\"fil\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Vietnamese\"-->\r\n<!--        android:imeSubtypeLocale=\"vi\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Indonesian\"-->\r\n<!--        android:imeSubtypeLocale=\"in\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Malay\"-->\r\n<!--        android:imeSubtypeLocale=\"ms\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Afrikaans\"-->\r\n<!--        android:imeSubtypeLocale=\"af\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n\r\n<!--    <subtype android:label=\"Zulu\"-->\r\n<!--        android:imeSubtypeLocale=\"zu\"-->\r\n<!--        android:imeSubtypeMode=\"keyboard\"-->\r\n<!--        android:imeSubtypeExtraValue=\"charDataFile=strokemaps_dynamic\" />-->\r\n</input-method>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/method.xml b/app/src/main/res/xml/method.xml
--- a/app/src/main/res/xml/method.xml	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/res/xml/method.xml	(date 1707319332687)
@@ -1,122 +1,123 @@
 <?xml version="1.0" encoding="utf-8"?>
-<input-method xmlns:android="http://schemas.android.com/apk/res/android">
+<input-method xmlns:android="http://schemas.android.com/apk/res/android"
+    android:settingsActivity="com.optiflowx.optikeysx.MainActivity">
     <subtype android:label="English (Global)"
         android:imeSubtypeLocale="en_US"
         android:languageTag="en-US"
         android:imeSubtypeMode="keyboard"
-        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />
+        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />
 
     <subtype android:label="Russian"
         android:imeSubtypeLocale="ru"
         android:languageTag="ru"
         android:imeSubtypeMode="keyboard"
-        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />
+        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />
 
     <subtype android:label="Spanish"
         android:imeSubtypeLocale="es"
         android:languageTag="es"
         android:imeSubtypeMode="keyboard"
-        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />
+        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />
 
     <subtype android:label="French (France)"
         android:imeSubtypeLocale="fr_FR"
         android:languageTag="fr-FR"
         android:imeSubtypeMode="keyboard"
-        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />
+        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />
 
     <subtype android:label="Italian"
         android:imeSubtypeLocale="it"
         android:languageTag="it"
         android:imeSubtypeMode="keyboard"
-        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />
+        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />
 
     <subtype android:label="Portuguese (Brazil)"
         android:imeSubtypeLocale="pt_BR"
         android:languageTag="pt-BR"
         android:imeSubtypeMode="keyboard"
-        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />
+        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />
 
     <subtype android:label="Portuguese (Portugal)"
         android:imeSubtypeLocale="pt_PT"
         android:languageTag="pt-PT"
         android:imeSubtypeMode="keyboard"
-        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />
+        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />
 
     <subtype android:label="Dutch"
         android:imeSubtypeLocale="nl"
         android:languageTag="nl"
         android:imeSubtypeMode="keyboard"
-        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />
+        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />
 
     <subtype android:label="Turkish"
         android:imeSubtypeLocale="tr"
         android:languageTag="tr"
         android:imeSubtypeMode="keyboard"
-        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />
+        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />
 
 <!--    <subtype android:label="German"-->
 <!--        android:imeSubtypeLocale="de"-->
 <!--        android:languageTag="de"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Ukrainian"-->
 <!--        android:imeSubtypeLocale="uk"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Romanian"-->
 <!--        android:imeSubtypeLocale="ro"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Hungarian"-->
 <!--        android:imeSubtypeLocale="hu"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Arabic"-->
 <!--        android:imeSubtypeLocale="ar"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Hindi"-->
 <!--        android:imeSubtypeLocale="hi"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Danish"-->
 <!--        android:imeSubtypeLocale="da"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Filipino"-->
 <!--        android:imeSubtypeLocale="fil"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Vietnamese"-->
 <!--        android:imeSubtypeLocale="vi"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Indonesian"-->
 <!--        android:imeSubtypeLocale="in"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Malay"-->
 <!--        android:imeSubtypeLocale="ms"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Afrikaans"-->
 <!--        android:imeSubtypeLocale="af"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 
 <!--    <subtype android:label="Zulu"-->
 <!--        android:imeSubtypeLocale="zu"-->
 <!--        android:imeSubtypeMode="keyboard"-->
-<!--        android:imeSubtypeExtraValue="charDataFile=strokemaps_dynamic" />-->
+<!--        android:imeSubtypeExtraValue="com.optiflowx.optikeysx" />-->
 </input-method>
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/KeyboardGlobalOptions.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.ui.cupertino\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.inputmethodservice.InputMethodService\r\nimport android.provider.Settings\r\nimport android.view.inputmethod.InputMethodManager\r\nimport androidx.compose.animation.AnimatedVisibility\r\nimport androidx.compose.foundation.background\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.wrapContentHeight\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.Stable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.clip\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.PlatformTextStyle\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.compose.ui.window.Popup\r\nimport androidx.compose.ui.window.PopupProperties\r\nimport com.optiflowx.optikeysx.MainActivity\r\nimport com.optiflowx.optikeysx.core.enums.KeyboardType\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.core.utils.boxShadow\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\nimport io.github.alexzhirkevich.cupertino.theme.CupertinoColors\r\nimport io.github.alexzhirkevich.cupertino.theme.systemBlue\r\n\r\n@Composable\r\nfun KeyboardGlobalOptions(\r\n    viewModel: KeyboardViewModel,\r\n    fontType: String,\r\n    width: Dp,\r\n    itemHeight: Int = 45,\r\n    itemTextSize: Int = 15,\r\n    startPadding: Int = 0,\r\n) {\r\n    val context = LocalContext.current\r\n    val mIMM =\r\n        (context.getSystemService(InputMethodService.INPUT_METHOD_SERVICE) as InputMethodManager)\r\n\r\n    val mIMS = mIMM.currentInputMethodSubtype\r\n\r\n    val displayName = mIMS?.getDisplayName(\r\n        context,\r\n        context.packageName,\r\n        context.applicationInfo\r\n    ).toString()\r\n\r\n    val isShowOptions = viewModel.isShowOptions.collectAsState().value\r\n    val options = listOf(\"Keyboard Settings\", \"Language\", \"Clipboard\")\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n\r\n    AnimatedVisibility(isShowOptions) {\r\n        Popup(\r\n            alignment = Alignment.BottomStart,\r\n            onDismissRequest = { dismiss(viewModel) },\r\n            properties = PopupProperties(\r\n                focusable = false,\r\n                dismissOnBackPress = true,\r\n                dismissOnClickOutside = true,\r\n                clippingEnabled = false,\r\n            )\r\n        ) {\r\n            Surface(\r\n                shape = RoundedCornerShape(8.dp),\r\n                color = MaterialTheme.colorScheme.secondary,\r\n                modifier = Modifier\r\n                    .width((width.value * 0.45).dp)\r\n                    .wrapContentHeight()\r\n                    .boxShadow(\r\n                        color = MaterialTheme.colorScheme.tertiaryContainer,\r\n                        alpha = 0.5f,\r\n                        offsetX = 0.dp,\r\n                        offsetY = 0.dp,\r\n                        blurRadius = 20.dp\r\n                    )\r\n                    .padding(start = startPadding.dp)\r\n                    .clip(RoundedCornerShape(8.dp)),\r\n            ) {\r\n                Column {\r\n                    options.forEach { title ->\r\n                        Box(\r\n                            contentAlignment = Alignment.Center,\r\n                            modifier = Modifier\r\n                                .background((title == \"Language\").let {\r\n                                    if (it) CupertinoColors.systemBlue\r\n                                    else Color.Transparent\r\n                                })\r\n                                .fillMaxWidth()\r\n                                .height(itemHeight.dp)\r\n                                .clickable(onClick = { onItemClick(title, context, viewModel) })\r\n                        ) {\r\n                            Text(\r\n                                text = if (title == \"Language\") displayName else {\r\n                                    when (title) {\r\n                                        \"Keyboard Settings\" -> keyboardLocale.keyboardSettings()\r\n                                        \"Clipboard\" -> keyboardLocale.clipboard()\r\n                                        else -> \"Unknown\"\r\n                                    }\r\n                                },\r\n                                textAlign = TextAlign.Center,\r\n                                style = TextStyle(\r\n                                    fontSize = itemTextSize.sp.nonScaledSp,\r\n                                    fontFamily = appFontType(fontType),\r\n                                    color = (if (title == \"Language\") Color.White\r\n                                    else MaterialTheme.colorScheme.onBackground),\r\n                                    platformStyle = PlatformTextStyle(false)\r\n                                ),\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Stable\r\nprivate fun onKeyboardSelectionType(context: Context) {\r\n    val imId = Settings.Secure.getString(\r\n        context.contentResolver,\r\n        Settings.Secure.DEFAULT_INPUT_METHOD\r\n    )\r\n\r\n    val intent = Intent(Settings.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS)\r\n        .putExtra(Settings.EXTRA_INPUT_METHOD_ID, imId)\r\n        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        .putExtra(Intent.EXTRA_TITLE, \"Select Your Preferred Subtype(s)\")\r\n\r\n    context.startActivity(intent)\r\n}\r\n\r\n@Stable\r\nprivate fun navigateToKeyboardSettings(context: Context) {\r\n    val intent = Intent(context, MainActivity::class.java)\r\n        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n\r\n    context.startActivity(intent)\r\n}\r\n\r\n@Stable\r\nprivate fun onItemClick(title: String, context: Context, viewModel: KeyboardViewModel) {\r\n    when (title) {\r\n        \"Keyboard Settings\" -> navigateToKeyboardSettings(context)\r\n        \"Language\" -> onKeyboardSelectionType(context)\r\n        \"Clipboard\" -> switchToClipboard(viewModel)\r\n    }\r\n    dismiss(viewModel)\r\n}\r\n\r\n@Stable\r\nprivate fun dismiss(viewModel: KeyboardViewModel) {\r\n    viewModel.updateIsShowOptions(false)\r\n}\r\n\r\n@Stable\r\nprivate fun switchToClipboard(viewModel: KeyboardViewModel) {\r\n    viewModel.onUpdateKeyboardType(KeyboardType.Clipboard)\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/KeyboardGlobalOptions.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/KeyboardGlobalOptions.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/KeyboardGlobalOptions.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/KeyboardGlobalOptions.kt	(date 1707381258709)
@@ -36,6 +36,7 @@
 import androidx.compose.ui.window.Popup
 import androidx.compose.ui.window.PopupProperties
 import com.optiflowx.optikeysx.MainActivity
+import com.optiflowx.optikeysx.core.enums.KeyboardFontType
 import com.optiflowx.optikeysx.core.enums.KeyboardType
 import com.optiflowx.optikeysx.core.utils.KeyboardLocale
 import com.optiflowx.optikeysx.core.utils.appFontType
@@ -48,7 +49,7 @@
 @Composable
 fun KeyboardGlobalOptions(
     viewModel: KeyboardViewModel,
-    fontType: String,
+    fontType: KeyboardFontType,
     width: Dp,
     itemHeight: Int = 45,
     itemTextSize: Int = 15,
@@ -68,7 +69,7 @@
 
     val isShowOptions = viewModel.isShowOptions.collectAsState().value
     val options = listOf("Keyboard Settings", "Language", "Clipboard")
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
 
     AnimatedVisibility(isShowOptions) {
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n}\r\n\r\nplugins {\r\n    id (\"com.android.application\") version \"8.2.1\" apply false\r\n    id (\"org.jetbrains.kotlin.android\") version \"1.9.22\" apply false\r\n//    kotlin(\"plugin.serialization\") version \"1.9.10\" apply true\r\n    id(\"com.google.devtools.ksp\") version \"1.9.22-1.0.17\" apply false\r\n    id(\"com.android.test\") version \"8.2.1\" apply false\r\n    id(\"androidx.baselineprofile\") version \"1.2.2\" apply false\r\n//    id(\"com.google.dagger.hilt.android\") version \"2.48\" apply false\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
--- a/build.gradle.kts	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/build.gradle.kts	(date 1707302849044)
@@ -8,10 +8,12 @@
 
 plugins {
     id ("com.android.application") version "8.2.1" apply false
+    id ("com.android.library") version "8.2.1" apply false
     id ("org.jetbrains.kotlin.android") version "1.9.22" apply false
-//    kotlin("plugin.serialization") version "1.9.10" apply true
+    kotlin("plugin.serialization") version "1.9.10" apply true
     id("com.google.devtools.ksp") version "1.9.22-1.0.17" apply false
     id("com.android.test") version "8.2.1" apply false
     id("androidx.baselineprofile") version "1.2.2" apply false
+    id("com.google.protobuf") version "0.9.4" apply false
 //    id("com.google.dagger.hilt.android") version "2.48" apply false
 }
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n//    kotlin(\"plugin.serialization\")\r\n    id(\"com.android.application\")\r\n    id(\"org.jetbrains.kotlin.android\")\r\n//    id (\"dagger.hilt.android.plugin\")\r\n//    id(\"kotlin-parcelize\")\r\n    id(\"com.google.devtools.ksp\")\r\n    id(\"androidx.baselineprofile\")\r\n}\r\n\r\nval hiltVersion = \"2.48\"\r\nval composeVersion = \"1.6.0\"\r\nval lifecycleVersion = \"2.7.0\"\r\nval archVersion = \"2.2.0\"\r\nval roomVersion = \"2.6.1\"\r\n\r\nandroid {\r\n    namespace = \"com.optiflowx.optikeysx\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.optiflowx.optikeysx\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 3\r\n        versionName = \"1.0.3\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n        vectorDrawables {\r\n            useSupportLibrary = true\r\n        }\r\n    }\r\n\r\n    buildTypes {\r\n        getByName(\"release\") {\r\n            isMinifyEnabled = true\r\n            isShrinkResources = true\r\n            isProfileable = true //TO BE FALSE\r\n            isCrunchPngs = true\r\n            isDebuggable = false\r\n\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n            signingConfig = signingConfigs.getByName(\"debug\")\r\n        }\r\n\r\n        getByName(\"debug\") {\r\n            isMinifyEnabled = false\r\n            isShrinkResources = false\r\n            isProfileable = true\r\n            isCrunchPngs = false\r\n            isDebuggable = true\r\n            isJniDebuggable = true\r\n\r\n            signingConfig = signingConfigs.getByName(\"debug\")\r\n        }\r\n    }\r\n\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n    }\r\n\r\n    kotlinOptions {\r\n        jvmTarget = \"11\"\r\n    }\r\n\r\n    buildFeatures {\r\n        compose = true\r\n    }\r\n\r\n    composeOptions {\r\n        kotlinCompilerExtensionVersion = \"1.5.8\"\r\n    }\r\n\r\n    packaging {\r\n        resources {\r\n            excludes += \"/META-INF/{AL2.0,LGPL2.1}\"\r\n        }\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(\"androidx.profileinstaller:profileinstaller:1.3.1\")\r\n    implementation(\"androidx.constraintlayout:constraintlayout-core:1.0.4\")\r\n    androidTestImplementation(\"androidx.test:runner:1.5.2\")\r\n\r\n//    implementation (\"io.qonversion.android.sdk:sdk:7.1.0\") // Qonversion SDK\r\n\r\n//    implementation(\"io.github.hokofly:hoko-blur:1.5.3\")\r\n\r\n    //Destinations\r\n    implementation(\"io.github.raamcosta.compose-destinations:core:1.10.0\")\r\n    \"baselineProfile\"(project(\":baselineprofiles\"))\r\n    ksp(\"io.github.raamcosta.compose-destinations:ksp:1.10.0\")\r\n\r\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib:1.9.22\")\r\n    implementation(\"androidx.appcompat:appcompat:1.6.1\")\r\n\r\n    //Compose Dependencies\r\n    implementation(\"androidx.compose.ui:ui:$composeVersion\")\r\n    implementation(\"androidx.compose.ui:ui-tooling:$composeVersion\")\r\n    implementation(\"androidx.compose.material3:material3:1.1.2\")\r\n    implementation(\"androidx.compose.foundation:foundation:$composeVersion\")\r\n    implementation(\"androidx.compose.runtime:runtime-livedata:$composeVersion\")\r\n\r\n    //Activity Compose\r\n    implementation(\"androidx.activity:activity-compose:1.8.2\")\r\n\r\n    implementation(\"androidx.core:core-ktx:1.12.0\")\r\n\r\n    //Simplify the UI\r\n    implementation(\"com.louiscad.splitties:splitties-systemservices:3.0.0\")\r\n    implementation(\"com.louiscad.splitties:splitties-views:3.0.0\")\r\n\r\n    // Compose Preview\r\n    implementation(platform(\"androidx.compose:compose-bom:2024.01.00\"))\r\n    implementation(\"androidx.test.ext:junit-ktx:1.1.5\")\r\n    implementation(\"androidx.test:monitor:1.6.1\")\r\n    debugImplementation(\"androidx.compose.ui:ui-tooling\")\r\n    implementation(\"androidx.compose.ui:ui-tooling-preview\")\r\n\r\n    //Constraint Layout\r\n    implementation(\"androidx.constraintlayout:constraintlayout-compose:1.1.0-alpha13\")\r\n\r\n    // Lifecycle Dependencies\r\n    implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleVersion\")\r\n    implementation(\"androidx.lifecycle:lifecycle-service:$lifecycleVersion\")\r\n    implementation(\"androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycleVersion\")\r\n    implementation(\"androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleVersion\")\r\n    implementation(\"androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleVersion\")\r\n    implementation(\"androidx.lifecycle:lifecycle-runtime-compose:$lifecycleVersion\")\r\n    implementation(\"androidx.lifecycle:lifecycle-viewmodel-savedstate:$lifecycleVersion\")\r\n    implementation(\"androidx.lifecycle:lifecycle-common-java8:$lifecycleVersion\")\r\n\r\n    //Cupertino\r\n    implementation(\"io.github.alexzhirkevich:cupertino:0.1.0-alpha03\")\r\n    implementation(\"io.github.alexzhirkevich:cupertino-icons-extended:0.1.0-alpha03\")\r\n\r\n    //Local Storage\r\n//    implementation(\"org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.7\")\r\n    implementation(\"androidx.datastore:datastore-preferences:1.1.0-beta01\")\r\n//    implementation(\"org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2\")\r\n\r\n    //Room database\r\n    implementation(\"androidx.room:room-runtime:$roomVersion\")\r\n\r\n    // To use Kotlin Symbol Processing (KSP)\r\n    ksp(\"androidx.room:room-compiler:$roomVersion\")\r\n\r\n    // optional - Kotlin Extensions and Coroutines support for Room\r\n    implementation(\"androidx.room:room-ktx:$roomVersion\")\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/build.gradle.kts	(date 1707382740265)
@@ -1,9 +1,10 @@
 plugins {
-//    kotlin("plugin.serialization")
+    kotlin("plugin.serialization")
     id("com.android.application")
     id("org.jetbrains.kotlin.android")
 //    id ("dagger.hilt.android.plugin")
 //    id("kotlin-parcelize")
+    id("com.google.protobuf")
     id("com.google.devtools.ksp")
     id("androidx.baselineprofile")
 }
@@ -13,6 +14,7 @@
 val lifecycleVersion = "2.7.0"
 val archVersion = "2.2.0"
 val roomVersion = "2.6.1"
+val voyagerVersion = "1.0.0"
 
 android {
     namespace = "com.optiflowx.optikeysx"
@@ -32,10 +34,10 @@
     }
 
     buildTypes {
-        getByName("release") {
+        release {
             isMinifyEnabled = true
             isShrinkResources = true
-            isProfileable = true //TO BE FALSE
+            isProfileable = false //TO BE FALSE
             isCrunchPngs = true
             isDebuggable = false
 
@@ -45,17 +47,6 @@
             )
             signingConfig = signingConfigs.getByName("debug")
         }
-
-        getByName("debug") {
-            isMinifyEnabled = false
-            isShrinkResources = false
-            isProfileable = true
-            isCrunchPngs = false
-            isDebuggable = true
-            isJniDebuggable = true
-
-            signingConfig = signingConfigs.getByName("debug")
-        }
     }
 
     compileOptions {
@@ -88,14 +79,28 @@
     implementation("androidx.constraintlayout:constraintlayout-core:1.0.4")
     androidTestImplementation("androidx.test:runner:1.5.2")
 
-//    implementation ("io.qonversion.android.sdk:sdk:7.1.0") // Qonversion SDK
+    implementation("dev.patrickgold.jetpref:jetpref-datastore-model:0.1.0-beta14")
+    implementation("dev.patrickgold.jetpref:jetpref-datastore-ui:0.1.0-beta14")
+    implementation("dev.patrickgold.jetpref:jetpref-material-ui:0.1.0-beta14")
 
-//    implementation("io.github.hokofly:hoko-blur:1.5.3")
+    implementation ("org.burnoutcrew.composereorderable:reorderable:0.9.6")
 
     //Destinations
-    implementation("io.github.raamcosta.compose-destinations:core:1.10.0")
+//    implementation("io.github.raamcosta.compose-destinations:core:1.10.0")
     "baselineProfile"(project(":baselineprofiles"))
-    ksp("io.github.raamcosta.compose-destinations:ksp:1.10.0")
+//    ksp("io.github.raamcosta.compose-destinations:ksp:1.10.0")
+
+    // Navigator
+    implementation("cafe.adriel.voyager:voyager-navigator:$voyagerVersion")
+
+    // Screen Model
+    implementation("cafe.adriel.voyager:voyager-screenmodel:$voyagerVersion")
+
+    // LiveData integration
+    implementation("cafe.adriel.voyager:voyager-livedata:$voyagerVersion")
+
+    // Transitions
+    implementation("cafe.adriel.voyager:voyager-transitions:$voyagerVersion")
 
     implementation("org.jetbrains.kotlin:kotlin-stdlib:1.9.22")
     implementation("androidx.appcompat:appcompat:1.6.1")
@@ -116,13 +121,23 @@
     implementation("com.louiscad.splitties:splitties-systemservices:3.0.0")
     implementation("com.louiscad.splitties:splitties-views:3.0.0")
 
-    // Compose Preview
+    // Compose Preview and Tests
     implementation(platform("androidx.compose:compose-bom:2024.01.00"))
     implementation("androidx.test.ext:junit-ktx:1.1.5")
     implementation("androidx.test:monitor:1.6.1")
     debugImplementation("androidx.compose.ui:ui-tooling")
     implementation("androidx.compose.ui:ui-tooling-preview")
 
+    //Voice
+    implementation("net.java.dev.jna:jna:5.13.0@aar")
+    implementation("com.alphacephei:vosk-android:0.3.32")
+    implementation("org.greenrobot:eventbus:3.3.1")
+    implementation("dev.gustavoavila:java-android-websocket-client:2.0.1")
+    implementation("io.grpc:grpc-okhttp:1.52.0")
+    implementation("io.grpc:grpc-protobuf-lite:1.52.0")
+    implementation("io.grpc:grpc-stub:1.52.0")
+    compileOnly("org.apache.tomcat:annotations-api:6.0.53") // necessary for Java 9+
+
     //Constraint Layout
     implementation("androidx.constraintlayout:constraintlayout-compose:1.1.0-alpha13")
 
@@ -142,8 +157,8 @@
 
     //Local Storage
 //    implementation("org.jetbrains.kotlinx:kotlinx-collections-immutable:0.3.7")
-    implementation("androidx.datastore:datastore-preferences:1.1.0-beta01")
-//    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2")
+//    implementation("androidx.datastore:datastore-preferences:1.1.0-beta01")
+    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.2")
 
     //Room database
     implementation("androidx.room:room-runtime:$roomVersion")
Index: app/src/main/java/com/optiflowx/optikeysx/views/keyboards/turkish/TurkishKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.keyboards.turkish\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyboardKey\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\nimport com.optiflowx.optikeysx.views.keyboards.standard.StandardConstraintSets\r\nimport com.optiflowx.optikeysx.views.keyboards.standard.StandardRowKeys\r\n\r\n@Composable\r\nfun StandardKeyboardView(\r\n    viewModel: KeyboardViewModel,\r\n    viewWidth: Dp,\r\n    keyHeight: Dp,\r\n    rowHeight: Dp,\r\n) {\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n    val constraintSets = StandardConstraintSets(keyHeight, rowHeight)\r\n    val nRowKeys = StandardRowKeys()\r\n\r\n\r\n    ConstraintLayout(\r\n        constraintSet = constraintSets.constraints,\r\n        modifier = Modifier.width(viewWidth),\r\n        optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n        animateChanges = true,\r\n        \r\n    ) {\r\n        Box(modifier = Modifier.layoutId('1')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.firstRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row1Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('2')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.secondRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row2Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier =  Modifier.layoutId('3')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.thirdRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row3Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('4')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.fourthRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n            ) {\r\n                KeyboardKey(Key(\"123\", stringResource(R.string.num)), viewModel)\r\n                KeyboardKey(Key(\"emoji\", \"emoji\"), viewModel)\r\n                KeyboardKey(Key(\"space\", keyboardLocale.space()), viewModel)\r\n                KeyboardKey(\r\n                    Key(\"action\", keyboardLocale.action(\"return\")),\r\n                    viewModel\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/turkish/TurkishKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/turkish/TurkishKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/turkish/TurkishKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/turkish/TurkishKeyboardView.kt	(date 1707381446706)
@@ -28,7 +28,7 @@
     keyHeight: Dp,
     rowHeight: Dp,
 ) {
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
     val constraintSets = StandardConstraintSets(keyHeight, rowHeight)
     val nRowKeys = StandardRowKeys()
Index: app/src/main/java/com/optiflowx/optikeysx/views/keyboards/french/FrenchKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.keyboards.french\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyboardKey\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun FrenchKeyboardView(\r\n    viewModel: KeyboardViewModel,\r\n    viewWidth: Dp,\r\n    keyHeight: Dp = 42.dp,\r\n    rowHeight: Dp = 56.dp,\r\n) {\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n    val constraintSets = FrenchConstraintSets(keyHeight, rowHeight)\r\n    val nRowKeys = FrenchRowKeys()\r\n\r\n\r\n    ConstraintLayout(\r\n        constraintSet = constraintSets.constraints,\r\n        modifier = Modifier.width(viewWidth),\r\n        optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n        animateChanges = true,\r\n        \r\n    ) {\r\n        Box(modifier = Modifier.layoutId('1')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.firstRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row1Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('2')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.secondRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row2Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier =  Modifier.layoutId('3')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.thirdRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row3Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('4')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.fourthRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n            ) {\r\n                KeyboardKey(Key(\"123\", stringResource(R.string.num)), viewModel)\r\n                KeyboardKey(Key(\"emoji\", \"emoji\"), viewModel)\r\n                KeyboardKey(Key(\"space\", keyboardLocale.space()), viewModel)\r\n                KeyboardKey(\r\n                    Key(\"action\", keyboardLocale.action(\"return\")),\r\n                    viewModel\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/french/FrenchKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/french/FrenchKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/french/FrenchKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/french/FrenchKeyboardView.kt	(date 1707381446715)
@@ -26,7 +26,7 @@
     keyHeight: Dp = 42.dp,
     rowHeight: Dp = 56.dp,
 ) {
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
     val constraintSets = FrenchConstraintSets(keyHeight, rowHeight)
     val nRowKeys = FrenchRowKeys()
Index: app/src/main/java/com/optiflowx/optikeysx/views/keyboards/russian/RussianKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.keyboards.russian\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyboardKey\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun RussianKeyboardView(\r\n    viewModel: KeyboardViewModel,\r\n    viewWidth: Dp,\r\n    keyHeight: Dp = 42.dp,\r\n    rowHeight: Dp = 56.dp,\r\n) {\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n    val constraintSets = RussianConstraintSets(keyHeight, rowHeight)\r\n    val nRowKeys = RussianRowKeys()\r\n\r\n\r\n    ConstraintLayout(\r\n        constraintSet = constraintSets.constraints,\r\n        modifier = Modifier.width(viewWidth),\r\n        optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n        animateChanges = true,\r\n        \r\n    ) {\r\n        Box(modifier = Modifier.layoutId('1')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.firstRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row1Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('2')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.secondRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row2Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier =  Modifier.layoutId('3')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.thirdRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row3Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('4')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.fourthRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n            ) {\r\n                KeyboardKey(Key(\"123\", stringResource(R.string.num)), viewModel)\r\n                KeyboardKey(Key(\"emoji\", \"emoji\"), viewModel)\r\n                KeyboardKey(Key(\"space\", keyboardLocale.space()), viewModel)\r\n                KeyboardKey(\r\n                    Key(\"action\", keyboardLocale.action(\"return\")),\r\n                    viewModel\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/russian/RussianKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/russian/RussianKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/russian/RussianKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/russian/RussianKeyboardView.kt	(date 1707381446722)
@@ -26,7 +26,7 @@
     keyHeight: Dp = 42.dp,
     rowHeight: Dp = 56.dp,
 ) {
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
     val constraintSets = RussianConstraintSets(keyHeight, rowHeight)
     val nRowKeys = RussianRowKeys()
Index: app/src/main/java/com/optiflowx/optikeysx/views/keyboards/spanish/SpanishKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.keyboards.spanish\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyboardKey\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun SpanishKeyboardView(\r\n    viewModel: KeyboardViewModel,\r\n    viewWidth: Dp,\r\n    keyHeight: Dp = 42.dp,\r\n    rowHeight: Dp = 56.dp,\r\n) {\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n    val constraintSets = SpanishConstraintSets(keyHeight, rowHeight)\r\n    val nRowKeys = SpanishRowKeys()\r\n\r\n\r\n    ConstraintLayout(\r\n        constraintSet = constraintSets.constraints,\r\n        modifier = Modifier.width(viewWidth),\r\n        optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n        animateChanges = true,\r\n\r\n        ) {\r\n        Box(modifier = Modifier.layoutId('1')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.firstRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n            ) {\r\n                for (key in nRowKeys.row1Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('2')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.secondRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                ) {\r\n                for (key in nRowKeys.row2Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('3')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.thirdRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                ) {\r\n                for (key in nRowKeys.row3Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('4')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.fourthRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n            ) {\r\n                KeyboardKey(Key(\"123\", stringResource(R.string.num)), viewModel)\r\n                KeyboardKey(Key(\"emoji\", \"emoji\"), viewModel)\r\n                KeyboardKey(Key(\"space\", keyboardLocale.space()), viewModel)\r\n                KeyboardKey(\r\n                    Key(\"action\", keyboardLocale.action(\"return\")),\r\n                    viewModel\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/spanish/SpanishKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/spanish/SpanishKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/spanish/SpanishKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/spanish/SpanishKeyboardView.kt	(date 1707381446764)
@@ -26,7 +26,7 @@
     keyHeight: Dp = 42.dp,
     rowHeight: Dp = 56.dp,
 ) {
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
     val constraintSets = SpanishConstraintSets(keyHeight, rowHeight)
     val nRowKeys = SpanishRowKeys()
Index: app/src/main/java/com/optiflowx/optikeysx/core/model/DownloadProgress.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/model/DownloadProgress.kt b/app/src/main/java/com/optiflowx/optikeysx/core/model/DownloadProgress.kt
new file mode 100644
--- /dev/null	(date 1707253391193)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/model/DownloadProgress.kt	(date 1707253391193)
@@ -0,0 +1,18 @@
+package com.optiflowx.optikeysx.core.model
+
+import androidx.compose.runtime.Immutable
+import com.optiflowx.optikeysx.core.downloader.messages.ModelInfo
+import com.optiflowx.optikeysx.core.downloader.messages.State
+
+@Immutable
+data class DownloadProgress(
+    val info: ModelInfo, var state: State, var progress: Float
+) {
+    fun withProgress(newProgress: Float): DownloadProgress {
+        return DownloadProgress(info, state, newProgress)
+    }
+
+    fun withState(newState: State): DownloadProgress {
+        return DownloadProgress(info, newState, progress)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyButtonPopup.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.ui.keyboard\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.shadow\r\nimport androidx.compose.ui.text.PlatformTextStyle\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.window.Popup\r\nimport androidx.compose.ui.window.PopupProperties\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.ui.keyShapeValue\r\n\r\n@Preview\r\n@Composable\r\nfun KeyButtonPopup(width: Dp = 56.dp, text: String = \"M\") {\r\n    val height: Dp = 96.dp\r\n    val previewWidth: Dp = ((width.value * 0.6) + width.value).dp\r\n\r\n    Popup(\r\n        alignment = Alignment.BottomCenter,\r\n        properties = PopupProperties(\r\n            focusable = false,\r\n            clippingEnabled = false,\r\n        )\r\n    ) {\r\n        Column(\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            Surface(\r\n                color = MaterialTheme.colorScheme.secondary,\r\n                shape = RoundedCornerShape(\r\n                    topStart = 13.dp,\r\n                    topEnd = 13.dp,\r\n                    bottomStart = 15.dp,\r\n                    bottomEnd = 15.dp,\r\n                ),\r\n                modifier = Modifier\r\n                    .size(previewWidth, height * 0.54f)\r\n                    .shadow(7.5.dp)\r\n            ) {\r\n                Box(\r\n                    Modifier.fillMaxSize(), Alignment.Center\r\n                ) {\r\n                    Text(\r\n                        text = text,\r\n                        textAlign = TextAlign.Center,\r\n                        style = TextStyle(\r\n                            fontWeight = FontWeight.Light,\r\n                            fontFamily = appFontType(\"Regular\"),\r\n                            platformStyle = PlatformTextStyle(includeFontPadding = false),\r\n                            fontSize = TextUnit(24f, TextUnitType.Sp).nonScaledSp,\r\n                        ),\r\n                        color = MaterialTheme.colorScheme.primary,\r\n                    )\r\n                }\r\n            }\r\n            Surface(\r\n                color = MaterialTheme.colorScheme.secondary,\r\n                shape = RoundedCornerShape(\r\n                    topStart = 0.dp,\r\n                    topEnd = 0.dp,\r\n                    bottomStart = keyShapeValue,\r\n                    bottomEnd = keyShapeValue,\r\n                ),\r\n                modifier = Modifier.size(width, height * 0.46f)\r\n            ) {}\r\n        }\r\n    }\r\n}\r\n//\r\n//@Preview(showBackground = true)\r\n//@Composable\r\n//fun AppleKeyPreview() {\r\n//    Canvas(\r\n//        modifier = Modifier\r\n//            .height(120.dp).width(65.dp)\r\n////            .border(width = 2.dp, color = Color.Magenta, shape = RectangleShape)\r\n//    ) {\r\n//        val w = size.width\r\n//        val h = size.height\r\n//\r\n//        val previewKey = Path().apply {\r\n//            moveTo(w * 0f, 0f)\r\n//            lineTo(x = 0f, y = h * 0.45f)\r\n//            quadraticBezierTo(\r\n//                x1 = 0f, y1 = h * 0.5f,\r\n//                x2 = w * 0.115f, y2 = h * 0.54f\r\n//            )\r\n//            quadraticBezierTo(\r\n//                x1 = w * 0.15f, y1 = h * 0.56f,\r\n//                x2 = w * 0.165f, y2 = h * 0.6f\r\n//            )\r\n//            lineTo(x = w * 0.16f, y = h)\r\n//            quadraticBezierTo(\r\n//                x1 = w * 0.16f, y1 = h,\r\n//                x2 = w * 0.20f, y2 = h,\r\n//            )\r\n//            lineTo(x = w * 0.84f, y = h)\r\n//            lineTo(x = w * 0.84f, y = h * 0.6f)\r\n//            quadraticBezierTo(\r\n//                x1 = w - (w * 0.15f), y1 = h * 0.56f,\r\n//                x2 = w - (w * 0.125f), y2 = h * 0.54f\r\n//            )\r\n//            quadraticBezierTo(\r\n//                x1 = w, y1 = h * 0.5f,\r\n//                x2 = w, y2 = h * 0.45f\r\n//            )\r\n//            lineTo(x = w, y = 0.45f)\r\n//            close()\r\n//        }\r\n//\r\n//        drawPath(\r\n//            path = previewKey,\r\n//            color = Color.Red,\r\n//            style = androidx.compose.ui.graphics.drawscope.Stroke(\r\n//                width = 2.dp.toPx()\r\n//            )\r\n//        )\r\n//        clipPath()\r\n//    }\r\n//}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyButtonPopup.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyButtonPopup.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyButtonPopup.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyButtonPopup.kt	(date 1707381578874)
@@ -23,6 +23,7 @@
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.window.Popup
 import androidx.compose.ui.window.PopupProperties
+import com.optiflowx.optikeysx.core.enums.KeyboardFontType
 import com.optiflowx.optikeysx.core.utils.appFontType
 import com.optiflowx.optikeysx.core.utils.nonScaledSp
 import com.optiflowx.optikeysx.ui.keyShapeValue
@@ -63,7 +64,7 @@
                         textAlign = TextAlign.Center,
                         style = TextStyle(
                             fontWeight = FontWeight.Light,
-                            fontFamily = appFontType("Regular"),
+                            fontFamily = appFontType(KeyboardFontType.Regular),
                             platformStyle = PlatformTextStyle(includeFontPadding = false),
                             fontSize = TextUnit(24f, TextUnitType.Sp).nonScaledSp,
                         ),
@@ -71,6 +72,7 @@
                     )
                 }
             }
+
             Surface(
                 color = MaterialTheme.colorScheme.secondary,
                 shape = RoundedCornerShape(
Index: app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/Suggestion.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.ui.keyboard\r\n\r\nimport androidx.compose.animation.AnimatedContent\r\nimport androidx.compose.animation.AnimatedContentTransitionScope\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.animation.fadeIn\r\nimport androidx.compose.animation.fadeOut\r\nimport androidx.compose.animation.togetherWith\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.text.PlatformTextStyle\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.text.style.TextOverflow\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\n\r\n@Composable\r\nfun Suggestion(id: String, suggestion: String, fontType: String?,textSize: Float, onClick: () -> Unit) {\r\n    val keyboardWidth = LocalConfiguration.current.screenWidthDp\r\n    val width: Dp = (keyboardWidth * 0.31).dp\r\n\r\n    Surface(\r\n        onClick = onClick,\r\n        shape = RoundedCornerShape(5.dp),\r\n        color = Color.Transparent,\r\n        modifier = Modifier\r\n            .layoutId(id)\r\n            .width(width)\r\n            .fillMaxHeight()\r\n            .padding(vertical = 3.dp),\r\n    ) {\r\n        Box(Modifier.fillMaxSize(), Alignment.Center) {\r\n            AnimatedContent(\r\n                targetState = suggestion,\r\n                label = \"suggestion\",\r\n                transitionSpec = {\r\n                    fadeIn(animationSpec = tween(325)) + slideIntoContainer(\r\n                        towards = AnimatedContentTransitionScope.SlideDirection.Right,\r\n                        animationSpec = tween(250),\r\n                        initialOffset = { it + 2 }\r\n                    ) togetherWith (fadeOut(animationSpec = tween(150)))\r\n                }\r\n            ) {\r\n                Text(\r\n                    text = it,\r\n                    textAlign = TextAlign.Center,\r\n                    maxLines = 1,\r\n                    softWrap = true,\r\n                    overflow = TextOverflow.Ellipsis,\r\n                    style = TextStyle(\r\n                        platformStyle = PlatformTextStyle(includeFontPadding = false),\r\n                        color = MaterialTheme.colorScheme.primary.copy(alpha = 0.85f),\r\n                        fontSize = TextUnit(textSize, TextUnitType.Sp).nonScaledSp,\r\n                        fontFamily = appFontType(fontType),\r\n                    ),\r\n                )\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/Suggestion.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/Suggestion.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/Suggestion.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/Suggestion.kt	(date 1707381185663)
@@ -29,11 +29,12 @@
 import androidx.compose.ui.unit.TextUnit
 import androidx.compose.ui.unit.TextUnitType
 import androidx.compose.ui.unit.dp
+import com.optiflowx.optikeysx.core.enums.KeyboardFontType
 import com.optiflowx.optikeysx.core.utils.appFontType
 import com.optiflowx.optikeysx.core.utils.nonScaledSp
 
 @Composable
-fun Suggestion(id: String, suggestion: String, fontType: String?,textSize: Float, onClick: () -> Unit) {
+fun Suggestion(id: String, suggestion: String, fontType: KeyboardFontType?,textSize: Float, onClick: () -> Unit) {
     val keyboardWidth = LocalConfiguration.current.screenWidthDp
     val width: Dp = (keyboardWidth * 0.31).dp
 
Index: app/src/main/java/com/optiflowx/optikeysx/waveform/model/WaveformAlignment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/waveform/model/WaveformAlignment.kt b/app/src/main/java/com/optiflowx/optikeysx/waveform/model/WaveformAlignment.kt
new file mode 100644
--- /dev/null	(date 1707224262551)
+++ b/app/src/main/java/com/optiflowx/optikeysx/waveform/model/WaveformAlignment.kt	(date 1707224262551)
@@ -0,0 +1,5 @@
+package com.optiflowx.optikeysx.waveform.model
+
+enum class WaveformAlignment {
+    Top, Center, Bottom
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/waveform/model/AmplitudeType.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/waveform/model/AmplitudeType.kt b/app/src/main/java/com/optiflowx/optikeysx/waveform/model/AmplitudeType.kt
new file mode 100644
--- /dev/null	(date 1707224262542)
+++ b/app/src/main/java/com/optiflowx/optikeysx/waveform/model/AmplitudeType.kt	(date 1707224262542)
@@ -0,0 +1,5 @@
+package com.optiflowx.optikeysx.waveform.model
+
+enum class AmplitudeType {
+    Avg, Min, Max
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/waveform/BrushExt.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/waveform/BrushExt.kt b/app/src/main/java/com/optiflowx/optikeysx/waveform/BrushExt.kt
new file mode 100644
--- /dev/null	(date 1707223958693)
+++ b/app/src/main/java/com/optiflowx/optikeysx/waveform/BrushExt.kt	(date 1707223958693)
@@ -0,0 +1,59 @@
+package com.linc.audiowaveform
+
+import androidx.compose.animation.core.*
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.State
+import androidx.compose.runtime.getValue
+import androidx.compose.ui.geometry.Offset
+import androidx.compose.ui.graphics.Brush
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.TileMode
+
+@Composable
+fun Brush.Companion.infiniteHorizontalGradient(
+    infiniteTransition: InfiniteTransition = rememberInfiniteTransition(),
+    animation: DurationBasedAnimationSpec<Float> = tween(2000, easing = LinearEasing),
+    colors: List<Color>,
+    width: Float
+): Brush {
+    val offset by getInfiniteOffset(infiniteTransition, animation, width)
+    return horizontalGradient(colors, offset, offset + width, TileMode.Mirror)
+}
+
+@Composable
+fun Brush.Companion.infiniteVerticalGradient(
+    infiniteTransition: InfiniteTransition = rememberInfiniteTransition(),
+    animation: DurationBasedAnimationSpec<Float> = tween(2000, easing = LinearEasing),
+    colors: List<Color>,
+    width: Float
+): Brush {
+    val offset by getInfiniteOffset(infiniteTransition, animation, width)
+    return verticalGradient(colors, offset, offset + width, TileMode.Mirror)
+}
+
+@Composable
+fun Brush.Companion.infiniteLinearGradient(
+    infiniteTransition: InfiniteTransition = rememberInfiniteTransition(),
+    animation: DurationBasedAnimationSpec<Float> = tween(2000, easing = LinearEasing),
+    colors: List<Color>,
+    width: Float
+): Brush {
+    val offset by getInfiniteOffset(infiniteTransition, animation, width)
+    return linearGradient(colors, Offset(offset, offset), Offset(offset + width, offset + width), TileMode.Mirror)
+}
+
+@Composable
+private fun getInfiniteOffset(
+    infiniteTransition: InfiniteTransition,
+    animation: DurationBasedAnimationSpec<Float>,
+    width: Float
+) : State<Float> {
+    return infiniteTransition.animateFloat(
+        initialValue = 0f,
+        targetValue = width * 2,
+        animationSpec = infiniteRepeatable(
+            animation = animation,
+            repeatMode = RepeatMode.Restart
+        )
+    )
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/waveform/Utils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/waveform/Utils.kt b/app/src/main/java/com/optiflowx/optikeysx/waveform/Utils.kt
new file mode 100644
--- /dev/null	(date 1707223958694)
+++ b/app/src/main/java/com/optiflowx/optikeysx/waveform/Utils.kt	(date 1707223958694)
@@ -0,0 +1,34 @@
+package com.linc.audiowaveform
+
+import kotlin.math.ceil
+import kotlin.math.roundToInt
+
+internal fun <T> Iterable<T>.fillToSize(size: Int, transform: (List<T>) -> T): List<T> {
+    val capacity = ceil(size.safeDiv(count())).roundToInt()
+    return map { data -> List(capacity) { data } }.flatten().chunkToSize(size, transform)
+}
+
+internal fun <T> Iterable<T>.chunkToSize(size: Int, transform: (List<T>) -> T): List<T> {
+    val chunkSize = count() / size
+    val remainder = count() % size
+    val remainderIndex = ceil(count().safeDiv(remainder)).roundToInt()
+    val chunkIteration = filterIndexed { index, _ ->
+        remainderIndex == 0 || index % remainderIndex != 0
+    }.chunked(chunkSize, transform)
+    return when (size) {
+        chunkIteration.count() -> chunkIteration
+        else -> chunkIteration.chunkToSize(size, transform)
+    }
+}
+
+internal fun Iterable<Float>.normalize(min: Float, max: Float): List<Float> {
+    return map { (max-min) * ((it - min()) safeDiv (max() - min())) + min }
+}
+
+private fun Int.safeDiv(value: Int): Float {
+    return if(value == 0) return 0F else this / value.toFloat()
+}
+
+private infix fun Float.safeDiv(value: Float): Float {
+    return if (value == 0f) return 0F else this / value
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/waveform/AudioWaveform.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/waveform/AudioWaveform.kt b/app/src/main/java/com/optiflowx/optikeysx/waveform/AudioWaveform.kt
new file mode 100644
--- /dev/null	(date 1707224268036)
+++ b/app/src/main/java/com/optiflowx/optikeysx/waveform/AudioWaveform.kt	(date 1707224268036)
@@ -0,0 +1,156 @@
+package com.linc.audiowaveform
+
+import android.view.MotionEvent
+import androidx.compose.animation.core.AnimationSpec
+import androidx.compose.animation.core.animateFloatAsState
+import androidx.compose.animation.core.tween
+import androidx.compose.foundation.Canvas
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.requiredHeight
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.ExperimentalComposeUiApi
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.geometry.CornerRadius
+import androidx.compose.ui.geometry.Offset
+import androidx.compose.ui.geometry.Size
+import androidx.compose.ui.graphics.BlendMode
+import androidx.compose.ui.graphics.Brush
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.SolidColor
+import androidx.compose.ui.graphics.drawscope.DrawStyle
+import androidx.compose.ui.graphics.drawscope.Fill
+import androidx.compose.ui.graphics.graphicsLayer
+import androidx.compose.ui.input.pointer.pointerInteropFilter
+import androidx.compose.ui.unit.Dp
+import androidx.compose.ui.unit.coerceIn
+import androidx.compose.ui.unit.dp
+import com.optiflowx.optikeysx.waveform.model.AmplitudeType
+import com.optiflowx.optikeysx.waveform.model.WaveformAlignment
+
+private val MinSpikeWidthDp: Dp = 1.dp
+private val MaxSpikeWidthDp: Dp = 24.dp
+private val MinSpikePaddingDp: Dp = 0.dp
+private val MaxSpikePaddingDp: Dp = 12.dp
+private val MinSpikeRadiusDp: Dp = 0.dp
+private val MaxSpikeRadiusDp: Dp = 12.dp
+
+private const val MinProgress: Float = 0F
+private const val MaxProgress: Float = 1F
+
+private const val MinSpikeHeight: Float = 1F
+private const val DefaultGraphicsLayerAlpha: Float = 0.99F
+
+@OptIn(ExperimentalComposeUiApi::class)
+@Composable
+fun AudioWaveform(
+    modifier: Modifier = Modifier,
+    style: DrawStyle = Fill,
+    waveformBrush: Brush = SolidColor(Color.White),
+    progressBrush: Brush = SolidColor(Color.Blue),
+    waveformAlignment: WaveformAlignment = WaveformAlignment.Center,
+    amplitudeType: AmplitudeType = AmplitudeType.Avg,
+    onProgressChangeFinished: (() -> Unit)? = null,
+    spikeAnimationSpec: AnimationSpec<Float> = tween(500),
+    spikeWidth: Dp = 4.dp,
+    spikeRadius: Dp = 2.dp,
+    spikePadding: Dp = 1.dp,
+    progress: Float = 0F,
+    amplitudes: List<Int>,
+    onProgressChange: (Float) -> Unit
+) {
+    val _progress = remember(progress) { progress.coerceIn(MinProgress, MaxProgress) }
+    val _spikeWidth = remember(spikeWidth) { spikeWidth.coerceIn(MinSpikeWidthDp, MaxSpikeWidthDp) }
+    val _spikePadding = remember(spikePadding) { spikePadding.coerceIn(MinSpikePaddingDp, MaxSpikePaddingDp) }
+    val _spikeRadius = remember(spikeRadius) { spikeRadius.coerceIn(MinSpikeRadiusDp, MaxSpikeRadiusDp) }
+    val _spikeTotalWidth = remember(spikeWidth, spikePadding) { _spikeWidth + _spikePadding }
+    var canvasSize by remember { mutableStateOf(Size(0f, 0f)) }
+    var spikes by remember { mutableStateOf(0F) }
+    val spikesAmplitudes = remember(amplitudes, spikes, amplitudeType) {
+        amplitudes.toDrawableAmplitudes(
+            amplitudeType = amplitudeType,
+            spikes = spikes.toInt(),
+            minHeight = MinSpikeHeight,
+            maxHeight = canvasSize.height.coerceAtLeast(MinSpikeHeight)
+        )
+    }.map { animateFloatAsState(it, spikeAnimationSpec).value }
+    Canvas(
+        modifier = Modifier
+            .fillMaxWidth()
+            .requiredHeight(48.dp)
+            .graphicsLayer(alpha = DefaultGraphicsLayerAlpha)
+            .pointerInteropFilter {
+                return@pointerInteropFilter when (it.action) {
+                    MotionEvent.ACTION_DOWN,
+                    MotionEvent.ACTION_MOVE -> {
+                        if (it.x in 0F..canvasSize.width) {
+                            onProgressChange(it.x / canvasSize.width)
+                            true
+                        } else false
+                    }
+                    MotionEvent.ACTION_UP -> {
+                        onProgressChangeFinished?.invoke()
+                        true
+                    }
+                    else -> false
+                }
+            }
+            .then(modifier)
+    ) {
+        canvasSize = size
+        spikes = size.width / _spikeTotalWidth.toPx()
+        spikesAmplitudes.forEachIndexed { index, amplitude ->
+            drawRoundRect(
+                brush = waveformBrush,
+                topLeft = Offset(
+                    x = index * _spikeTotalWidth.toPx(),
+                    y = when(waveformAlignment) {
+                        WaveformAlignment.Top -> 0F
+                        WaveformAlignment.Bottom -> size.height - amplitude
+                        WaveformAlignment.Center -> size.height / 2F - amplitude / 2F
+                    }
+                ),
+                size = Size(
+                    width = _spikeWidth.toPx(),
+                    height = amplitude
+                ),
+                cornerRadius = CornerRadius(_spikeRadius.toPx(), _spikeRadius.toPx()),
+                style = style
+            )
+            drawRect(
+                brush = progressBrush,
+                size = Size(
+                    width = _progress * size.width,
+                    height = size.height
+                ),
+                blendMode = BlendMode.SrcAtop
+            )
+        }
+    }
+}
+
+private fun List<Int>.toDrawableAmplitudes(
+    amplitudeType: AmplitudeType,
+    spikes: Int,
+    minHeight: Float,
+    maxHeight: Float
+): List<Float> {
+    val amplitudes = map(Int::toFloat)
+    if(amplitudes.isEmpty() || spikes == 0) {
+        return List(spikes) { minHeight }
+    }
+    val transform = { data: List<Float> ->
+        when(amplitudeType) {
+            AmplitudeType.Avg -> data.average()
+            AmplitudeType.Max -> data.max()
+            AmplitudeType.Min -> data.min()
+        }.toFloat().coerceIn(minHeight, maxHeight)
+    }
+    return when {
+        spikes > amplitudes.count() -> amplitudes.fillToSize(spikes, transform)
+        else -> amplitudes.chunkToSize(spikes, transform)
+    }.normalize(minHeight, maxHeight)
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/utils/KeyboardUtils.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.core.utils\r\n\r\nimport android.content.Context\r\nimport android.graphics.Rect\r\nimport androidx.annotation.DrawableRes\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.Stable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.draw.drawBehind\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.graphics.Paint\r\nimport androidx.compose.ui.graphics.drawscope.drawIntoCanvas\r\nimport androidx.compose.ui.graphics.nativeCanvas\r\nimport androidx.compose.ui.graphics.scale\r\nimport androidx.compose.ui.graphics.toArgb\r\nimport androidx.compose.ui.platform.LocalDensity\r\nimport androidx.compose.ui.text.font.FontFamily\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport androidx.constraintlayout.core.widgets.Optimizer\r\nimport androidx.core.content.ContextCompat\r\nimport com.optiflowx.optikeysx.core.enums.KeyboardFontType\r\nimport com.optiflowx.optikeysx.ui.bold\r\nimport com.optiflowx.optikeysx.ui.medium\r\nimport com.optiflowx.optikeysx.ui.regular\r\n\r\nconst val OPTIMIZATION_STANDARDIZED =\r\n    (Optimizer.OPTIMIZATION_DIRECT\r\n            or Optimizer.OPTIMIZATION_CACHE_MEASURES or Optimizer.OPTIMIZATION_CHAIN)\r\n\r\n@Stable\r\nval TextUnit.nonScaledSp\r\n    @Composable\r\n    get() = (this.value / LocalDensity.current.fontScale).sp\r\n\r\n\r\n@Stable\r\nfun Modifier.draw9Patch(\r\n    context: Context,\r\n    @DrawableRes res: Int,\r\n) = this.drawBehind {\r\n    drawIntoCanvas {\r\n        ContextCompat.getDrawable(context, res)?.let { ninePatch ->\r\n            ninePatch.run {\r\n                bounds = Rect(0, 0, size.width.toInt(), size.height.toInt())\r\n                draw(it.nativeCanvas)\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Stable\r\nfun appFontType(fontType: String?): FontFamily {\r\n    return when(fontType) {\r\n        KeyboardFontType.Bold.name -> bold\r\n        KeyboardFontType.Medium.name -> medium\r\n        KeyboardFontType.Regular.name -> regular\r\n        else -> regular\r\n    }\r\n}\r\n\r\n@Stable\r\nfun Modifier.boxShadow(\r\n    color: Color = Color.Black,\r\n    alpha: Float = 0.07f,\r\n    borderRadius: Dp = 0.dp,\r\n    offsetX: Dp = 0.dp,\r\n    offsetY: Dp = 0.dp,\r\n    blurRadius: Dp = 7.dp,\r\n    spread: Dp = 0.dp,\r\n    enabled: Boolean = true,\r\n) = if(enabled) {\r\n    this.drawBehind {\r\n        val transparentColor = color.copy(0.0f).toArgb()\r\n        val shadowColor = color.copy(alpha).toArgb()\r\n        this.drawIntoCanvas {\r\n            val paint = Paint()\r\n            val frameworkPaint = paint.asFrameworkPaint()\r\n            frameworkPaint.color = transparentColor\r\n            frameworkPaint.setShadowLayer(\r\n                blurRadius.toPx(),\r\n                offsetX.toPx(),\r\n                offsetY.toPx(),\r\n                shadowColor\r\n            )\r\n            it.save()\r\n\r\n            if(spread.value > 0) {\r\n                fun calcSpreadScale(spread: Float, childSize: Float): Float {\r\n                    return 1f + ((spread / childSize) * 2f)\r\n                }\r\n\r\n                it.scale(\r\n                    calcSpreadScale(spread.toPx(), this.size.width),\r\n                    calcSpreadScale(spread.toPx(), this.size.height),\r\n                    this.center.x,\r\n                    this.center.y\r\n                )\r\n            }\r\n\r\n            it.drawRoundRect(\r\n                0f,\r\n                0f,\r\n                this.size.width,\r\n                this.size.height,\r\n                borderRadius.toPx(),\r\n                borderRadius.toPx(),\r\n                paint\r\n            )\r\n            it.restore()\r\n        }\r\n    }\r\n} else this
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/utils/KeyboardUtils.kt b/app/src/main/java/com/optiflowx/optikeysx/core/utils/KeyboardUtils.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/core/utils/KeyboardUtils.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/utils/KeyboardUtils.kt	(date 1707381185737)
@@ -52,11 +52,11 @@
 }
 
 @Stable
-fun appFontType(fontType: String?): FontFamily {
+fun appFontType(fontType: KeyboardFontType?): FontFamily {
     return when(fontType) {
-        KeyboardFontType.Bold.name -> bold
-        KeyboardFontType.Medium.name -> medium
-        KeyboardFontType.Regular.name -> regular
+        KeyboardFontType.Bold -> bold
+        KeyboardFontType.Medium -> medium
+        KeyboardFontType.Regular -> regular
         else -> regular
     }
 }
Index: app/src/main/java/com/optiflowx/optikeysx/OptiKeysXApplication.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/OptiKeysXApplication.kt b/app/src/main/java/com/optiflowx/optikeysx/OptiKeysXApplication.kt
new file mode 100644
--- /dev/null	(date 1707323988042)
+++ b/app/src/main/java/com/optiflowx/optikeysx/OptiKeysXApplication.kt	(date 1707323988042)
@@ -0,0 +1,28 @@
+package com.optiflowx.optikeysx
+
+import android.app.Application
+//import com.optiflowx.optikeysx.AppCtx.setAppCtx
+import dev.patrickgold.jetpref.datastore.JetPref
+import org.greenrobot.eventbus.EventBus
+
+class OptiKeysXApplication : Application() {
+    private val prefs by optikeysxPreferences()
+    override fun onCreate() {
+        super.onCreate()
+
+        // Optionally initialize global JetPref configs. This must be done before
+        // any preference datastore is initialized!
+        JetPref.configure(
+            saveIntervalMs = 500,
+            encodeDefaultValues = true,
+        )
+
+        // Initialize your datastore here (required)
+        prefs.initializeBlocking(this)
+
+        EventBus.builder().logNoSubscriberMessages(false).sendNoSubscriberEvent(false)
+            .installDefaultEventBus()
+
+//        setAppCtx(this)
+    }
+}
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"#GRADLE_LOCAL_JAVA_HOME\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n            <option value=\"$PROJECT_DIR$/baselineprofiles\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveExternalAnnotations\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
--- a/.idea/gradle.xml	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/.idea/gradle.xml	(date 1707311398039)
@@ -1,5 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
   <component name="GradleSettings">
     <option name="linkedExternalProjectsSettings">
       <GradleProjectSettings>
Index: app/src/main/java/com/optiflowx/optikeysx/ime/IMEService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/IMEService.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/IMEService.kt
new file mode 100644
--- /dev/null	(date 1707376551738)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/IMEService.kt	(date 1707376551738)
@@ -0,0 +1,342 @@
+// Copyright 2019 Alpha Cephei Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//       http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+package com.optiflowx.optikeysx.ime
+
+import android.inputmethodservice.InputMethodService
+import android.os.Build
+import android.os.IBinder
+import android.text.InputType
+import android.util.Log
+import android.view.View
+import android.view.Window
+import android.view.WindowManager
+import android.view.inputmethod.EditorInfo
+import android.view.inputmethod.InputMethodManager
+import androidx.compose.ui.geometry.Offset
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.toArgb
+import androidx.compose.ui.input.pointer.PointerInputChange
+import androidx.core.view.ViewCompat
+import androidx.core.view.WindowCompat
+import androidx.core.view.WindowInsetsCompat
+import com.optiflowx.optikeysx.core.data.KeyboardData
+import com.optiflowx.optikeysx.core.enums.KeepScreenAwakeMode
+import com.optiflowx.optikeysx.optikeysxPreferences
+import com.optiflowx.optikeysx.views.defaults.KeyboardViewManager
+import org.vosk.BuildConfig
+import org.vosk.LibVosk
+import org.vosk.LogLevel
+import org.vosk.android.RecognitionListener
+import kotlin.math.roundToInt
+
+class IMEService : InputMethodService(), RecognitionListener {
+    private val prefs by optikeysxPreferences()
+
+    val lifecycleOwner = IMELifecycleOwner()
+
+    private lateinit var editorInfo: EditorInfo
+    private lateinit var keyboardViewManager: KeyboardViewManager
+    private lateinit var modelManager: ModelManager
+    private lateinit var actionManager: ActionManager
+    private lateinit var textManager: TextManager
+
+    var keyboardData = KeyboardData()
+
+    var isRichTextEditor = true
+        private set
+
+    val token: IBinder?
+        get() {
+            val window = myWindow ?: return null
+            return window.attributes.token
+        }
+
+    private val myWindow: Window?
+        get() {
+            return window.window
+        }
+
+//    @OptIn(ExperimentalSplittiesApi::class)
+//    private fun setKeyboardView(): View {
+//        val inputType = editorInfo.inputType.and(EditorInfo.IME_MASK_ACTION)
+//
+//        val mIMM = this.getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+//
+//        val locale = mIMM.currentInputMethodSubtype?.languageTag!!
+//
+//        return when (inputType) {
+////            IT.number.value -> DefaultNumberKeyboardView(this, locale)
+////
+////            IT.phone.value -> DefaultPhoneKeyboardView(this, locale)
+//
+//            else -> {
+//                KeyboardViewManager(this, locale)
+//            }
+//        }
+//    }
+
+    override fun onCreate() {
+        super.onCreate()
+        lifecycleOwner.onCreate()
+        LibVosk.setLogLevel(if (BuildConfig.DEBUG) LogLevel.INFO else LogLevel.WARNINGS)
+
+        keyboardViewManager = KeyboardViewManager(this, keyboardData)
+        actionManager = ActionManager(this)
+        modelManager = ModelManager(this, keyboardViewManager)
+        textManager = TextManager(this, modelManager)
+    }
+
+    private fun setKeepScreenOn(keepScreenOn: Boolean) {
+        val window = myWindow ?: return
+        if (keepScreenOn) window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON) else window.clearFlags(
+            WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON
+        )
+    }
+
+    override fun onStartInputView(info: EditorInfo, restarting: Boolean) {
+        lifecycleOwner.onResume()
+        editorInfo = info
+        isRichTextEditor =
+            editorInfo.inputType and InputType.TYPE_MASK_CLASS != EditorInfo.TYPE_NULL ||
+                    editorInfo.initialSelStart >= 0 && editorInfo.initialSelEnd >= 0 // based on florisboard code
+        modelManager.onResume()
+        textManager.onResume()
+
+        val mIMM = this.getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+
+        keyboardData = keyboardData.copy(
+            locale = mIMM.currentInputMethodSubtype?.languageTag!!,
+            enterAction = findEnterAction(),
+            inputType = info.inputType.and(EditorInfo.IME_MASK_ACTION),
+            token = token
+        )
+
+        setInputView(KeyboardViewManager(this, keyboardData))
+        setKeepScreenOn(true)
+    }
+
+    private fun findEnterAction(): Int {
+        val action = editorInfo.imeOptions and EditorInfo.IME_MASK_ACTION
+        if (editorInfo.imeOptions and EditorInfo.IME_FLAG_NO_ENTER_ACTION == 0 && action in editorActions) {
+            return action
+        }
+
+        return EditorInfo.IME_ACTION_UNSPECIFIED
+    }
+
+    override fun onFinishInputView(finishingInput: Boolean) {
+        lifecycleOwner.onPause()
+        modelManager.stop()
+
+        setKeepScreenOn(false)
+        modelManager.stop()
+        if (prefs.autoSwitchIBackIME.get()) {
+            // switch back
+            actionManager.switchToLastIme(false)
+        }
+    }
+
+    override fun onCreateInputView(): View {
+        val windowCompat = window?.window
+
+        if (windowCompat != null) {
+            lifecycleOwner.attachToDecorView(windowCompat.decorView)
+
+            windowCompat.navigationBarColor = Color.Transparent.toArgb()
+
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
+                windowCompat.setDecorFitsSystemWindows(false)
+            } else {
+                ViewCompat.setOnApplyWindowInsetsListener(keyboardViewManager) { _, insets ->
+                    @Suppress("DEPRECATION")
+                    insets.replaceSystemWindowInsets(
+                        0,
+                        0,
+                        0,
+                        5
+                    )
+                }
+            }
+
+            WindowCompat.getInsetsController(windowCompat, keyboardViewManager).apply {
+                hide(WindowInsetsCompat.Type.navigationBars())
+            }
+        }
+
+        keyboardViewManager.setListener(object : KeyboardViewManager.Listener {
+            override fun micClick() {
+                if (modelManager.openSettingsOnMic) {
+                    actionManager.openSettings()
+                } else if (modelManager.isRunning) {
+                    if (modelManager.isPaused) {
+                        modelManager.pause(false)
+                        if (prefs.keepScreenAwake.get() == KeepScreenAwakeMode.WHEN_LISTENING) setKeepScreenOn(
+                            true
+                        )
+                    } else {
+                        modelManager.pause(true)
+                        if (prefs.keepScreenAwake.get() == KeepScreenAwakeMode.WHEN_LISTENING) setKeepScreenOn(
+                            false
+                        )
+                    }
+                } else {
+                    modelManager.start()
+                    if (prefs.keepScreenAwake.get() == KeepScreenAwakeMode.WHEN_LISTENING) setKeepScreenOn(
+                        true
+                    )
+                }
+            }
+
+            override fun micLongClick(): Boolean {
+                val imeManager =
+                    applicationContext.getSystemService(INPUT_METHOD_SERVICE) as InputMethodManager
+                imeManager.showInputMethodPicker()
+                return true
+            }
+
+            override fun backClicked() {
+                actionManager.switchToLastIme(true)
+            }
+
+            override fun backspaceClicked() {
+                actionManager.deleteLastChar()
+            }
+
+            private var initX = 0f
+            private var initY = 0f
+            private val threshold = resources.displayMetrics.densityDpi / 6f
+            private val charLen = resources.displayMetrics.densityDpi / 32f
+            private var swiping = false
+            private var restart = false
+
+            override fun backspaceTouchStart(offset: Offset) {
+                restart = true
+                swiping = false
+            }
+
+            override fun backspaceTouched(change: PointerInputChange, dragAmount: Float) {
+                if (restart) {
+                    restart = false
+                    initX = change.position.x
+                    initY = change.position.y
+                }
+
+                var x = change.position.x - initX
+                val y = change.position.y - initY
+
+                Log.d("IME", "$x,$y")
+
+                if (x < -threshold) {
+                    swiping = true
+                }
+
+                if (swiping) {
+                    x = -x // x is negative
+                    val amount = ((x - threshold) / charLen).roundToInt()
+                    actionManager.selectCharsBack(amount)
+                }
+            }
+
+            override fun backspaceTouchEnd() {
+                if (swiping) actionManager.deleteSelection()
+            }
+
+            override fun returnClicked() {
+                actionManager.sendEnter()
+            }
+
+            override fun modelClicked() {
+                modelManager.switchToNextRecognizer()
+            }
+
+            override fun settingsClicked() {
+                actionManager.openSettings()
+            }
+
+            override fun buttonClicked(text: String) {
+                textManager.onText(text, TextManager.Mode.INSERT)
+            }
+        })
+
+        actionManager.onCreateInputView()
+
+        return keyboardViewManager
+    }
+
+    override fun onUpdateSelection(
+        oldSelStart: Int,
+        oldSelEnd: Int,
+        newSelStart: Int,
+        newSelEnd: Int,
+        candidatesStart: Int,
+        candidatesEnd: Int
+    ) {
+        super.onUpdateSelection(
+            oldSelStart, oldSelEnd, newSelStart, newSelEnd, candidatesStart, candidatesEnd
+        )
+
+        actionManager.updateSelection(
+            newSelStart, newSelEnd
+        )
+
+        textManager.onUpdateSelection(newSelStart, newSelEnd)
+    }
+
+    override fun onDestroy() {
+        super.onDestroy()
+        lifecycleOwner.onDestroy()
+        modelManager.onDestroy()
+    }
+
+    override fun onResult(text: String) {
+        Log.d("VoskIME", "Result: $text")
+        if (text.isEmpty()) return
+        textManager.onText(text, TextManager.Mode.STANDARD)
+    }
+
+    override fun onFinalResult(text: String) {
+        Log.d("VoskIME", "Final result: $text")
+        if (text.isEmpty()) return
+        textManager.onText(text, TextManager.Mode.FINAL)
+    }
+
+    override fun onPartialResult(partialText: String) {
+        Log.d("VoskIME", "Partial result: $partialText")
+        if (partialText == "") return
+
+        textManager.onText(partialText, TextManager.Mode.PARTIAL)
+    }
+
+    override fun onError(e: Exception) {
+        keyboardViewManager.errorMessageLD.postValue("Recognition error: ${e.message}")
+        keyboardViewManager.stateLD.postValue(KeyboardViewManager.STATE_ERROR)
+    }
+
+    override fun onTimeout() {
+        keyboardViewManager.stateLD.postValue(KeyboardViewManager.STATE_PAUSED)
+    }
+
+    companion object {
+        private val editorActions = intArrayOf(
+            EditorInfo.IME_ACTION_UNSPECIFIED,
+            EditorInfo.IME_ACTION_NONE,
+            EditorInfo.IME_ACTION_GO,
+            EditorInfo.IME_ACTION_SEARCH,
+            EditorInfo.IME_ACTION_SEND,
+            EditorInfo.IME_ACTION_NEXT,
+            EditorInfo.IME_ACTION_DONE,
+            EditorInfo.IME_ACTION_PREVIOUS
+        )
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/views/keyboards/standard/StandardKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.keyboards.standard\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyboardKey\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun StandardKeyboardView(\r\n    viewModel: KeyboardViewModel,\r\n    viewWidth: Dp,\r\n    keyHeight: Dp = 42.dp,\r\n    rowHeight: Dp = 56.dp,\r\n) {\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n    val constraintSets = StandardConstraintSets(keyHeight, rowHeight)\r\n    val nRowKeys = StandardRowKeys()\r\n\r\n\r\n    ConstraintLayout(\r\n        constraintSet = constraintSets.constraints,\r\n        modifier = Modifier.width(viewWidth),\r\n        optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n        animateChanges = true,\r\n        \r\n    ) {\r\n        Box(modifier = Modifier.layoutId('1')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.firstRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row1Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('2')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.secondRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row2Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier =  Modifier.layoutId('3')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.thirdRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                for (key in nRowKeys.row3Keys) KeyboardKey(key, viewModel)\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('4')) {\r\n            ConstraintLayout(\r\n                constraintSet = constraintSets.fourthRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n            ) {\r\n                KeyboardKey(Key(\"123\", stringResource(R.string.num)), viewModel)\r\n                KeyboardKey(Key(\"emoji\", \"emoji\"), viewModel)\r\n                KeyboardKey(Key(\"space\", keyboardLocale.space()), viewModel)\r\n                KeyboardKey(\r\n                    Key(\"action\", keyboardLocale.action(\"return\")),\r\n                    viewModel\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/standard/StandardKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/standard/StandardKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/standard/StandardKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/standard/StandardKeyboardView.kt	(date 1707381446730)
@@ -26,7 +26,7 @@
     keyHeight: Dp = 42.dp,
     rowHeight: Dp = 56.dp,
 ) {
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
     val constraintSets = StandardConstraintSets(keyHeight, rowHeight)
     val nRowKeys = StandardRowKeys()
Index: app/src/main/java/com/optiflowx/optikeysx/screens/SpeechKeyboardScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/SpeechKeyboardScreen.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/SpeechKeyboardScreen.kt
new file mode 100644
--- /dev/null	(date 1707379693195)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/SpeechKeyboardScreen.kt	(date 1707379693195)
@@ -0,0 +1,365 @@
+package com.optiflowx.optikeysx.screens
+
+import androidx.compose.animation.core.animateDpAsState
+import androidx.compose.foundation.background
+import androidx.compose.foundation.clickable
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.absolutePadding
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.statusBarsPadding
+import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.foundation.lazy.rememberLazyListState
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.filled.Delete
+import androidx.compose.material3.Card
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.LinearProgressIndicator
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.collectAsState
+import androidx.compose.runtime.getValue
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.runtime.setValue
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.ExperimentalComposeUiApi
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.draw.shadow
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.semantics.semantics
+import androidx.compose.ui.semantics.testTagsAsResourceId
+import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.unit.TextUnit
+import androidx.compose.ui.unit.TextUnitType
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import cafe.adriel.voyager.core.model.rememberScreenModel
+import cafe.adriel.voyager.core.screen.Screen
+import cafe.adriel.voyager.core.screen.ScreenKey
+import cafe.adriel.voyager.core.screen.uniqueScreenKey
+import cafe.adriel.voyager.navigator.LocalNavigator
+import cafe.adriel.voyager.navigator.currentOrThrow
+import com.optiflowx.optikeysx.core.Tools
+import com.optiflowx.optikeysx.core.downloader.messages.CancelCurrent
+import com.optiflowx.optikeysx.core.downloader.messages.CancelPending
+import com.optiflowx.optikeysx.core.downloader.messages.State
+import com.optiflowx.optikeysx.core.utils.nonScaledSp
+import com.optiflowx.optikeysx.optikeysxPreferences
+import com.optiflowx.optikeysx.ui.bold
+import com.optiflowx.optikeysx.ui.cupertino.DownloadModelBottomSheet
+import com.optiflowx.optikeysx.ui.regular
+import com.optiflowx.optikeysx.viewmodels.KeyboardSettingsModel
+import dev.patrickgold.jetpref.datastore.model.observeAsState
+import io.github.alexzhirkevich.cupertino.CupertinoBottomSheetScaffold
+import io.github.alexzhirkevich.cupertino.CupertinoBottomSheetScaffoldDefaults
+import io.github.alexzhirkevich.cupertino.CupertinoIcon
+import io.github.alexzhirkevich.cupertino.CupertinoNavigateBackButton
+import io.github.alexzhirkevich.cupertino.CupertinoText
+import io.github.alexzhirkevich.cupertino.CupertinoTopAppBar
+import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
+import io.github.alexzhirkevich.cupertino.PresentationDetent
+import io.github.alexzhirkevich.cupertino.PresentationStyle
+import io.github.alexzhirkevich.cupertino.icons.CupertinoIcons
+import io.github.alexzhirkevich.cupertino.icons.outlined.Plus
+import io.github.alexzhirkevich.cupertino.icons.outlined.Xmark
+import io.github.alexzhirkevich.cupertino.rememberCupertinoBottomSheetScaffoldState
+import io.github.alexzhirkevich.cupertino.rememberCupertinoSheetState
+import io.github.alexzhirkevich.cupertino.theme.CupertinoTheme
+import kotlinx.coroutines.launch
+import org.burnoutcrew.reorderable.ReorderableItem
+import org.burnoutcrew.reorderable.detectReorderAfterLongPress
+import org.burnoutcrew.reorderable.rememberReorderableLazyListState
+import org.burnoutcrew.reorderable.reorderable
+import org.greenrobot.eventbus.EventBus
+
+
+class SpeechKeyboardScreen : Screen {
+    override val key: ScreenKey = uniqueScreenKey
+
+    companion object {
+        const val TAG = "SpeechKeyboardScreen"
+    }
+
+    @OptIn(ExperimentalCupertinoApi::class , ExperimentalComposeUiApi::class)
+    @Composable
+    override fun Content() {
+        val prefs by optikeysxPreferences()
+
+        val context = LocalContext.current
+        val settingsModel = rememberScreenModel(TAG) {
+            KeyboardSettingsModel()
+        }
+
+
+        val modelsPendingDownloadState = settingsModel.modelsPendingDownloadLD.collectAsState().value
+        val currentDownloadingModelState = settingsModel.currentDownloadingModel.collectAsState().value
+
+        val tileTextStyle = TextStyle(
+            fontSize = TextUnit(17f, TextUnitType.Sp).nonScaledSp,
+            fontFamily = regular,
+        )
+
+        val navigator = LocalNavigator.currentOrThrow
+
+        val modelOrder by prefs.modelsOrder.observeAsState()
+
+        val scope = rememberCoroutineScope()
+
+        val lazyListState = rememberLazyListState()
+
+        val scaffoldState = rememberCupertinoBottomSheetScaffoldState(
+            rememberCupertinoSheetState(
+                presentationStyle = PresentationStyle.Modal(
+                    detents = setOf(
+                        PresentationDetent.Large,
+                        PresentationDetent.Fraction(.6f),
+                    ),
+                )
+            )
+        )
+
+        var modelOrderData by remember {
+            mutableStateOf(modelOrder)
+        }
+
+        modelOrderData = modelOrder
+
+        val sheetSectionColor = CupertinoTheme.colorScheme.tertiarySystemBackground
+
+        val state = rememberReorderableLazyListState(onMove = { from, to ->
+            // one for currently downloading, one for the separator, and all the pending downloads
+            val fromIndex = from.index - modelsPendingDownloadState.size - 2
+            val toIndex = to.index - modelsPendingDownloadState.size - 2
+            if (fromIndex < 0 || toIndex < 0) return@rememberReorderableLazyListState
+
+            prefs.modelsOrder.set(modelOrderData.toMutableList().apply {
+                add(
+                    toIndex, removeAt(fromIndex)
+                )
+            })
+        })
+
+        LaunchedEffect(Unit) {
+            settingsModel.reloadModels()
+        }
+
+        CupertinoBottomSheetScaffold(
+            modifier = Modifier.semantics {
+                testTagsAsResourceId = true
+            },
+            colors = CupertinoBottomSheetScaffoldDefaults.colors(
+                sheetContainerColor = CupertinoTheme.colorScheme
+                    .secondarySystemBackground,
+            ),
+            sheetContent = {
+                DownloadModelBottomSheet(
+                    scaffoldState = scaffoldState,
+                    sheetSectionColor = sheetSectionColor,
+                    modelOrder = modelOrder,
+                )
+            },
+            scaffoldState = scaffoldState,
+            topBar = {
+                CupertinoTopAppBar(
+                    modifier = Modifier.padding(end = 15.dp),
+                    navigationIcon = {
+                        CupertinoNavigateBackButton(onClick = { navigator.pop() }) {
+                            CupertinoText("Home")
+                        }
+                    },
+                    title = {
+                        CupertinoText(
+                            text = "Speech Recognition",
+                            fontFamily = bold,
+                        )
+                    },
+                    actions = {
+                        CupertinoIcon(
+                            imageVector = CupertinoIcons.Default.Plus,
+                            contentDescription = "add",
+                            modifier = Modifier.clickable(
+                                onClick = {
+                                    scope.launch {
+                                        scaffoldState.bottomSheetState.expand()
+                                    }
+                                }
+                            )
+                        )
+                    }
+                )
+            }
+        ) {
+            LazyColumn(
+                state = state.listState,
+                modifier = Modifier
+                    .statusBarsPadding()
+                    .absolutePadding(top = 40.dp)
+                    .reorderable(state)
+                    .detectReorderAfterLongPress(state),
+                userScrollEnabled = true
+            ) {
+                item {
+                    currentDownloadingModelState.let { current ->
+                        Box(
+                            modifier = Modifier
+                                .fillMaxWidth()
+                                .padding(10.dp)
+                        ) {
+                            Card {
+                                Column {
+                                    Row(
+                                        modifier = Modifier.padding(10.dp),
+                                        verticalAlignment = Alignment.CenterVertically
+                                    ) {
+                                        if (current != null) {
+                                            Column(modifier = Modifier.weight(1f)) {
+                                                Text(
+                                                    text = current.info.locale.displayName,
+                                                    fontSize = 20.sp
+                                                )
+                                                Text(text = current.info.url, fontSize = 12.sp)
+                                                val stateText = when (current.state) {
+                                                    State.NONE -> "Download Unknown"
+                                                    State.QUEUED -> "Download Pending"
+                                                    State.DOWNLOAD_STARTED -> "Download Started"
+                                                    State.DOWNLOAD_FINISHED -> "Download Finished"
+                                                    State.UNZIP_STARTED -> "Unzip Started"
+                                                    State.UNZIP_FINISHED -> "Unzip Finished"
+                                                    State.FINISHED -> "Completed"
+                                                    State.ERROR -> "An error occurred while downloading"
+                                                    State.CANCELED -> "Download Canceled"
+                                                }
+
+                                                Text(
+                                                    text = "OptiKeysX: Downloading Model".format(
+                                                        stateText
+                                                    ), fontSize = 14.sp
+                                                )
+                                            }
+                                        }
+                                        IconButton(onClick = {
+                                            if (current != null) {
+                                                EventBus.getDefault().post(
+                                                    CancelCurrent(current.info)
+                                                )
+                                            }
+                                        }) {
+                                            Icon(
+                                                imageVector = CupertinoIcons.Default.Xmark,
+                                                contentDescription = null
+                                            )
+                                        }
+                                    }
+                                    current?.progress?.let { it1 ->
+                                        LinearProgressIndicator(
+                                            it1, modifier = Modifier.fillMaxWidth()
+                                        )
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+
+                item {
+                    modelsPendingDownloadState.forEach {
+                        Box(
+                            modifier = Modifier
+                                .fillMaxWidth()
+                                .padding(10.dp)
+                        ) {
+
+                            Card {
+                                Row(
+                                    modifier = Modifier.padding(10.dp),
+                                    verticalAlignment = Alignment.CenterVertically
+                                ) {
+                                    Column(modifier = Modifier.weight(1f)) {
+                                        Text(text = it.locale.displayName, fontSize = 20.sp)
+                                        Text(text = it.url, fontSize = 12.sp)
+                                        Text(
+                                            text = "Download Pending...",
+                                            fontSize = 14.sp
+                                        )
+                                    }
+                                    IconButton(onClick = {
+                                        EventBus.getDefault().post(
+                                            CancelPending(it)
+                                        )
+                                    }) {
+                                        Icon(
+                                            imageVector = CupertinoIcons.Default.Xmark,
+                                            contentDescription = null
+                                        )
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+
+                item {
+                    if (currentDownloadingModelState != null || modelsPendingDownloadState.isNotEmpty()) {
+                        Spacer(
+                            modifier = Modifier
+                                .padding(10.dp, 5.dp)
+                                .background(MaterialTheme.colorScheme.primary)
+                                .fillMaxWidth()
+                                .height(2.dp)
+                        )
+                    }
+                }
+
+                item {
+                    modelOrderData.forEach {
+                        ReorderableItem(
+                            state, key = it.path, modifier = Modifier
+                                .fillMaxWidth()
+                                .padding(10.dp)
+                        ) { isDragging ->
+                            val elevation = animateDpAsState(if (isDragging) 16.dp else 0.dp)
+                            Card(
+                                modifier = Modifier
+                                    .shadow(elevation.value)
+                                    .fillMaxWidth()
+                            ) {
+                                Row(
+                                    verticalAlignment = Alignment.CenterVertically, modifier = Modifier
+                                        .padding(10.dp)
+                                ) {
+
+                                    Column(modifier = Modifier.weight(1f)) {
+                                        Text(
+                                            text = it.name,
+                                            fontSize = 20.sp
+                                        )
+                                        Text(text = it.path, fontSize = 12.sp)
+                                    }
+                                    IconButton(onClick = {
+                                        Tools.deleteModel(it, context)
+                                        settingsModel.reloadModels()
+                                    }) {
+                                        Icon(imageVector = Icons.Default.Delete, contentDescription = null)
+                                    }
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+
+}
+
+
+
Index: app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultLandscapeKeyboard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.defaults\r\n\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.interaction.MutableInteractionSource\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.mandatorySystemGesturesPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.layout.wrapContentSize\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.painter.Painter\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.semantics.Role\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport androidx.constraintlayout.compose.ConstraintSet\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.enums.KeyboardType\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.ui.cupertino.KeyboardGlobalOptions\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyboardTopView\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\nimport com.optiflowx.optikeysx.views.clipboard.ClipboardKeyboardView\r\nimport com.optiflowx.optikeysx.views.emoji.EmojiKeyboardView\r\nimport com.optiflowx.optikeysx.views.keyboards.french.FrenchKeyboardView\r\nimport com.optiflowx.optikeysx.views.keyboards.portuguese.PortugueseKeyboardView\r\nimport com.optiflowx.optikeysx.views.keyboards.russian.RussianKeyboardView\r\nimport com.optiflowx.optikeysx.views.keyboards.spanish.SpanishKeyboardView\r\nimport com.optiflowx.optikeysx.views.keyboards.standard.StandardKeyboardView\r\nimport com.optiflowx.optikeysx.views.symbols.SymbolsKeyboardView\r\n\r\n@Composable\r\nfun DefaultLandscapeKeyboard(\r\n    viewModel: KeyboardViewModel\r\n) {\r\n    val screenWidth = LocalConfiguration.current.screenWidthDp\r\n    val viewWidth = (screenWidth * 0.76).dp\r\n\r\n    val constraintsSet = ConstraintSet {\r\n        val topView = createRefFor(\"topView\")\r\n        val keyboardView = createRefFor(\"keyboardView\")\r\n\r\n        constrain(topView) {\r\n            top.linkTo(parent.top)\r\n            start.linkTo(parent.start)\r\n            end.linkTo(parent.end)\r\n        }\r\n\r\n        constrain(keyboardView) {\r\n            top.linkTo(topView.bottom)\r\n            start.linkTo(parent.start)\r\n            end.linkTo(parent.end)\r\n            bottom.linkTo(parent.bottom)\r\n        }\r\n    }\r\n\r\n    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n    val keyboardType = viewModel.keyboardType.collectAsState()\r\n    val locale = viewModel.locale.collectAsState().value\r\n\r\n\r\n    ConstraintLayout(\r\n        constraintSet = constraintsSet,\r\n        modifier = Modifier\r\n            .mandatorySystemGesturesPadding()\r\n            .wrapContentSize(),\r\n        optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n        animateChanges = true,\r\n\r\n        ) {\r\n        KeyboardTopView(\r\n            viewModel = viewModel,\r\n            viewWidth = viewWidth,\r\n            topViewHeight = 32,\r\n            textSize = 14f,\r\n            searchIconSize = 16,\r\n        )\r\n\r\n        Row(\r\n            verticalAlignment = Alignment.Bottom,\r\n            modifier = Modifier\r\n                .layoutId(\"keyboardView\")\r\n                .width(screenWidth.dp)\r\n                .padding(vertical = 2.dp)\r\n        ) {\r\n            Box {\r\n                KeyboardGlobalOptions(viewModel, fontType, viewWidth, 32, 14, 30)\r\n                SideView(\r\n                    icon = painterResource(R.drawable.globe_outline),\r\n                    onClick = { viewModel.updateIsShowOptions(true) }\r\n                )\r\n            }\r\n\r\n            Box(\r\n                modifier = Modifier.wrapContentSize(), Alignment.Center\r\n            ) {\r\n                when (keyboardType.value) {\r\n                    KeyboardType.Normal -> {\r\n                        when (locale) {\r\n                            \"pt-BR\" -> PortugueseKeyboardView(viewModel, viewWidth, 30.dp, 36.dp)\r\n                            \"pt-PT\" -> PortugueseKeyboardView(viewModel, viewWidth, 30.dp, 36.dp)\r\n                            \"fr-FR\" -> FrenchKeyboardView(viewModel, viewWidth, 30.dp, 36.dp)\r\n                            \"es\" -> SpanishKeyboardView(viewModel, viewWidth, 30.dp, 36.dp)\r\n                            \"ru\" -> RussianKeyboardView(viewModel, viewWidth, 30.dp, 36.dp)\r\n                            else -> StandardKeyboardView(viewModel, viewWidth, 30.dp, 36.dp)\r\n                        }\r\n                    }\r\n\r\n                    KeyboardType.Symbol -> SymbolsKeyboardView(viewModel, viewWidth, 30.dp, 36.dp)\r\n\r\n                    KeyboardType.Emoji -> EmojiKeyboardView(viewModel, viewWidth, 150.dp, 9)\r\n\r\n                    KeyboardType.Clipboard -> ClipboardKeyboardView(viewModel, viewWidth, 150.dp)\r\n                }\r\n            }\r\n\r\n            SideView(\r\n                icon = painterResource(\r\n                    if (isSystemInDarkTheme()) R.drawable.mic_fill else R.drawable.mic_outline\r\n                ),\r\n                onClick = {}\r\n            )\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun SideView(\r\n    icon: Painter,\r\n    onClick: () -> Unit = {}\r\n) {\r\n    val screenWidth = LocalConfiguration.current.screenWidthDp\r\n    val sideWidth = (screenWidth * 0.12).dp\r\n\r\n    Box(\r\n        contentAlignment = Alignment.BottomCenter,\r\n        modifier = Modifier\r\n            .width(sideWidth)\r\n            .padding(bottom = 2.dp)\r\n    ) {\r\n        Icon(\r\n            painter = icon,\r\n            contentDescription = \"icon\",\r\n            tint = MaterialTheme.colorScheme.scrim,\r\n            modifier = Modifier\r\n                .size(28.dp)\r\n                .clickable(\r\n                    indication = null,\r\n                    interactionSource = remember { MutableInteractionSource() },\r\n                    role = Role.Button,\r\n                    onClick = onClick,\r\n                )\r\n        )\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultLandscapeKeyboard.kt b/app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultLandscapeKeyboard.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultLandscapeKeyboard.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultLandscapeKeyboard.kt	(date 1707381185616)
@@ -14,7 +14,6 @@
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.collectAsState
-import androidx.compose.runtime.getValue
 import androidx.compose.runtime.remember
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
@@ -28,8 +27,6 @@
 import androidx.constraintlayout.compose.ConstraintSet
 import com.optiflowx.optikeysx.R
 import com.optiflowx.optikeysx.core.enums.KeyboardType
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
 import com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED
 import com.optiflowx.optikeysx.ui.cupertino.KeyboardGlobalOptions
 import com.optiflowx.optikeysx.ui.keyboard.KeyboardTopView
@@ -42,6 +39,7 @@
 import com.optiflowx.optikeysx.views.keyboards.spanish.SpanishKeyboardView
 import com.optiflowx.optikeysx.views.keyboards.standard.StandardKeyboardView
 import com.optiflowx.optikeysx.views.symbols.SymbolsKeyboardView
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 
 @Composable
 fun DefaultLandscapeKeyboard(
@@ -68,10 +66,9 @@
         }
     }
 
-    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
+    val fontType = viewModel.prefs.keyboardFontType.observeAsState().value
     val keyboardType = viewModel.keyboardType.collectAsState()
-    val locale = viewModel.locale.collectAsState().value
-
+    val locale = viewModel.keyboardData.collectAsState().value.locale
 
     ConstraintLayout(
         constraintSet = constraintsSet,
Index: app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultKeyboard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultKeyboard.kt b/app/src/main/java/com/optiflowx/optikeysx/views/defaults/KeyboardViewManager.kt
rename from app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultKeyboard.kt
rename to app/src/main/java/com/optiflowx/optikeysx/views/defaults/KeyboardViewManager.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultKeyboard.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/defaults/KeyboardViewManager.kt	(date 1707381788360)
@@ -1,10 +1,9 @@
-
-
 package com.optiflowx.optikeysx.views.defaults
 
 import android.annotation.SuppressLint
 import android.content.Context
 import android.content.res.Configuration
+import android.util.Log
 import androidx.compose.foundation.isSystemInDarkTheme
 import androidx.compose.foundation.layout.wrapContentSize
 import androidx.compose.material3.MaterialTheme
@@ -15,20 +14,56 @@
 import androidx.compose.runtime.mutableIntStateOf
 import androidx.compose.runtime.saveable.rememberSaveable
 import androidx.compose.ui.Modifier
+import androidx.compose.ui.geometry.Offset
 import androidx.compose.ui.graphics.RectangleShape
+import androidx.compose.ui.input.pointer.PointerInputChange
 import androidx.compose.ui.platform.AbstractComposeView
 import androidx.compose.ui.platform.LocalConfiguration
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.Observer
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.ViewModelProvider
 import androidx.lifecycle.viewmodel.compose.viewModel
+import com.optiflowx.optikeysx.core.data.KeyboardData
+import com.optiflowx.optikeysx.ime.recognizers.RecognizerState
+import com.optiflowx.optikeysx.optikeysxPreferences
 import com.optiflowx.optikeysx.ui.AppleKeyboardIMETheme
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+import com.optiflowx.optikeysx.views.number.NumberLandscapeKeyboard
+import com.optiflowx.optikeysx.views.number.NumberPortraitKeyboard
+import com.optiflowx.optikeysx.views.phone.PhoneLandscapeKeyboard
+import com.optiflowx.optikeysx.views.phone.PhonePortraitKeyboard
+import splitties.experimental.ExperimentalSplittiesApi
+import splitties.views.InputType
 
 @SuppressLint("ViewConstructor")
-class DefaultKeyboard(context: Context, val locale: String) : AbstractComposeView(context) {
+class KeyboardViewManager(context: Context, private val data: KeyboardData) :
+    AbstractComposeView(context),
+    Observer<RecognizerState> {
+    private val prefs by optikeysxPreferences()
+    val stateLD = MutableLiveData(STATE_INITIAL)
+    val errorMessageLD = MutableLiveData("Error")
+    private var listener: Listener? = null
+    val recognizerNameLD = MutableLiveData("")
+
+
+    init {
+        this.isSoundEffectsEnabled = true
+
+        layoutParams = LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT)
+
+
+//        Log.v(TAG, recognizerNameLD.value.toString())
+//        Log.v(TAG, enterActionLD.value.toString())
+        Log.v(TAG, stateLD.value.toString())
+    }
+
+    @OptIn(ExperimentalSplittiesApi::class)
     @Composable
     override fun Content() {
+
         val config = LocalConfiguration.current
+
         val orientation = rememberSaveable(config.orientation) {
             mutableIntStateOf(config.orientation)
         }
@@ -43,8 +78,10 @@
             }
         )
 
-        LaunchedEffect(locale) {
-            viewModel.initLocale(locale)
+        LaunchedEffect(data) {
+            viewModel.initKeyboardData(data)
+
+            Log.i(TAG, "viewModel.locale: ${viewModel.keyboardData.value.locale}")
         }
 
         DisposableEffect(Unit) {
@@ -61,12 +98,67 @@
                     alpha = 1f
                 ),
             ) {
-                if (orientation.intValue == Configuration.ORIENTATION_PORTRAIT) {
-                    DefaultPortraitKeyboard(viewModel)
-                } else DefaultLandscapeKeyboard(viewModel)
+                when (data.inputType) {
+                    InputType.number.value -> {
+                        if (orientation.intValue == Configuration.ORIENTATION_PORTRAIT) {
+                            NumberPortraitKeyboard(viewModel)
+                        } else NumberLandscapeKeyboard(viewModel)
+                    }
+
+                    InputType.phone.value -> {
+                        if (orientation.intValue == Configuration.ORIENTATION_PORTRAIT) {
+                            PhonePortraitKeyboard(viewModel)
+                        } else PhoneLandscapeKeyboard(viewModel)
+                    }
+
+                    else -> {
+                        if (orientation.intValue == Configuration.ORIENTATION_PORTRAIT) {
+                            DefaultPortraitKeyboard(viewModel)
+                        } else DefaultLandscapeKeyboard(viewModel)
+                    }
+                }
             }
 
             isSystemInDarkTheme()
         }
     }
+
+    override fun onChanged(value: RecognizerState) {
+        when (value) {
+            RecognizerState.CLOSED, RecognizerState.NONE -> stateLD.setValue(STATE_INITIAL)
+
+            RecognizerState.LOADING -> stateLD.setValue(STATE_LOADING)
+            RecognizerState.READY -> stateLD.setValue(STATE_READY)
+            RecognizerState.IN_RAM -> stateLD.setValue(STATE_PAUSED)
+            RecognizerState.ERROR -> stateLD.setValue(STATE_ERROR)
+        }
+    }
+
+    fun setListener(listener: Listener) {
+        this.listener = listener
+    }
+
+    interface Listener {
+        fun micClick()
+        fun micLongClick(): Boolean
+        fun backClicked()
+        fun backspaceClicked()
+        fun backspaceTouchStart(offset: Offset)
+        fun backspaceTouched(change: PointerInputChange, dragAmount: Float)
+        fun backspaceTouchEnd()
+        fun returnClicked()
+        fun modelClicked()
+        fun settingsClicked()
+        fun buttonClicked(text: String)
+    }
+
+    companion object {
+        const val STATE_INITIAL = 0
+        const val STATE_LOADING = 1
+        const val STATE_READY = 2 // model loaded, ready to start
+        const val STATE_LISTENING = 3
+        const val STATE_PAUSED = 4
+        const val STATE_ERROR = 5
+        const val TAG = "KeyboardViewManager"
+    }
 }
Index: app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/RecognizerSource.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/RecognizerSource.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/RecognizerSource.kt
new file mode 100644
--- /dev/null	(date 1707301756181)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/RecognizerSource.kt	(date 1707301756181)
@@ -0,0 +1,21 @@
+package com.optiflowx.optikeysx.ime.recognizers
+
+import androidx.annotation.StringRes
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.Observer
+import java.util.concurrent.Executor
+
+interface RecognizerSource {
+    fun initialize(executor: Executor, onLoaded: Observer<RecognizerSource?>)
+    val recognizer: Recognizer
+    fun close(freeRAM: Boolean)
+    val stateLD: LiveData<RecognizerState>
+    
+    val addSpaces: Boolean
+
+    val closed: Boolean
+
+    @get:StringRes
+    val errorMessage: Int
+    val name: String
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/utils/ModelListPreference.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/utils/ModelListPreference.kt b/app/src/main/java/com/optiflowx/optikeysx/core/utils/ModelListPreference.kt
new file mode 100644
--- /dev/null	(date 1707302584924)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/utils/ModelListPreference.kt	(date 1707302584924)
@@ -0,0 +1,18 @@
+package com.optiflowx.optikeysx.core.utils
+
+import com.optiflowx.optikeysx.core.data.InstalledModelReference
+import dev.patrickgold.jetpref.datastore.model.PreferenceSerializer
+import kotlinx.serialization.builtins.ListSerializer
+import kotlinx.serialization.json.Json
+
+class ModelListSerializer : PreferenceSerializer<List<InstalledModelReference>> {
+    private val serializer = ListSerializer(InstalledModelReference.serializer())
+    override fun deserialize(value: String): List<InstalledModelReference> {
+        return Json.decodeFromString(serializer, value)
+    }
+
+    override fun serialize(value: List<InstalledModelReference>): String {
+        return Json.encodeToString(serializer, value)
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/VoskLocalProvider.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/VoskLocalProvider.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/VoskLocalProvider.kt
new file mode 100644
--- /dev/null	(date 1707302522503)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/VoskLocalProvider.kt	(date 1707302522503)
@@ -0,0 +1,36 @@
+package com.optiflowx.optikeysx.ime.recognizers.providers
+
+import android.content.Context
+import com.optiflowx.optikeysx.Constants
+import com.optiflowx.optikeysx.core.Tools
+import com.optiflowx.optikeysx.core.data.InstalledModelReference
+import com.optiflowx.optikeysx.core.data.ModelType
+import com.optiflowx.optikeysx.ime.recognizers.RecognizerSource
+import com.optiflowx.optikeysx.ime.recognizers.VoskLocal
+import java.util.Locale
+
+class VoskLocalProvider(private val context: Context) : RecognizerSourceProvider {
+    override fun getInstalledModels(): List<InstalledModelReference> {
+        val models: MutableList<InstalledModelReference> = ArrayList()
+        val modelsDir = Constants.getModelsDirectory(context)
+        if (!modelsDir.exists()) return models
+        for (localeFolder in modelsDir.listFiles()!!) {
+            if (!localeFolder.isDirectory) continue
+            val locale = Locale.forLanguageTag(localeFolder.name)
+            for (modelFolder in localeFolder.listFiles()!!) {
+                if (!modelFolder.isDirectory) continue
+                val model = InstalledModelReference(
+                    modelFolder.absolutePath,
+                    locale.displayName,
+                    ModelType.VoskLocal
+                )
+                models.add(model)
+            }
+        }
+        return models
+    }
+
+    override fun recognizerSourceForModel(localModel: InstalledModelReference): RecognizerSource? {
+        return VoskLocal(Tools.getVoskModelFromReference(localModel) ?: return null)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/Providers.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/Providers.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/Providers.kt
new file mode 100644
--- /dev/null	(date 1707301756151)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/Providers.kt	(date 1707301756151)
@@ -0,0 +1,33 @@
+package com.optiflowx.optikeysx.ime.recognizers.providers
+
+import android.content.Context
+import com.optiflowx.optikeysx.core.Tools
+import com.optiflowx.optikeysx.core.data.InstalledModelReference
+import com.optiflowx.optikeysx.core.data.ModelType
+import com.optiflowx.optikeysx.ime.recognizers.RecognizerSource
+
+class Providers(context: Context) {
+    private val voskLocalProvider: VoskLocalProvider
+    private val providers: List<RecognizerSourceProvider>
+
+    init {
+        val providersM = mutableListOf<RecognizerSourceProvider>()
+        voskLocalProvider = VoskLocalProvider(context)
+        providersM.add(voskLocalProvider)
+        if (Tools.VOSK_SERVER_ENABLED) {
+            providersM.add(VoskServerProvider())
+        }
+        providers = providersM
+    }
+
+    fun recognizerSourceForModel(localModel: InstalledModelReference): RecognizerSource? {
+        return when (localModel.type) {
+            ModelType.VoskLocal -> voskLocalProvider.recognizerSourceForModel(localModel)
+            else -> null
+        }
+    }
+
+    fun installedModels(): Collection<InstalledModelReference> {
+        return providers.map { it.getInstalledModels() }.flatten()
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/RecognizerSourceProvider.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/RecognizerSourceProvider.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/RecognizerSourceProvider.kt
new file mode 100644
--- /dev/null	(date 1707301756144)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/RecognizerSourceProvider.kt	(date 1707301756144)
@@ -0,0 +1,10 @@
+package com.optiflowx.optikeysx.ime.recognizers.providers
+
+import com.optiflowx.optikeysx.core.data.InstalledModelReference
+import com.optiflowx.optikeysx.ime.recognizers.RecognizerSource
+
+interface RecognizerSourceProvider {
+    fun getInstalledModels(): Collection<InstalledModelReference>
+
+    fun recognizerSourceForModel(localModel: InstalledModelReference): RecognizerSource?
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/views/keyboards/portuguese/PortugueseKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.keyboards.portuguese\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyboardKey\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun PortugueseKeyboardView(\r\n    viewModel: KeyboardViewModel,\r\n    viewWidth: Dp,\r\n    keyHeight: Dp = 42.dp,\r\n    rowHeight: Dp = 56.dp,\r\n) {\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n    val ptRowKeys = PortugueseARowKeys()\r\n    val ptBrRowKeys = PortugueseBRowKeys()\r\n\r\n    ConstraintLayout(\r\n        constraintSet = if (locale == \"pt-PT\") {\r\n            PortugueseAConstraintSets(keyHeight, rowHeight).constraints\r\n        } else PortugueseBConstraintSets(keyHeight, rowHeight).constraints,\r\n        modifier = Modifier.width(viewWidth),\r\n        optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n        animateChanges = true,\r\n        \r\n    ) {\r\n        Box(modifier = Modifier.layoutId('1')) {\r\n            ConstraintLayout(\r\n                constraintSet = if (locale == \"pt-PT\") {\r\n                    PortugueseAConstraintSets(keyHeight, rowHeight).firstRowConstraints\r\n                } else PortugueseBConstraintSets(keyHeight, rowHeight).firstRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                if (locale == \"pt-PT\") {\r\n                    for (key in ptRowKeys.row1Keys) KeyboardKey(key, viewModel)\r\n                } else {\r\n                    for (key in ptBrRowKeys.row1Keys) KeyboardKey(key, viewModel)\r\n                }\r\n\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('2')) {\r\n            ConstraintLayout(\r\n                constraintSet = if (locale == \"pt-PT\") {\r\n                    PortugueseAConstraintSets(keyHeight, rowHeight).secondRowConstraints\r\n                } else PortugueseBConstraintSets(keyHeight, rowHeight).secondRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                if (locale == \"pt-PT\") {\r\n                    for (key in ptRowKeys.row2Keys) KeyboardKey(key, viewModel)\r\n                } else {\r\n                    for (key in ptBrRowKeys.row2Keys) KeyboardKey(key, viewModel)\r\n                }\r\n            }\r\n        }\r\n        Box(modifier =  Modifier.layoutId('3')) {\r\n            ConstraintLayout(\r\n                constraintSet = if (locale == \"pt-PT\") {\r\n                    PortugueseAConstraintSets(keyHeight, rowHeight).thirdRowConstraints\r\n                } else PortugueseBConstraintSets(keyHeight, rowHeight).thirdRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                if (locale == \"pt-PT\") {\r\n                    for (key in ptRowKeys.row3Keys) KeyboardKey(key, viewModel)\r\n                } else {\r\n                    for (key in ptBrRowKeys.row3Keys) KeyboardKey(key, viewModel)\r\n                }\r\n            }\r\n        }\r\n        Box(modifier = Modifier.layoutId('4')) {\r\n            ConstraintLayout(\r\n                constraintSet = if (locale == \"pt-PT\") {\r\n                    PortugueseAConstraintSets(keyHeight, rowHeight).fourthRowConstraints\r\n                } else PortugueseBConstraintSets(keyHeight, rowHeight).fourthRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n            ) {\r\n                KeyboardKey(Key(\"123\", stringResource(R.string.num)), viewModel)\r\n                KeyboardKey(Key(\"emoji\", \"emoji\"), viewModel)\r\n                KeyboardKey(Key(\"space\", keyboardLocale.space()), viewModel)\r\n                KeyboardKey(\r\n                    Key(\"action\", keyboardLocale.action(\"return\")),\r\n                    viewModel\r\n                )\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/portuguese/PortugueseKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/portuguese/PortugueseKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/portuguese/PortugueseKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/keyboards/portuguese/PortugueseKeyboardView.kt	(date 1707381446681)
@@ -26,7 +26,7 @@
     keyHeight: Dp = 42.dp,
     rowHeight: Dp = 56.dp,
 ) {
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
     val ptRowKeys = PortugueseARowKeys()
     val ptBrRowKeys = PortugueseBRowKeys()
Index: app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/VoskServerProvider.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/VoskServerProvider.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/VoskServerProvider.kt
new file mode 100644
--- /dev/null	(date 1707302522537)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/providers/VoskServerProvider.kt	(date 1707302522537)
@@ -0,0 +1,14 @@
+package com.optiflowx.optikeysx.ime.recognizers.providers
+
+import com.optiflowx.optikeysx.core.data.InstalledModelReference
+import com.optiflowx.optikeysx.ime.recognizers.RecognizerSource
+
+class VoskServerProvider : RecognizerSourceProvider {
+    override fun getInstalledModels(): List<InstalledModelReference> {
+        TODO("Not yet implemented")
+    }
+
+    override fun recognizerSourceForModel(localModel: InstalledModelReference): RecognizerSource? {
+        TODO("Not yet implemented")
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/Recognizer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/Recognizer.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/Recognizer.kt
new file mode 100644
--- /dev/null	(date 1707301649641)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/Recognizer.kt	(date 1707301649641)
@@ -0,0 +1,20 @@
+package com.optiflowx.optikeysx.ime.recognizers
+import java.util.Locale
+
+interface Recognizer {
+    fun reset()
+    fun acceptWaveForm(buffer: ShortArray?, nread: Int): Boolean
+    fun getResult(): String
+    fun getPartialResult(): String
+    fun getFinalResult(): String
+    val sampleRate: Float
+    val locale: Locale?
+
+    val localeNeedsRemovingSpace: Boolean
+        get() = listOf("ja", "zh").contains(locale?.language?:"")
+
+    fun removeSpaceForLocale(text: String): String {
+        return if (localeNeedsRemovingSpace) text.replace("\\s".toRegex(), "")
+        else text
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/VoskLocal.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/VoskLocal.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/VoskLocal.kt
new file mode 100644
--- /dev/null	(date 1707302522513)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/VoskLocal.kt	(date 1707302522513)
@@ -0,0 +1,95 @@
+package com.optiflowx.optikeysx.ime.recognizers
+
+import android.os.Handler
+import android.os.Looper
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.Observer
+import com.optiflowx.optikeysx.core.data.VoskLocalModel
+import org.json.JSONException
+import org.json.JSONObject
+import org.vosk.Model
+import java.util.Locale
+import java.util.concurrent.Executor
+
+class VoskLocal(private val localModel: VoskLocalModel) : RecognizerSource {
+    private val stateMLD = MutableLiveData(RecognizerState.NONE)
+    override val stateLD: LiveData<RecognizerState>
+        get() = stateMLD
+    private var myRecognizer: MyRecognizer? = null
+    override val recognizer: Recognizer
+        get() = myRecognizer!!
+    private var model: Model? = null
+    override fun initialize(executor: Executor, onLoaded: Observer<RecognizerSource?>) {
+        stateMLD.postValue(RecognizerState.LOADING)
+        val handler = Handler(Looper.getMainLooper())
+        executor.execute {
+            val model = Model(localModel.path)
+            handler.post {
+                modelLoaded(model)
+                onLoaded.onChanged(this)
+            }
+        }
+    }
+
+    override val closed: Boolean
+        get() = myRecognizer == null
+    override val addSpaces: Boolean
+        get() = !listOf("ja", "zh").contains(localModel.locale.language)
+
+    private fun modelLoaded(model: Model) {
+        this.model = model
+        stateMLD.postValue(RecognizerState.READY)
+        myRecognizer = MyRecognizer(model, 16000.0f, localModel.locale)
+    }
+
+    private class MyRecognizer     //            setMaxAlternatives(3); // TODO: implement
+        (model: Model, override val sampleRate: Float, override val locale: Locale?) :
+        org.vosk.Recognizer(model, sampleRate),
+        Recognizer {
+
+        override fun getResult(): String {
+            try {
+                val result = JSONObject(super.getResult())
+                return removeSpaceForLocale(result.getString("text").trim { it <= ' ' })
+            } catch (e: JSONException) {
+                e.printStackTrace()
+            }
+            return ""
+        }
+
+        override fun getPartialResult(): String {
+            try {
+                val result = JSONObject(super.getPartialResult())
+                return removeSpaceForLocale(result.getString("partial").trim { it <= ' ' })
+            } catch (e: JSONException) {
+                e.printStackTrace()
+            }
+            return ""
+        }
+
+        override fun getFinalResult(): String {
+            try {
+                val result = JSONObject(super.getFinalResult())
+                return removeSpaceForLocale(result.getString("text").trim { it <= ' ' })
+            } catch (e: JSONException) {
+                e.printStackTrace()
+            }
+            return ""
+        }
+    }
+
+    override fun close(freeRAM: Boolean) {
+        if (freeRAM) {
+            myRecognizer?.close()
+            myRecognizer = null
+            model?.close()
+            model = null
+        }
+    }
+
+    override val errorMessage: Int
+        get() = 0
+    override val name: String
+        get() = localModel.locale.displayName ?: ""
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/RecognizerState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/RecognizerState.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/RecognizerState.kt
new file mode 100644
--- /dev/null	(date 1707301649559)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/RecognizerState.kt	(date 1707301649559)
@@ -0,0 +1,5 @@
+package com.optiflowx.optikeysx.ime.recognizers
+
+enum class RecognizerState {
+    NONE, LOADING, READY, IN_RAM, CLOSED, ERROR
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/VoskServer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/VoskServer.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/VoskServer.kt
new file mode 100644
--- /dev/null	(date 1707322174766)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/recognizers/VoskServer.kt	(date 1707322174766)
@@ -0,0 +1,149 @@
+package com.optiflowx.optikeysx.ime.recognizers
+
+import android.util.Log
+import androidx.lifecycle.LiveData
+import androidx.lifecycle.MutableLiveData
+import androidx.lifecycle.Observer
+import com.google.protobuf.ByteString
+import com.optiflowx.optikeysx.core.data.VoskServerData
+import io.grpc.ManagedChannelBuilder
+import io.grpc.stub.StreamObserver
+import vosk.stt.v1.SttServiceGrpc
+import vosk.stt.v1.SttServiceGrpc.SttServiceBlockingStub
+import vosk.stt.v1.SttServiceGrpc.SttServiceStub
+import vosk.stt.v1.SttServiceOuterClass
+import vosk.stt.v1.SttServiceOuterClass.RecognitionConfig
+import vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest
+import vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse
+import java.net.URI
+import java.nio.ByteBuffer
+import java.util.Locale
+import java.util.concurrent.CountDownLatch
+import java.util.concurrent.Executor
+
+class VoskServer(private val data: VoskServerData) : RecognizerSource {
+    private val stateMLD = MutableLiveData(RecognizerState.NONE)
+    override val stateLD: LiveData<RecognizerState>
+        get() = stateMLD
+    override val addSpaces: Boolean
+        get() = !listOf("ja", "zh").contains(data.locale?.language?:"")
+    private var myRecognizerGRPC: MyRecognizerGRPC? = null
+    override val recognizer: Recognizer
+        get() = myRecognizerGRPC!!
+    override fun initialize(executor: Executor, onLoaded: Observer<RecognizerSource?>) {
+        stateMLD.postValue(RecognizerState.LOADING)
+        myRecognizerGRPC = MyRecognizerGRPC(data.uri, 16000.0f, data.locale)
+        stateMLD.postValue(RecognizerState.READY)
+        onLoaded.onChanged(this)
+    }
+
+    override val closed: Boolean
+        get() = myRecognizerGRPC!!.closed
+
+    override fun close(freeRAM: Boolean) {
+        myRecognizerGRPC!!.close()
+    }
+
+    override val errorMessage: Int
+        get() = 0
+    override val name: String
+        get() = String.format("%s:%s", data.uri.host, data.uri.port)
+
+    private class MyRecognizerGRPC(uri: URI, override val sampleRate: Float, override val locale: Locale?) : Recognizer, StreamObserver<StreamingRecognitionResponse> {
+        private val blockingStub: SttServiceBlockingStub
+        private val asyncStub: SttServiceStub
+        private val requestStream: StreamObserver<StreamingRecognitionRequest>
+        private val config: RecognitionConfig
+        private var latch: CountDownLatch
+
+        private var myResult: String = ""
+        private var myPartialResult: String = ""
+        private var myFinalResult: String = ""
+
+        private var isPartialResult = false
+        var closed = false
+
+        init {
+            val channel = ManagedChannelBuilder.forAddress(uri.host, uri.port).build()
+            blockingStub = SttServiceGrpc.newBlockingStub(channel)
+            asyncStub = SttServiceGrpc.newStub(channel)
+            requestStream = asyncStub.streamingRecognize(this)
+            config = RecognitionConfig.newBuilder()
+                .setSpecification(
+                    SttServiceOuterClass.RecognitionSpec.newBuilder()
+                        .setAudioEncoding(SttServiceOuterClass.RecognitionSpec.AudioEncoding.LINEAR16_PCM)
+                        .setSampleRateHertz(sampleRate.toLong())
+                        .setMaxAlternatives(1)
+                        .setPartialResults(true)
+                        .build()
+                )
+                .build()
+            latch = CountDownLatch(1)
+        }
+
+        override fun reset() {
+            throw UnsupportedOperationException("Reset was not yet implemented")
+        }
+
+        override fun acceptWaveForm(buffer: ShortArray?, nread: Int): Boolean {
+            if (closed) return false
+            val bb = ByteBuffer.allocate(nread * 2)
+            bb.asShortBuffer().put(buffer, 0, nread)
+            requestStream.onNext(
+                StreamingRecognitionRequest.newBuilder()
+                    .setAudioContent(ByteString.copyFrom(bb))
+                    .setConfig(config)
+                    .build()
+            )
+            try {
+                latch.await()
+            } catch (e: InterruptedException) {
+                e.printStackTrace()
+            }
+            return isPartialResult
+        }
+
+        override fun getResult(): String {
+            return myResult
+        }
+
+        override fun getPartialResult(): String {
+            return myPartialResult
+        }
+
+        override fun getFinalResult(): String {
+            return myFinalResult
+        }
+
+        fun close() {
+            requestStream.onCompleted()
+            closed = true
+            latch.countDown()
+            myPartialResult = ""
+            myResult = ""
+        }
+
+        /*************************** gRPC  */
+        override fun onNext(value: StreamingRecognitionResponse) {
+            Log.d("VoskServer", "Message received: $value")
+            for (chunk in value.chunksList) {
+                if (chunk.endOfUtterance) {
+                    myFinalResult = removeSpaceForLocale(chunk.getAlternatives(0).text)
+                    isPartialResult = false
+                } else if (chunk.final) {
+                    myResult = removeSpaceForLocale(chunk.getAlternatives(0).text)
+                    isPartialResult = false
+                } else {
+                    myPartialResult = removeSpaceForLocale(chunk.getAlternatives(0).text)
+                    isPartialResult = true
+                }
+                val oldLatch = latch
+                latch = CountDownLatch(1)
+                oldLatch.countDown()
+            }
+        }
+
+        override fun onError(t: Throwable) {}
+        override fun onCompleted() {}
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/languages/english/EngListA.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/english/EngListA.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/english/EngListA.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/english/EngListA.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/english/EngListA.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/core/languages/english/EngListA.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/english/EngListA.kt	(date 1707192032256)
@@ -3470,7 +3470,7 @@
     "plays",
     "bulletin",
     "ia",
-    "pt",
+    "pt-PT",
     "indicates",
     "modify",
     "oxford",
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1707382754455)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1707382754455)
@@ -0,0 +1,41 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="PreviewAnnotationInFunctionWithParameters" enabled="true" level="ERROR" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+      <option name="previewFile" value="true" />
+    </inspection_tool>
+    <inspection_tool class="PreviewApiLevelMustBeValid" enabled="true" level="ERROR" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+      <option name="previewFile" value="true" />
+    </inspection_tool>
+    <inspection_tool class="PreviewDimensionRespectsLimit" enabled="true" level="WARNING" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+      <option name="previewFile" value="true" />
+    </inspection_tool>
+    <inspection_tool class="PreviewFontScaleMustBeGreaterThanZero" enabled="true" level="ERROR" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+      <option name="previewFile" value="true" />
+    </inspection_tool>
+    <inspection_tool class="PreviewMultipleParameterProviders" enabled="true" level="ERROR" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+      <option name="previewFile" value="true" />
+    </inspection_tool>
+    <inspection_tool class="PreviewMustBeTopLevelFunction" enabled="true" level="ERROR" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+      <option name="previewFile" value="true" />
+    </inspection_tool>
+    <inspection_tool class="PreviewNeedsComposableAnnotation" enabled="true" level="ERROR" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+      <option name="previewFile" value="true" />
+    </inspection_tool>
+    <inspection_tool class="PreviewNotSupportedInUnitTestFiles" enabled="true" level="ERROR" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+      <option name="previewFile" value="true" />
+    </inspection_tool>
+    <inspection_tool class="PreviewPickerAnnotation" enabled="true" level="ERROR" enabled_by_default="true">
+      <option name="composableFile" value="true" />
+      <option name="previewFile" value="true" />
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: app/src/main/res/xml/data_extraction_rules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/xml/data_extraction_rules.xml b/app/src/main/res/xml/data_extraction_rules.xml
new file mode 100644
--- /dev/null	(date 1707217045662)
+++ b/app/src/main/res/xml/data_extraction_rules.xml	(date 1707217045662)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+   Sample data extraction rules file; uncomment and customize as necessary.
+   See https://developer.android.com/about/versions/12/backup-restore#xml-changes
+   for details.
+-->
+<data-extraction-rules>
+    <cloud-backup>
+        <include
+            domain="sharedpref"
+            path="." />
+    </cloud-backup>
+    <device-transfer>
+        <include
+            domain="sharedpref"
+            path="." />
+    </device-transfer>
+</data-extraction-rules>
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/languages/portuguese/PTListA.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/portuguese/PTListA.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/portuguese/PTListA.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/portuguese/PTListA.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/portuguese/PTListA.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/core/languages/portuguese/PTListA.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/portuguese/PTListA.kt	(date 1707192032313)
@@ -1,7 +1,7 @@
 package com.optiflowx.optikeysx.languages.portuguese
 
 val ptListA = listOf<String>(
-    "pt",
+    "pt-PT",
     "a",
     "ser",
     "e",
Index: app/src/main/java/com/optiflowx/optikeysx/AppCtx.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/AppCtx.kt b/app/src/main/java/com/optiflowx/optikeysx/AppCtx.kt
new file mode 100644
--- /dev/null	(date 1707323988057)
+++ b/app/src/main/java/com/optiflowx/optikeysx/AppCtx.kt	(date 1707323988057)
@@ -0,0 +1,40 @@
+package com.optiflowx.optikeysx
+//
+//import android.annotation.SuppressLint
+//import android.content.Context
+//import androidx.annotation.ArrayRes
+//import androidx.annotation.BoolRes
+//import androidx.annotation.IntegerRes
+//import androidx.annotation.StringRes
+//
+//@SuppressLint("StaticFieldLeak")
+//object AppCtx {
+//    @JvmStatic
+//    @SuppressLint("StaticFieldLeak") // App context
+//    var appCtx: Context? = null
+//        private set
+//
+//    @JvmStatic
+//    fun setAppCtx(context: Context) {
+//        appCtx = context.applicationContext
+//    }
+//
+//    @JvmStatic
+//    fun getStringRes(@StringRes res: Int): String {
+//        return appCtx!!.getString(res)
+//    }
+//
+//    @JvmStatic
+//    fun getIntegerRes(@IntegerRes res: Int): Int {
+//        return appCtx!!.resources.getInteger(res)
+//    }
+//
+//    @JvmStatic
+//    fun getBoolRes(@BoolRes res: Int): Boolean {
+//        return appCtx!!.resources.getBoolean(res)
+//    }
+//
+//    fun getStringArrayRes(@ArrayRes res: Int): Array<String> {
+//        return appCtx!!.resources.getStringArray(res)
+//    }
+//}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/Tools.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/Tools.kt b/app/src/main/java/com/optiflowx/optikeysx/core/Tools.kt
new file mode 100644
--- /dev/null	(date 1707342742328)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/Tools.kt	(date 1707342742328)
@@ -0,0 +1,145 @@
+package com.optiflowx.optikeysx.core
+
+import android.Manifest
+import android.app.Activity
+import android.app.NotificationChannel
+import android.app.NotificationManager
+import android.content.Context
+import android.content.pm.PackageManager
+import android.os.Build
+import android.view.inputmethod.InputMethodManager
+import androidx.compose.runtime.Immutable
+import androidx.core.app.ActivityCompat
+import androidx.core.content.ContextCompat
+import com.optiflowx.optikeysx.Constants
+import com.optiflowx.optikeysx.core.data.InstalledModelReference
+import com.optiflowx.optikeysx.core.data.VoskLocalModel
+import java.io.File
+import java.io.FileOutputStream
+import java.io.InputStream
+import java.util.Locale
+
+@Immutable
+object Tools {
+    const val VOSK_SERVER_ENABLED = false
+
+    @JvmStatic
+    fun isMicrophonePermissionGranted(activity: Activity): Boolean {
+        val permissionCheck = ContextCompat.checkSelfPermission(
+            activity.applicationContext,
+            Manifest.permission.RECORD_AUDIO
+        )
+        return permissionCheck == PackageManager.PERMISSION_GRANTED
+    }
+
+    @JvmStatic
+    fun isNotificationAccessGranted(activity: Activity): Boolean {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+            val permissionCheck = ContextCompat.checkSelfPermission(
+                activity.applicationContext, Manifest.permission.POST_NOTIFICATIONS
+            )
+
+            if (permissionCheck != PackageManager.PERMISSION_GRANTED) {
+                ActivityCompat.requestPermissions(
+                    activity, arrayOf(
+                        Manifest.permission.POST_NOTIFICATIONS
+                    ), 1
+                )
+            }
+
+            return permissionCheck == PackageManager.PERMISSION_GRANTED
+        }
+        return false
+    }
+
+    @JvmStatic
+    fun isIMEEnabled(activity: Activity): Boolean {
+        val imeManager = activity
+            .applicationContext
+            .getSystemService(Context.INPUT_METHOD_SERVICE)
+                as InputMethodManager
+
+        for (i in imeManager.enabledInputMethodList) {
+            if (i.packageName == activity.packageName) {
+                return true
+            }
+        }
+        return false
+    }
+
+//    @JvmStatic
+//    fun isKeyboardSelected(activity: Activity): Boolean {
+//        val imeManager = activity
+//            .applicationContext
+//            .getSystemService(Context.INPUT_METHOD_SERVICE)
+//                as InputMethodManager
+//
+//        val mIMS = imeManager.currentInputMethodSubtype
+//
+//        return mIMS?.extraValue == activity.packageName
+//    }
+
+    @JvmStatic
+    fun deleteModel(model: InstalledModelReference, context: Context?) {
+        val modelFile = File(model.path)
+        if (modelFile.exists()) deleteRecursive(modelFile)
+    }
+
+    @JvmStatic
+    fun deleteRecursive(fileOrDirectory: File, deleteStartingFolder: Boolean = true) {
+        if (fileOrDirectory.isDirectory) for (child in fileOrDirectory.listFiles()!!)
+            deleteRecursive(child, true)
+        if (deleteStartingFolder) {
+            fileOrDirectory.delete()
+        }
+    }
+
+    fun getVoskModelFromReference(
+        reference: InstalledModelReference
+    ): VoskLocalModel? {
+        val localeFolder = File(reference.path).parentFile ?: return null
+        val locale = Locale.forLanguageTag(localeFolder.name)
+        for (modelFolder in localeFolder.listFiles()!!) {
+            if (!modelFolder.isDirectory) continue
+            val name = modelFolder.name
+            return VoskLocalModel(modelFolder.absolutePath, locale, name)
+        }
+        return null
+    }
+
+    fun createNotificationChannel(context: Context) {
+        // Create the NotificationChannel, but only on API 26+ because
+        // the NotificationChannel class is new and not in the support library
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            val name: CharSequence = "Speech Recognition Model Download"
+            val description = "Speech Recognition Model Download Notifications"
+            val importance = NotificationManager.IMPORTANCE_LOW
+            val channel = NotificationChannel(Constants.DOWNLOADER_CHANNEL_ID, name, importance)
+            channel.description = description
+            // Register the channel with the system; you can't change the importance
+            // or other notification behaviors after this
+            val notificationManager = context.getSystemService(
+                NotificationManager::class.java
+            )
+            notificationManager.createNotificationChannel(channel)
+        }
+    }
+
+    fun copyStreamToFile(inputStream: InputStream, outputFile: File) {
+        if (!outputFile.parentFile!!.exists()) {
+            outputFile.parentFile!!.mkdirs()
+        }
+        inputStream.use { input ->
+            val outputStream = FileOutputStream(outputFile)
+            outputStream.use { output ->
+                val buffer = ByteArray(4 * 1024) // buffer size
+                while (true) {
+                    val byteCount = input.read(buffer)
+                    if (byteCount < 0) break
+                    output.write(buffer, 0, byteCount)
+                }
+                output.flush()
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/Constants.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/Constants.kt b/app/src/main/java/com/optiflowx/optikeysx/Constants.kt
new file mode 100644
--- /dev/null	(date 1707225841704)
+++ b/app/src/main/java/com/optiflowx/optikeysx/Constants.kt	(date 1707225841704)
@@ -0,0 +1,55 @@
+package com.optiflowx.optikeysx
+
+import android.content.Context
+import android.os.Environment
+import java.io.File
+import java.util.Locale
+
+object Constants {
+    @JvmField
+    var DOWNLOADER_CHANNEL_ID = "downloader"
+    private fun getCacheDir(context: Context): File {
+        return if (Environment.isExternalStorageEmulated() || !Environment.isExternalStorageRemovable()) {
+            context.externalCacheDir!!
+        } else {
+            context.cacheDir
+        }
+    }
+
+    private fun getFilesDir(context: Context): File {
+        return if (Environment.isExternalStorageEmulated() || !Environment.isExternalStorageRemovable()) {
+            context.getExternalFilesDir(null)!!
+        } else {
+            context.filesDir
+        }
+    }
+
+    private fun getTempDir(context: Context): File {
+        return File(getFilesDir(context).absolutePath, "Temp")
+    }
+
+    @JvmStatic
+    fun getTemporaryDownloadLocation(context: Context, filename: String): File {
+        val dir = File(
+            getTempDir(context).absolutePath, "ModelZips"
+        )
+        return File(dir, filename)
+    }
+
+    @JvmStatic
+    fun getTemporaryUnzipLocation(context: Context): File {
+        return File(File(getTempDir(context), "TempUnzip"), "Folder")
+    }
+
+    @JvmStatic
+    fun getModelsDirectory(context: Context): File {
+        return File(getFilesDir(context).absolutePath, "Models")
+    }
+
+    @JvmStatic
+    fun getDirectoryForModel(context: Context, locale: Locale): File {
+        val dataFolder = getModelsDirectory(context)
+        val folderName = locale.toLanguageTag()
+        return File(dataFolder, folderName)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/views/emoji/EmojiSearchView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.emoji\r\n\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.BoxScope\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.text.KeyboardOptions\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.focus.FocusRequester\r\nimport androidx.compose.ui.focus.focusRequester\r\nimport androidx.compose.ui.focus.onFocusChanged\r\nimport androidx.compose.ui.text.PlatformTextStyle\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.input.ImeAction\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\nimport io.github.alexzhirkevich.cupertino.CupertinoIcon\r\nimport io.github.alexzhirkevich.cupertino.CupertinoSearchTextField\r\nimport io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi\r\nimport io.github.alexzhirkevich.cupertino.icons.CupertinoIcons\r\nimport io.github.alexzhirkevich.cupertino.icons.outlined.MagnifyingGlass\r\nimport io.github.alexzhirkevich.cupertino.rememberCupertinoSearchTextFieldState\r\nimport io.github.alexzhirkevich.cupertino.theme.CupertinoColors\r\nimport io.github.alexzhirkevich.cupertino.theme.systemGray\r\n\r\n//@Preview\r\n@OptIn(ExperimentalCupertinoApi::class)\r\n@Composable\r\nfun EmojiSearchView(viewModel: KeyboardViewModel, textSize: Float, searchIconSize: Int, boxScope: BoxScope) {\r\n\r\n    val (text, onTextChange) = remember { mutableStateOf(\"\") }\r\n    val state = rememberCupertinoSearchTextFieldState()\r\n    val focusRequester = remember { FocusRequester() }\r\n\r\n    val fontType  by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n\r\n    LaunchedEffect(state.isFocused) {\r\n        if (state.isFocused) {\r\n            focusRequester.requestFocus().let {\r\n                focusRequester.captureFocus()\r\n            }\r\n        } else focusRequester.freeFocus()\r\n    }\r\n\r\n    \r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n\r\n    boxScope.apply {\r\n        CupertinoSearchTextField(\r\n            value = text,\r\n            onValueChange = onTextChange,\r\n            state = state,\r\n            modifier = Modifier\r\n                .padding(vertical = 2.5.dp)\r\n                .matchParentSize()\r\n                .focusRequester(focusRequester)\r\n                .onFocusChanged { focusState -> viewModel.updateIsEmojiSearch(focusState.isFocused) },\r\n            placeholder = {\r\n                Text(\r\n                    keyboardLocale.searchEmoji(),\r\n                    style = TextStyle(\r\n                        color = CupertinoColors.systemGray(isSystemInDarkTheme()),\r\n                        fontFamily = appFontType(fontType),\r\n                        fontSize = TextUnit(textSize, TextUnitType.Sp).nonScaledSp,\r\n                        platformStyle = PlatformTextStyle(includeFontPadding = false),\r\n                    )\r\n                )\r\n            },\r\n            textStyle = TextStyle(\r\n                color = MaterialTheme.colorScheme.primary,\r\n                fontFamily = appFontType(fontType),\r\n                fontSize = TextUnit(textSize, TextUnitType.Sp).nonScaledSp,\r\n                platformStyle = PlatformTextStyle(includeFontPadding = false),\r\n            ),\r\n            leadingIcon = {\r\n                CupertinoIcon(\r\n                    CupertinoIcons.Outlined.MagnifyingGlass,\r\n                    contentDescription = \"icon\",\r\n                    tint = CupertinoColors.systemGray(isSystemInDarkTheme()),\r\n                    modifier = Modifier.height(searchIconSize.dp)\r\n                )\r\n            },\r\n            keyboardOptions = KeyboardOptions(\r\n                imeAction = ImeAction.Search\r\n            )\r\n        )\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/emoji/EmojiSearchView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/emoji/EmojiSearchView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/emoji/EmojiSearchView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/emoji/EmojiSearchView.kt	(date 1707381185682)
@@ -10,7 +10,6 @@
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.LaunchedEffect
 import androidx.compose.runtime.collectAsState
-import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
 import androidx.compose.ui.Modifier
@@ -23,12 +22,11 @@
 import androidx.compose.ui.unit.TextUnit
 import androidx.compose.ui.unit.TextUnitType
 import androidx.compose.ui.unit.dp
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
 import com.optiflowx.optikeysx.core.utils.KeyboardLocale
 import com.optiflowx.optikeysx.core.utils.appFontType
 import com.optiflowx.optikeysx.core.utils.nonScaledSp
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 import io.github.alexzhirkevich.cupertino.CupertinoIcon
 import io.github.alexzhirkevich.cupertino.CupertinoSearchTextField
 import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
@@ -47,7 +45,9 @@
     val state = rememberCupertinoSearchTextFieldState()
     val focusRequester = remember { FocusRequester() }
 
-    val fontType  by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
+    val fontType = viewModel.prefs.keyboardFontType.observeAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
+    val keyboardLocale = KeyboardLocale(locale)
 
     LaunchedEffect(state.isFocused) {
         if (state.isFocused) {
@@ -57,10 +57,6 @@
         } else focusRequester.freeFocus()
     }
 
-    
-    val locale = viewModel.locale.collectAsState().value
-    val keyboardLocale = KeyboardLocale(locale)
-
     boxScope.apply {
         CupertinoSearchTextField(
             value = text,
Index: app/src/main/java/com/optiflowx/optikeysx/views/emoji/EmojiKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.emoji\r\n\r\nimport androidx.compose.foundation.ExperimentalFoundationApi\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.grid.GridCells\r\nimport androidx.compose.foundation.lazy.grid.LazyVerticalGrid\r\nimport androidx.compose.foundation.pager.HorizontalPager\r\nimport androidx.compose.foundation.pager.PageSize\r\nimport androidx.compose.foundation.pager.rememberPagerState\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.livedata.observeAsState\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.text.PlatformTextStyle\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.core.model.frequentlyUsedEmoji\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.core.utils.handleTitle\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\nimport io.github.alexzhirkevich.cupertino.theme.CupertinoColors\r\nimport io.github.alexzhirkevich.cupertino.theme.systemGray\r\n\r\n@OptIn(ExperimentalFoundationApi::class)\r\n@Composable\r\nfun EmojiKeyboardView(\r\n    viewModel: KeyboardViewModel,\r\n    viewWidth: Dp,\r\n    viewportHeight: Dp = 230.dp,\r\n    cellCount: Int = 6,\r\n) {\r\n    \r\n    val defaultViewPort = (viewWidth)\r\n    val freqViewPort = (viewWidth * 0.76f)\r\n    val locale = viewModel.locale.collectAsState().value\r\n//    val isESearch = viewModel.isEmojiSearch.collectAsState()\r\n    val frequentEmojis = viewModel.frequentlyUsedEmojis.observeAsState().value?.reversed()\r\n    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n\r\n    val emojiViewPager = arrayListOf(\r\n        hashMapOf(\"Frequently Used\" to listOf()),\r\n        hashMapOf(\"Smileys & People\" to frequentlyUsedEmoji.smilesAndPeople),\r\n        hashMapOf(\"Animals & Nature\" to frequentlyUsedEmoji.animalsAndNature),\r\n        hashMapOf(\"Food & Drink\" to frequentlyUsedEmoji.foodAndDrinks),\r\n        hashMapOf(\"Activities\" to frequentlyUsedEmoji.activities),\r\n        hashMapOf(\"Travel & Places\" to frequentlyUsedEmoji.travelAndPlaces),\r\n        hashMapOf(\"Objects\" to frequentlyUsedEmoji.objects),\r\n        hashMapOf(\"Symbols\" to frequentlyUsedEmoji.symbols),\r\n        hashMapOf(\"Flags\" to frequentlyUsedEmoji.flags),\r\n    )\r\n    val pagerState = rememberPagerState(pageCount = { emojiViewPager.size }, initialPage = 0)\r\n\r\n//    if (isESearch.value) StandardKeyboardView(viewModel, viewWidth)\r\n//    else\r\n    Column(\r\n        Modifier.width(viewWidth)\r\n    ) {\r\n        HorizontalPager(\r\n            state = pagerState,\r\n            pageSpacing = 10.dp,\r\n            pageSize = PageSize.Fixed(if (pagerState.currentPage == 0) freqViewPort else defaultViewPort),\r\n            modifier = Modifier.height(viewportHeight),\r\n        ) { page ->\r\n            emojiViewPager[page].forEach { (title, emojis) ->\r\n                Column {\r\n                    Text(\r\n                        text = handleTitle(title, locale).uppercase(),\r\n                        modifier = Modifier.padding(start = 15.dp, bottom = 3.dp),\r\n                        style = TextStyle(\r\n                            fontFamily = appFontType(fontType),\r\n                            color = CupertinoColors.systemGray(isSystemInDarkTheme()),\r\n                            fontSize = TextUnit(13f, TextUnitType.Sp).nonScaledSp,\r\n                            platformStyle = PlatformTextStyle(includeFontPadding = false)\r\n                        )\r\n                    )\r\n\r\n                    Surface(\r\n                        modifier = Modifier.height((viewportHeight.value - 20).dp),\r\n                        color = Color.Transparent\r\n                    ) {\r\n                        LazyVerticalGrid(columns = GridCells.Fixed(cellCount)) {\r\n                            if (page == 0 && frequentEmojis != null) {\r\n                                frequentEmojis.forEach { data ->\r\n                                    item(\"Key:$data\") {\r\n                                        EmojiItem(data.emoji, viewModel, title)\r\n                                    }\r\n                                }\r\n                            } else emojis.forEach { emoji ->\r\n                                item(\"$page$emoji\") {\r\n                                    EmojiItem(emoji, viewModel, title)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        EmojiPagerActionView(pagerState, viewModel)\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/emoji/EmojiKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/emoji/EmojiKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/emoji/EmojiKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/emoji/EmojiKeyboardView.kt	(date 1707381185693)
@@ -15,7 +15,6 @@
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.collectAsState
-import androidx.compose.runtime.getValue
 import androidx.compose.runtime.livedata.observeAsState
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
@@ -26,12 +25,11 @@
 import androidx.compose.ui.unit.TextUnitType
 import androidx.compose.ui.unit.dp
 import com.optiflowx.optikeysx.core.model.frequentlyUsedEmoji
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
 import com.optiflowx.optikeysx.core.utils.appFontType
 import com.optiflowx.optikeysx.core.utils.handleTitle
 import com.optiflowx.optikeysx.core.utils.nonScaledSp
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 import io.github.alexzhirkevich.cupertino.theme.CupertinoColors
 import io.github.alexzhirkevich.cupertino.theme.systemGray
 
@@ -46,10 +44,10 @@
     
     val defaultViewPort = (viewWidth)
     val freqViewPort = (viewWidth * 0.76f)
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
 //    val isESearch = viewModel.isEmojiSearch.collectAsState()
     val frequentEmojis = viewModel.frequentlyUsedEmojis.observeAsState().value?.reversed()
-    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
+    val fontType = viewModel.prefs.keyboardFontType.observeAsState().value
 
     val emojiViewPager = arrayListOf(
         hashMapOf("Frequently Used" to listOf()),
Index: app/src/main/java/vosk/stt/v1/SttServiceGrpc.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/vosk/stt/v1/SttServiceGrpc.java b/app/src/main/java/vosk/stt/v1/SttServiceGrpc.java
new file mode 100644
--- /dev/null	(date 1707322760311)
+++ b/app/src/main/java/vosk/stt/v1/SttServiceGrpc.java	(date 1707322760311)
@@ -0,0 +1,223 @@
+package vosk.stt.v1;
+
+import static io.grpc.MethodDescriptor.generateFullMethodName;
+
+/**
+ */
+@javax.annotation.Generated(
+    value = "by gRPC proto compiler (version 1.52.0)",
+    comments = "Source: stt_service.proto")
+@io.grpc.stub.annotations.GrpcGenerated
+public final class SttServiceGrpc {
+
+  private SttServiceGrpc() {}
+
+  public static final String SERVICE_NAME = "vosk.stt.v1.SttService";
+
+  // Static method descriptors that strictly reflect the proto.
+  private static volatile io.grpc.MethodDescriptor<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest,
+      vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse> getStreamingRecognizeMethod;
+
+  @io.grpc.stub.annotations.RpcMethod(
+      fullMethodName = SERVICE_NAME + '/' + "StreamingRecognize",
+      requestType = vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest.class,
+      responseType = vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse.class,
+      methodType = io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
+  public static io.grpc.MethodDescriptor<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest,
+      vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse> getStreamingRecognizeMethod() {
+    io.grpc.MethodDescriptor<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest, vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse> getStreamingRecognizeMethod;
+    if ((getStreamingRecognizeMethod = SttServiceGrpc.getStreamingRecognizeMethod) == null) {
+      synchronized (SttServiceGrpc.class) {
+        if ((getStreamingRecognizeMethod = SttServiceGrpc.getStreamingRecognizeMethod) == null) {
+          SttServiceGrpc.getStreamingRecognizeMethod = getStreamingRecognizeMethod =
+              io.grpc.MethodDescriptor.<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest, vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse>newBuilder()
+              .setType(io.grpc.MethodDescriptor.MethodType.BIDI_STREAMING)
+              .setFullMethodName(generateFullMethodName(SERVICE_NAME, "StreamingRecognize"))
+              .setSampledToLocalTracing(true)
+              .setRequestMarshaller(io.grpc.protobuf.lite.ProtoLiteUtils.marshaller(
+                  vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest.getDefaultInstance()))
+              .setResponseMarshaller(io.grpc.protobuf.lite.ProtoLiteUtils.marshaller(
+                  vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse.getDefaultInstance()))
+              .build();
+        }
+      }
+    }
+    return getStreamingRecognizeMethod;
+  }
+
+  /**
+   * Creates a new async stub that supports all call types for the service
+   */
+  public static SttServiceStub newStub(io.grpc.Channel channel) {
+    io.grpc.stub.AbstractStub.StubFactory<SttServiceStub> factory =
+      new io.grpc.stub.AbstractStub.StubFactory<SttServiceStub>() {
+        @Override
+        public SttServiceStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
+          return new SttServiceStub(channel, callOptions);
+        }
+      };
+    return SttServiceStub.newStub(factory, channel);
+  }
+
+  /**
+   * Creates a new blocking-style stub that supports unary and streaming output calls on the service
+   */
+  public static SttServiceBlockingStub newBlockingStub(
+      io.grpc.Channel channel) {
+    io.grpc.stub.AbstractStub.StubFactory<SttServiceBlockingStub> factory =
+      new io.grpc.stub.AbstractStub.StubFactory<SttServiceBlockingStub>() {
+        @Override
+        public SttServiceBlockingStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
+          return new SttServiceBlockingStub(channel, callOptions);
+        }
+      };
+    return SttServiceBlockingStub.newStub(factory, channel);
+  }
+
+  /**
+   * Creates a new ListenableFuture-style stub that supports unary calls on the service
+   */
+  public static SttServiceFutureStub newFutureStub(
+      io.grpc.Channel channel) {
+    io.grpc.stub.AbstractStub.StubFactory<SttServiceFutureStub> factory =
+      new io.grpc.stub.AbstractStub.StubFactory<SttServiceFutureStub>() {
+        @Override
+        public SttServiceFutureStub newStub(io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
+          return new SttServiceFutureStub(channel, callOptions);
+        }
+      };
+    return SttServiceFutureStub.newStub(factory, channel);
+  }
+
+  /**
+   */
+  public static abstract class SttServiceImplBase implements io.grpc.BindableService {
+
+    /**
+     */
+    public io.grpc.stub.StreamObserver<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest> streamingRecognize(
+        io.grpc.stub.StreamObserver<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse> responseObserver) {
+      return io.grpc.stub.ServerCalls.asyncUnimplementedStreamingCall(getStreamingRecognizeMethod(), responseObserver);
+    }
+
+    @Override public final io.grpc.ServerServiceDefinition bindService() {
+      return io.grpc.ServerServiceDefinition.builder(getServiceDescriptor())
+          .addMethod(
+            getStreamingRecognizeMethod(),
+            io.grpc.stub.ServerCalls.asyncBidiStreamingCall(
+              new MethodHandlers<
+                vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest,
+                vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse>(
+                  this, METHODID_STREAMING_RECOGNIZE)))
+          .build();
+    }
+  }
+
+  /**
+   */
+  public static final class SttServiceStub extends io.grpc.stub.AbstractAsyncStub<SttServiceStub> {
+    private SttServiceStub(
+        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
+      super(channel, callOptions);
+    }
+
+    @Override
+    protected SttServiceStub build(
+        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
+      return new SttServiceStub(channel, callOptions);
+    }
+
+    /**
+     */
+    public io.grpc.stub.StreamObserver<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest> streamingRecognize(
+        io.grpc.stub.StreamObserver<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse> responseObserver) {
+      return io.grpc.stub.ClientCalls.asyncBidiStreamingCall(
+          getChannel().newCall(getStreamingRecognizeMethod(), getCallOptions()), responseObserver);
+    }
+  }
+
+  /**
+   */
+  public static final class SttServiceBlockingStub extends io.grpc.stub.AbstractBlockingStub<SttServiceBlockingStub> {
+    private SttServiceBlockingStub(
+        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
+      super(channel, callOptions);
+    }
+
+    @Override
+    protected SttServiceBlockingStub build(
+        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
+      return new SttServiceBlockingStub(channel, callOptions);
+    }
+  }
+
+  /**
+   */
+  public static final class SttServiceFutureStub extends io.grpc.stub.AbstractFutureStub<SttServiceFutureStub> {
+    private SttServiceFutureStub(
+        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
+      super(channel, callOptions);
+    }
+
+    @Override
+    protected SttServiceFutureStub build(
+        io.grpc.Channel channel, io.grpc.CallOptions callOptions) {
+      return new SttServiceFutureStub(channel, callOptions);
+    }
+  }
+
+  private static final int METHODID_STREAMING_RECOGNIZE = 0;
+
+  private static final class MethodHandlers<Req, Resp> implements
+      io.grpc.stub.ServerCalls.UnaryMethod<Req, Resp>,
+      io.grpc.stub.ServerCalls.ServerStreamingMethod<Req, Resp>,
+      io.grpc.stub.ServerCalls.ClientStreamingMethod<Req, Resp>,
+      io.grpc.stub.ServerCalls.BidiStreamingMethod<Req, Resp> {
+    private final SttServiceImplBase serviceImpl;
+    private final int methodId;
+
+    MethodHandlers(SttServiceImplBase serviceImpl, int methodId) {
+      this.serviceImpl = serviceImpl;
+      this.methodId = methodId;
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public void invoke(Req request, io.grpc.stub.StreamObserver<Resp> responseObserver) {
+      switch (methodId) {
+        default:
+          throw new AssertionError();
+      }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public io.grpc.stub.StreamObserver<Req> invoke(
+        io.grpc.stub.StreamObserver<Resp> responseObserver) {
+      switch (methodId) {
+        case METHODID_STREAMING_RECOGNIZE:
+          return (io.grpc.stub.StreamObserver<Req>) serviceImpl.streamingRecognize(
+              (io.grpc.stub.StreamObserver<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse>) responseObserver);
+        default:
+          throw new AssertionError();
+      }
+    }
+  }
+
+  private static volatile io.grpc.ServiceDescriptor serviceDescriptor;
+
+  public static io.grpc.ServiceDescriptor getServiceDescriptor() {
+    io.grpc.ServiceDescriptor result = serviceDescriptor;
+    if (result == null) {
+      synchronized (SttServiceGrpc.class) {
+        result = serviceDescriptor;
+        if (result == null) {
+          serviceDescriptor = result = io.grpc.ServiceDescriptor.newBuilder(SERVICE_NAME)
+              .addMethod(getStreamingRecognizeMethod())
+              .build();
+        }
+      }
+    }
+    return result;
+  }
+}
Index: app/src/main/java/vosk/stt/v1/SttServiceOuterClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/vosk/stt/v1/SttServiceOuterClass.java b/app/src/main/java/vosk/stt/v1/SttServiceOuterClass.java
new file mode 100644
--- /dev/null	(date 1707322760331)
+++ b/app/src/main/java/vosk/stt/v1/SttServiceOuterClass.java	(date 1707322760331)
@@ -0,0 +1,4144 @@
+// Generated by the protocol buffer compiler.  DO NOT EDIT!
+// source: stt_service.proto
+
+package vosk.stt.v1;
+
+public final class SttServiceOuterClass {
+  private SttServiceOuterClass() {}
+  public static void registerAllExtensions(
+      com.google.protobuf.ExtensionRegistryLite registry) {
+  }
+  public interface StreamingRecognitionRequestOrBuilder extends
+      // @@protoc_insertion_point(interface_extends:vosk.stt.v1.StreamingRecognitionRequest)
+      com.google.protobuf.MessageLiteOrBuilder {
+
+    /**
+     * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+     * @return Whether the config field is set.
+     */
+    boolean hasConfig();
+    /**
+     * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+     * @return The config.
+     */
+    vosk.stt.v1.SttServiceOuterClass.RecognitionConfig getConfig();
+
+    /**
+     * <code>bytes audio_content = 2;</code>
+     * @return Whether the audioContent field is set.
+     */
+    boolean hasAudioContent();
+    /**
+     * <code>bytes audio_content = 2;</code>
+     * @return The audioContent.
+     */
+    com.google.protobuf.ByteString getAudioContent();
+
+    public vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest.StreamingRequestCase getStreamingRequestCase();
+  }
+  /**
+   * Protobuf type {@code vosk.stt.v1.StreamingRecognitionRequest}
+   */
+  public  static final class StreamingRecognitionRequest extends
+      com.google.protobuf.GeneratedMessageLite<
+          StreamingRecognitionRequest, StreamingRecognitionRequest.Builder> implements
+      // @@protoc_insertion_point(message_implements:vosk.stt.v1.StreamingRecognitionRequest)
+      StreamingRecognitionRequestOrBuilder {
+    private StreamingRecognitionRequest() {
+    }
+    private int streamingRequestCase_ = 0;
+    private Object streamingRequest_;
+    public enum StreamingRequestCase {
+      CONFIG(1),
+      AUDIO_CONTENT(2),
+      STREAMINGREQUEST_NOT_SET(0);
+      private final int value;
+      private StreamingRequestCase(int value) {
+        this.value = value;
+      }
+      /**
+       * @deprecated Use {@link #forNumber(int)} instead.
+       */
+      @Deprecated
+      public static StreamingRequestCase valueOf(int value) {
+        return forNumber(value);
+      }
+
+      public static StreamingRequestCase forNumber(int value) {
+        switch (value) {
+          case 1: return CONFIG;
+          case 2: return AUDIO_CONTENT;
+          case 0: return STREAMINGREQUEST_NOT_SET;
+          default: return null;
+        }
+      }
+      public int getNumber() {
+        return this.value;
+      }
+    };
+
+    @Override
+    public StreamingRequestCase
+    getStreamingRequestCase() {
+      return StreamingRequestCase.forNumber(
+          streamingRequestCase_);
+    }
+
+    private void clearStreamingRequest() {
+      streamingRequestCase_ = 0;
+      streamingRequest_ = null;
+    }
+
+    public static final int CONFIG_FIELD_NUMBER = 1;
+    /**
+     * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+     */
+    @Override
+    public boolean hasConfig() {
+      return streamingRequestCase_ == 1;
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+     */
+    @Override
+    public vosk.stt.v1.SttServiceOuterClass.RecognitionConfig getConfig() {
+      if (streamingRequestCase_ == 1) {
+         return (vosk.stt.v1.SttServiceOuterClass.RecognitionConfig) streamingRequest_;
+      }
+      return vosk.stt.v1.SttServiceOuterClass.RecognitionConfig.getDefaultInstance();
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+     */
+    private void setConfig(vosk.stt.v1.SttServiceOuterClass.RecognitionConfig value) {
+      value.getClass();
+  streamingRequest_ = value;
+      streamingRequestCase_ = 1;
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+     */
+    private void mergeConfig(vosk.stt.v1.SttServiceOuterClass.RecognitionConfig value) {
+      value.getClass();
+  if (streamingRequestCase_ == 1 &&
+          streamingRequest_ != vosk.stt.v1.SttServiceOuterClass.RecognitionConfig.getDefaultInstance()) {
+        streamingRequest_ = vosk.stt.v1.SttServiceOuterClass.RecognitionConfig.newBuilder((vosk.stt.v1.SttServiceOuterClass.RecognitionConfig) streamingRequest_)
+            .mergeFrom(value).buildPartial();
+      } else {
+        streamingRequest_ = value;
+      }
+      streamingRequestCase_ = 1;
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+     */
+    private void clearConfig() {
+      if (streamingRequestCase_ == 1) {
+        streamingRequestCase_ = 0;
+        streamingRequest_ = null;
+      }
+    }
+
+    public static final int AUDIO_CONTENT_FIELD_NUMBER = 2;
+    /**
+     * <code>bytes audio_content = 2;</code>
+     * @return Whether the audioContent field is set.
+     */
+    @Override
+    public boolean hasAudioContent() {
+      return streamingRequestCase_ == 2;
+    }
+    /**
+     * <code>bytes audio_content = 2;</code>
+     * @return The audioContent.
+     */
+    @Override
+    public com.google.protobuf.ByteString getAudioContent() {
+      if (streamingRequestCase_ == 2) {
+        return (com.google.protobuf.ByteString) streamingRequest_;
+      }
+      return com.google.protobuf.ByteString.EMPTY;
+    }
+    /**
+     * <code>bytes audio_content = 2;</code>
+     * @param value The audioContent to set.
+     */
+    private void setAudioContent(com.google.protobuf.ByteString value) {
+      Class<?> valueClass = value.getClass();
+  streamingRequestCase_ = 2;
+      streamingRequest_ = value;
+    }
+    /**
+     * <code>bytes audio_content = 2;</code>
+     */
+    private void clearAudioContent() {
+      if (streamingRequestCase_ == 2) {
+        streamingRequestCase_ = 0;
+        streamingRequest_ = null;
+      }
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseFrom(
+        java.nio.ByteBuffer data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseFrom(
+        java.nio.ByteBuffer data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseFrom(
+        com.google.protobuf.ByteString data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseFrom(
+        com.google.protobuf.ByteString data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseFrom(byte[] data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseFrom(
+        byte[] data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseDelimitedFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseDelimitedFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseFrom(
+        com.google.protobuf.CodedInputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest parseFrom(
+        com.google.protobuf.CodedInputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static Builder newBuilder() {
+      return (Builder) DEFAULT_INSTANCE.createBuilder();
+    }
+    public static Builder newBuilder(vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest prototype) {
+      return DEFAULT_INSTANCE.createBuilder(prototype);
+    }
+
+    /**
+     * Protobuf type {@code vosk.stt.v1.StreamingRecognitionRequest}
+     */
+    public static final class Builder extends
+        com.google.protobuf.GeneratedMessageLite.Builder<
+          vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest, Builder> implements
+        // @@protoc_insertion_point(builder_implements:vosk.stt.v1.StreamingRecognitionRequest)
+        vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequestOrBuilder {
+      // Construct using vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest.newBuilder()
+      private Builder() {
+        super(DEFAULT_INSTANCE);
+      }
+
+      @Override
+      public StreamingRequestCase
+          getStreamingRequestCase() {
+        return instance.getStreamingRequestCase();
+      }
+
+      public Builder clearStreamingRequest() {
+        copyOnWrite();
+        instance.clearStreamingRequest();
+        return this;
+      }
+
+
+      /**
+       * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+       */
+      @Override
+      public boolean hasConfig() {
+        return instance.hasConfig();
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+       */
+      @Override
+      public vosk.stt.v1.SttServiceOuterClass.RecognitionConfig getConfig() {
+        return instance.getConfig();
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+       */
+      public Builder setConfig(vosk.stt.v1.SttServiceOuterClass.RecognitionConfig value) {
+        copyOnWrite();
+        instance.setConfig(value);
+        return this;
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+       */
+      public Builder setConfig(
+          vosk.stt.v1.SttServiceOuterClass.RecognitionConfig.Builder builderForValue) {
+        copyOnWrite();
+        instance.setConfig(builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+       */
+      public Builder mergeConfig(vosk.stt.v1.SttServiceOuterClass.RecognitionConfig value) {
+        copyOnWrite();
+        instance.mergeConfig(value);
+        return this;
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionConfig config = 1;</code>
+       */
+      public Builder clearConfig() {
+        copyOnWrite();
+        instance.clearConfig();
+        return this;
+      }
+
+      /**
+       * <code>bytes audio_content = 2;</code>
+       * @return Whether the audioContent field is set.
+       */
+      @Override
+      public boolean hasAudioContent() {
+        return instance.hasAudioContent();
+      }
+      /**
+       * <code>bytes audio_content = 2;</code>
+       * @return The audioContent.
+       */
+      @Override
+      public com.google.protobuf.ByteString getAudioContent() {
+        return instance.getAudioContent();
+      }
+      /**
+       * <code>bytes audio_content = 2;</code>
+       * @param value The audioContent to set.
+       * @return This builder for chaining.
+       */
+      public Builder setAudioContent(com.google.protobuf.ByteString value) {
+        copyOnWrite();
+        instance.setAudioContent(value);
+        return this;
+      }
+      /**
+       * <code>bytes audio_content = 2;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearAudioContent() {
+        copyOnWrite();
+        instance.clearAudioContent();
+        return this;
+      }
+
+      // @@protoc_insertion_point(builder_scope:vosk.stt.v1.StreamingRecognitionRequest)
+    }
+    @Override
+    @SuppressWarnings({"unchecked", "fallthrough"})
+    protected final Object dynamicMethod(
+        MethodToInvoke method,
+        Object arg0, Object arg1) {
+      switch (method) {
+        case NEW_MUTABLE_INSTANCE: {
+          return new vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest();
+        }
+        case NEW_BUILDER: {
+          return new Builder();
+        }
+        case BUILD_MESSAGE_INFO: {
+            Object[] objects = new Object[] {
+              "streamingRequest_",
+              "streamingRequestCase_",
+              vosk.stt.v1.SttServiceOuterClass.RecognitionConfig.class,
+            };
+            String info =
+                "\u0000\u0002\u0001\u0000\u0001\u0002\u0002\u0000\u0000\u0000\u0001<\u0000\u0002=" +
+                "\u0000";
+            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
+        }
+        // fall through
+        case GET_DEFAULT_INSTANCE: {
+          return DEFAULT_INSTANCE;
+        }
+        case GET_PARSER: {
+          com.google.protobuf.Parser<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest> parser = PARSER;
+          if (parser == null) {
+            synchronized (vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest.class) {
+              parser = PARSER;
+              if (parser == null) {
+                parser =
+                    new DefaultInstanceBasedParser<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest>(
+                        DEFAULT_INSTANCE);
+                PARSER = parser;
+              }
+            }
+          }
+          return parser;
+      }
+      case GET_MEMOIZED_IS_INITIALIZED: {
+        return (byte) 1;
+      }
+      case SET_MEMOIZED_IS_INITIALIZED: {
+        return null;
+      }
+      }
+      throw new UnsupportedOperationException();
+    }
+
+
+    // @@protoc_insertion_point(class_scope:vosk.stt.v1.StreamingRecognitionRequest)
+    private static final vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest DEFAULT_INSTANCE;
+    static {
+      StreamingRecognitionRequest defaultInstance = new StreamingRecognitionRequest();
+      // New instances are implicitly immutable so no need to make
+      // immutable.
+      DEFAULT_INSTANCE = defaultInstance;
+      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
+        StreamingRecognitionRequest.class, defaultInstance);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionRequest getDefaultInstance() {
+      return DEFAULT_INSTANCE;
+    }
+
+    private static volatile com.google.protobuf.Parser<StreamingRecognitionRequest> PARSER;
+
+    public static com.google.protobuf.Parser<StreamingRecognitionRequest> parser() {
+      return DEFAULT_INSTANCE.getParserForType();
+    }
+  }
+
+  public interface StreamingRecognitionResponseOrBuilder extends
+      // @@protoc_insertion_point(interface_extends:vosk.stt.v1.StreamingRecognitionResponse)
+      com.google.protobuf.MessageLiteOrBuilder {
+
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    java.util.List<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk> 
+        getChunksList();
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk getChunks(int index);
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    int getChunksCount();
+  }
+  /**
+   * Protobuf type {@code vosk.stt.v1.StreamingRecognitionResponse}
+   */
+  public  static final class StreamingRecognitionResponse extends
+      com.google.protobuf.GeneratedMessageLite<
+          StreamingRecognitionResponse, StreamingRecognitionResponse.Builder> implements
+      // @@protoc_insertion_point(message_implements:vosk.stt.v1.StreamingRecognitionResponse)
+      StreamingRecognitionResponseOrBuilder {
+    private StreamingRecognitionResponse() {
+      chunks_ = emptyProtobufList();
+    }
+    public static final int CHUNKS_FIELD_NUMBER = 1;
+    private com.google.protobuf.Internal.ProtobufList<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk> chunks_;
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    @Override
+    public java.util.List<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk> getChunksList() {
+      return chunks_;
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    public java.util.List<? extends vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunkOrBuilder> 
+        getChunksOrBuilderList() {
+      return chunks_;
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    @Override
+    public int getChunksCount() {
+      return chunks_.size();
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    @Override
+    public vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk getChunks(int index) {
+      return chunks_.get(index);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    public vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunkOrBuilder getChunksOrBuilder(
+        int index) {
+      return chunks_.get(index);
+    }
+    private void ensureChunksIsMutable() {
+      com.google.protobuf.Internal.ProtobufList<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk> tmp = chunks_;
+      if (!tmp.isModifiable()) {
+        chunks_ =
+            mutableCopy(tmp);
+       }
+    }
+
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    private void setChunks(
+        int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk value) {
+      value.getClass();
+  ensureChunksIsMutable();
+      chunks_.set(index, value);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    private void addChunks(vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk value) {
+      value.getClass();
+  ensureChunksIsMutable();
+      chunks_.add(value);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    private void addChunks(
+        int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk value) {
+      value.getClass();
+  ensureChunksIsMutable();
+      chunks_.add(index, value);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    private void addAllChunks(
+        Iterable<? extends vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk> values) {
+      ensureChunksIsMutable();
+      addAll(
+          values, chunks_);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    private void clearChunks() {
+      chunks_ = emptyProtobufList();
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+     */
+    private void removeChunks(int index) {
+      ensureChunksIsMutable();
+      chunks_.remove(index);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseFrom(
+        java.nio.ByteBuffer data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseFrom(
+        java.nio.ByteBuffer data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseFrom(
+        com.google.protobuf.ByteString data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseFrom(
+        com.google.protobuf.ByteString data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseFrom(byte[] data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseFrom(
+        byte[] data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseDelimitedFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseDelimitedFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseFrom(
+        com.google.protobuf.CodedInputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse parseFrom(
+        com.google.protobuf.CodedInputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static Builder newBuilder() {
+      return (Builder) DEFAULT_INSTANCE.createBuilder();
+    }
+    public static Builder newBuilder(vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse prototype) {
+      return DEFAULT_INSTANCE.createBuilder(prototype);
+    }
+
+    /**
+     * Protobuf type {@code vosk.stt.v1.StreamingRecognitionResponse}
+     */
+    public static final class Builder extends
+        com.google.protobuf.GeneratedMessageLite.Builder<
+          vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse, Builder> implements
+        // @@protoc_insertion_point(builder_implements:vosk.stt.v1.StreamingRecognitionResponse)
+        vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponseOrBuilder {
+      // Construct using vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse.newBuilder()
+      private Builder() {
+        super(DEFAULT_INSTANCE);
+      }
+
+
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      @Override
+      public java.util.List<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk> getChunksList() {
+        return java.util.Collections.unmodifiableList(
+            instance.getChunksList());
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      @Override
+      public int getChunksCount() {
+        return instance.getChunksCount();
+      }/**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      @Override
+      public vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk getChunks(int index) {
+        return instance.getChunks(index);
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      public Builder setChunks(
+          int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk value) {
+        copyOnWrite();
+        instance.setChunks(index, value);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      public Builder setChunks(
+          int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk.Builder builderForValue) {
+        copyOnWrite();
+        instance.setChunks(index,
+            builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      public Builder addChunks(vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk value) {
+        copyOnWrite();
+        instance.addChunks(value);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      public Builder addChunks(
+          int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk value) {
+        copyOnWrite();
+        instance.addChunks(index, value);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      public Builder addChunks(
+          vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk.Builder builderForValue) {
+        copyOnWrite();
+        instance.addChunks(builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      public Builder addChunks(
+          int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk.Builder builderForValue) {
+        copyOnWrite();
+        instance.addChunks(index,
+            builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      public Builder addAllChunks(
+          Iterable<? extends vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk> values) {
+        copyOnWrite();
+        instance.addAllChunks(values);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      public Builder clearChunks() {
+        copyOnWrite();
+        instance.clearChunks();
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionChunk chunks = 1;</code>
+       */
+      public Builder removeChunks(int index) {
+        copyOnWrite();
+        instance.removeChunks(index);
+        return this;
+      }
+
+      // @@protoc_insertion_point(builder_scope:vosk.stt.v1.StreamingRecognitionResponse)
+    }
+    @Override
+    @SuppressWarnings({"unchecked", "fallthrough"})
+    protected final Object dynamicMethod(
+        MethodToInvoke method,
+        Object arg0, Object arg1) {
+      switch (method) {
+        case NEW_MUTABLE_INSTANCE: {
+          return new vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse();
+        }
+        case NEW_BUILDER: {
+          return new Builder();
+        }
+        case BUILD_MESSAGE_INFO: {
+            Object[] objects = new Object[] {
+              "chunks_",
+              vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk.class,
+            };
+            String info =
+                "\u0000\u0001\u0000\u0000\u0001\u0001\u0001\u0000\u0001\u0000\u0001\u001b";
+            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
+        }
+        // fall through
+        case GET_DEFAULT_INSTANCE: {
+          return DEFAULT_INSTANCE;
+        }
+        case GET_PARSER: {
+          com.google.protobuf.Parser<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse> parser = PARSER;
+          if (parser == null) {
+            synchronized (vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse.class) {
+              parser = PARSER;
+              if (parser == null) {
+                parser =
+                    new DefaultInstanceBasedParser<vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse>(
+                        DEFAULT_INSTANCE);
+                PARSER = parser;
+              }
+            }
+          }
+          return parser;
+      }
+      case GET_MEMOIZED_IS_INITIALIZED: {
+        return (byte) 1;
+      }
+      case SET_MEMOIZED_IS_INITIALIZED: {
+        return null;
+      }
+      }
+      throw new UnsupportedOperationException();
+    }
+
+
+    // @@protoc_insertion_point(class_scope:vosk.stt.v1.StreamingRecognitionResponse)
+    private static final vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse DEFAULT_INSTANCE;
+    static {
+      StreamingRecognitionResponse defaultInstance = new StreamingRecognitionResponse();
+      // New instances are implicitly immutable so no need to make
+      // immutable.
+      DEFAULT_INSTANCE = defaultInstance;
+      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
+        StreamingRecognitionResponse.class, defaultInstance);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.StreamingRecognitionResponse getDefaultInstance() {
+      return DEFAULT_INSTANCE;
+    }
+
+    private static volatile com.google.protobuf.Parser<StreamingRecognitionResponse> PARSER;
+
+    public static com.google.protobuf.Parser<StreamingRecognitionResponse> parser() {
+      return DEFAULT_INSTANCE.getParserForType();
+    }
+  }
+
+  public interface RecognitionConfigOrBuilder extends
+      // @@protoc_insertion_point(interface_extends:vosk.stt.v1.RecognitionConfig)
+      com.google.protobuf.MessageLiteOrBuilder {
+
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+     * @return Whether the specification field is set.
+     */
+    boolean hasSpecification();
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+     * @return The specification.
+     */
+    vosk.stt.v1.SttServiceOuterClass.RecognitionSpec getSpecification();
+  }
+  /**
+   * Protobuf type {@code vosk.stt.v1.RecognitionConfig}
+   */
+  public  static final class RecognitionConfig extends
+      com.google.protobuf.GeneratedMessageLite<
+          RecognitionConfig, RecognitionConfig.Builder> implements
+      // @@protoc_insertion_point(message_implements:vosk.stt.v1.RecognitionConfig)
+      RecognitionConfigOrBuilder {
+    private RecognitionConfig() {
+    }
+    private int bitField0_;
+    public static final int SPECIFICATION_FIELD_NUMBER = 1;
+    private vosk.stt.v1.SttServiceOuterClass.RecognitionSpec specification_;
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+     */
+    @Override
+    public boolean hasSpecification() {
+      return ((bitField0_ & 0x00000001) != 0);
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+     */
+    @Override
+    public vosk.stt.v1.SttServiceOuterClass.RecognitionSpec getSpecification() {
+      return specification_ == null ? vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.getDefaultInstance() : specification_;
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+     */
+    private void setSpecification(vosk.stt.v1.SttServiceOuterClass.RecognitionSpec value) {
+      value.getClass();
+  specification_ = value;
+      bitField0_ |= 0x00000001;
+      }
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+     */
+    @SuppressWarnings({"ReferenceEquality"})
+    private void mergeSpecification(vosk.stt.v1.SttServiceOuterClass.RecognitionSpec value) {
+      value.getClass();
+  if (specification_ != null &&
+          specification_ != vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.getDefaultInstance()) {
+        specification_ =
+          vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.newBuilder(specification_).mergeFrom(value).buildPartial();
+      } else {
+        specification_ = value;
+      }
+      bitField0_ |= 0x00000001;
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+     */
+    private void clearSpecification() {  specification_ = null;
+      bitField0_ = (bitField0_ & ~0x00000001);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseFrom(
+        java.nio.ByteBuffer data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseFrom(
+        java.nio.ByteBuffer data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseFrom(
+        com.google.protobuf.ByteString data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseFrom(
+        com.google.protobuf.ByteString data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseFrom(byte[] data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseFrom(
+        byte[] data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseDelimitedFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseDelimitedFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseFrom(
+        com.google.protobuf.CodedInputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig parseFrom(
+        com.google.protobuf.CodedInputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static Builder newBuilder() {
+      return (Builder) DEFAULT_INSTANCE.createBuilder();
+    }
+    public static Builder newBuilder(vosk.stt.v1.SttServiceOuterClass.RecognitionConfig prototype) {
+      return DEFAULT_INSTANCE.createBuilder(prototype);
+    }
+
+    /**
+     * Protobuf type {@code vosk.stt.v1.RecognitionConfig}
+     */
+    public static final class Builder extends
+        com.google.protobuf.GeneratedMessageLite.Builder<
+          vosk.stt.v1.SttServiceOuterClass.RecognitionConfig, Builder> implements
+        // @@protoc_insertion_point(builder_implements:vosk.stt.v1.RecognitionConfig)
+        vosk.stt.v1.SttServiceOuterClass.RecognitionConfigOrBuilder {
+      // Construct using vosk.stt.v1.SttServiceOuterClass.RecognitionConfig.newBuilder()
+      private Builder() {
+        super(DEFAULT_INSTANCE);
+      }
+
+
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+       */
+      @Override
+      public boolean hasSpecification() {
+        return instance.hasSpecification();
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+       */
+      @Override
+      public vosk.stt.v1.SttServiceOuterClass.RecognitionSpec getSpecification() {
+        return instance.getSpecification();
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+       */
+      public Builder setSpecification(vosk.stt.v1.SttServiceOuterClass.RecognitionSpec value) {
+        copyOnWrite();
+        instance.setSpecification(value);
+        return this;
+        }
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+       */
+      public Builder setSpecification(
+          vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.Builder builderForValue) {
+        copyOnWrite();
+        instance.setSpecification(builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+       */
+      public Builder mergeSpecification(vosk.stt.v1.SttServiceOuterClass.RecognitionSpec value) {
+        copyOnWrite();
+        instance.mergeSpecification(value);
+        return this;
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec specification = 1;</code>
+       */
+      public Builder clearSpecification() {  copyOnWrite();
+        instance.clearSpecification();
+        return this;
+      }
+
+      // @@protoc_insertion_point(builder_scope:vosk.stt.v1.RecognitionConfig)
+    }
+    @Override
+    @SuppressWarnings({"unchecked", "fallthrough"})
+    protected final Object dynamicMethod(
+        MethodToInvoke method,
+        Object arg0, Object arg1) {
+      switch (method) {
+        case NEW_MUTABLE_INSTANCE: {
+          return new vosk.stt.v1.SttServiceOuterClass.RecognitionConfig();
+        }
+        case NEW_BUILDER: {
+          return new Builder();
+        }
+        case BUILD_MESSAGE_INFO: {
+            Object[] objects = new Object[] {
+              "bitField0_",
+              "specification_",
+            };
+            String info =
+                "\u0000\u0001\u0000\u0001\u0001\u0001\u0001\u0000\u0000\u0000\u0001\u1009\u0000";
+            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
+        }
+        // fall through
+        case GET_DEFAULT_INSTANCE: {
+          return DEFAULT_INSTANCE;
+        }
+        case GET_PARSER: {
+          com.google.protobuf.Parser<vosk.stt.v1.SttServiceOuterClass.RecognitionConfig> parser = PARSER;
+          if (parser == null) {
+            synchronized (vosk.stt.v1.SttServiceOuterClass.RecognitionConfig.class) {
+              parser = PARSER;
+              if (parser == null) {
+                parser =
+                    new DefaultInstanceBasedParser<vosk.stt.v1.SttServiceOuterClass.RecognitionConfig>(
+                        DEFAULT_INSTANCE);
+                PARSER = parser;
+              }
+            }
+          }
+          return parser;
+      }
+      case GET_MEMOIZED_IS_INITIALIZED: {
+        return (byte) 1;
+      }
+      case SET_MEMOIZED_IS_INITIALIZED: {
+        return null;
+      }
+      }
+      throw new UnsupportedOperationException();
+    }
+
+
+    // @@protoc_insertion_point(class_scope:vosk.stt.v1.RecognitionConfig)
+    private static final vosk.stt.v1.SttServiceOuterClass.RecognitionConfig DEFAULT_INSTANCE;
+    static {
+      RecognitionConfig defaultInstance = new RecognitionConfig();
+      // New instances are implicitly immutable so no need to make
+      // immutable.
+      DEFAULT_INSTANCE = defaultInstance;
+      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
+        RecognitionConfig.class, defaultInstance);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionConfig getDefaultInstance() {
+      return DEFAULT_INSTANCE;
+    }
+
+    private static volatile com.google.protobuf.Parser<RecognitionConfig> PARSER;
+
+    public static com.google.protobuf.Parser<RecognitionConfig> parser() {
+      return DEFAULT_INSTANCE.getParserForType();
+    }
+  }
+
+  public interface RecognitionSpecOrBuilder extends
+      // @@protoc_insertion_point(interface_extends:vosk.stt.v1.RecognitionSpec)
+      com.google.protobuf.MessageLiteOrBuilder {
+
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+     * @return The enum numeric value on the wire for audioEncoding.
+     */
+    int getAudioEncodingValue();
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+     * @return The audioEncoding.
+     */
+    vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.AudioEncoding getAudioEncoding();
+
+    /**
+     * <pre>
+     * 8000, 16000, 48000 only for pcm
+     * </pre>
+     *
+     * <code>int64 sample_rate_hertz = 2;</code>
+     * @return The sampleRateHertz.
+     */
+    long getSampleRateHertz();
+
+    /**
+     * <pre>
+     * code in BCP-47
+     * </pre>
+     *
+     * <code>string language_code = 3;</code>
+     * @return The languageCode.
+     */
+    String getLanguageCode();
+    /**
+     * <pre>
+     * code in BCP-47
+     * </pre>
+     *
+     * <code>string language_code = 3;</code>
+     * @return The bytes for languageCode.
+     */
+    com.google.protobuf.ByteString
+        getLanguageCodeBytes();
+
+    /**
+     * <code>bool profanity_filter = 4;</code>
+     * @return The profanityFilter.
+     */
+    boolean getProfanityFilter();
+
+    /**
+     * <code>string model = 5;</code>
+     * @return The model.
+     */
+    String getModel();
+    /**
+     * <code>string model = 5;</code>
+     * @return The bytes for model.
+     */
+    com.google.protobuf.ByteString
+        getModelBytes();
+
+    /**
+     * <pre>
+     * If set true, tentative hypotheses may be returned as they become available (final=false flag)
+     * If false or omitted, only final=true result(s) are returned.
+     * Makes sense only for StreamingRecognize requests.
+     * </pre>
+     *
+     * <code>bool partial_results = 7;</code>
+     * @return The partialResults.
+     */
+    boolean getPartialResults();
+
+    /**
+     * <code>bool single_utterance = 8;</code>
+     * @return The singleUtterance.
+     */
+    boolean getSingleUtterance();
+
+    /**
+     * <pre>
+     * This mark allows disable normalization text
+     * </pre>
+     *
+     * <code>bool raw_results = 10;</code>
+     * @return The rawResults.
+     */
+    boolean getRawResults();
+
+    /**
+     * <pre>
+     * Maximum number of recognition hypotheses to be returned.
+     * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
+     * within each `SpeechRecognitionResult`.
+     * The server may return fewer than `max_alternatives`.
+     * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
+     * one. If omitted, will return a maximum of one.
+     * </pre>
+     *
+     * <code>int32 max_alternatives = 11;</code>
+     * @return The maxAlternatives.
+     */
+    int getMaxAlternatives();
+
+    /**
+     * <pre>
+     * If `true`, the top result includes a list of words and
+     * the start and end time offsets (timestamps) for those words. If
+     * `false`, no word-level time offset information is returned. The default is
+     * `false`.
+     * </pre>
+     *
+     * <code>bool enable_word_time_offsets = 12;</code>
+     * @return The enableWordTimeOffsets.
+     */
+    boolean getEnableWordTimeOffsets();
+  }
+  /**
+   * Protobuf type {@code vosk.stt.v1.RecognitionSpec}
+   */
+  public  static final class RecognitionSpec extends
+      com.google.protobuf.GeneratedMessageLite<
+          RecognitionSpec, RecognitionSpec.Builder> implements
+      // @@protoc_insertion_point(message_implements:vosk.stt.v1.RecognitionSpec)
+      RecognitionSpecOrBuilder {
+    private RecognitionSpec() {
+      languageCode_ = "";
+      model_ = "";
+    }
+    /**
+     * Protobuf enum {@code vosk.stt.v1.RecognitionSpec.AudioEncoding}
+     */
+    public enum AudioEncoding
+        implements com.google.protobuf.Internal.EnumLite {
+      /**
+       * <code>AUDIO_ENCODING_UNSPECIFIED = 0;</code>
+       */
+      AUDIO_ENCODING_UNSPECIFIED(0),
+      /**
+       * <pre>
+       * 16-bit signed little-endian (Linear PCM)
+       * </pre>
+       *
+       * <code>LINEAR16_PCM = 1;</code>
+       */
+      LINEAR16_PCM(1),
+      UNRECOGNIZED(-1),
+      ;
+
+      /**
+       * <code>AUDIO_ENCODING_UNSPECIFIED = 0;</code>
+       */
+      public static final int AUDIO_ENCODING_UNSPECIFIED_VALUE = 0;
+      /**
+       * <pre>
+       * 16-bit signed little-endian (Linear PCM)
+       * </pre>
+       *
+       * <code>LINEAR16_PCM = 1;</code>
+       */
+      public static final int LINEAR16_PCM_VALUE = 1;
+
+
+      @Override
+      public final int getNumber() {
+        if (this == UNRECOGNIZED) {
+          throw new IllegalArgumentException(
+              "Can't get the number of an unknown enum value.");
+        }
+        return value;
+      }
+
+      /**
+       * @param value The number of the enum to look for.
+       * @return The enum associated with the given number.
+       * @deprecated Use {@link #forNumber(int)} instead.
+       */
+      @Deprecated
+      public static AudioEncoding valueOf(int value) {
+        return forNumber(value);
+      }
+
+      public static AudioEncoding forNumber(int value) {
+        switch (value) {
+          case 0: return AUDIO_ENCODING_UNSPECIFIED;
+          case 1: return LINEAR16_PCM;
+          default: return null;
+        }
+      }
+
+      public static com.google.protobuf.Internal.EnumLiteMap<AudioEncoding>
+          internalGetValueMap() {
+        return internalValueMap;
+      }
+      private static final com.google.protobuf.Internal.EnumLiteMap<
+          AudioEncoding> internalValueMap =
+            new com.google.protobuf.Internal.EnumLiteMap<AudioEncoding>() {
+              @Override
+              public AudioEncoding findValueByNumber(int number) {
+                return AudioEncoding.forNumber(number);
+              }
+            };
+
+      public static com.google.protobuf.Internal.EnumVerifier 
+          internalGetVerifier() {
+        return AudioEncodingVerifier.INSTANCE;
+      }
+
+      private static final class AudioEncodingVerifier implements 
+           com.google.protobuf.Internal.EnumVerifier { 
+              static final com.google.protobuf.Internal.EnumVerifier           INSTANCE = new AudioEncodingVerifier();
+              @Override
+              public boolean isInRange(int number) {
+                return AudioEncoding.forNumber(number) != null;
+              }
+            };
+
+      private final int value;
+
+      private AudioEncoding(int value) {
+        this.value = value;
+      }
+
+      // @@protoc_insertion_point(enum_scope:vosk.stt.v1.RecognitionSpec.AudioEncoding)
+    }
+
+    public static final int AUDIO_ENCODING_FIELD_NUMBER = 1;
+    private int audioEncoding_;
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+     * @return The enum numeric value on the wire for audioEncoding.
+     */
+    @Override
+    public int getAudioEncodingValue() {
+      return audioEncoding_;
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+     * @return The audioEncoding.
+     */
+    @Override
+    public vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.AudioEncoding getAudioEncoding() {
+      vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.AudioEncoding result = vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.AudioEncoding.forNumber(audioEncoding_);
+      return result == null ? vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.AudioEncoding.UNRECOGNIZED : result;
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+     * @param value The enum numeric value on the wire for audioEncoding to set.
+     */
+    private void setAudioEncodingValue(int value) {
+        audioEncoding_ = value;
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+     * @param value The audioEncoding to set.
+     */
+    private void setAudioEncoding(vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.AudioEncoding value) {
+      audioEncoding_ = value.getNumber();
+
+    }
+    /**
+     * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+     */
+    private void clearAudioEncoding() {
+
+      audioEncoding_ = 0;
+    }
+
+    public static final int SAMPLE_RATE_HERTZ_FIELD_NUMBER = 2;
+    private long sampleRateHertz_;
+    /**
+     * <pre>
+     * 8000, 16000, 48000 only for pcm
+     * </pre>
+     *
+     * <code>int64 sample_rate_hertz = 2;</code>
+     * @return The sampleRateHertz.
+     */
+    @Override
+    public long getSampleRateHertz() {
+      return sampleRateHertz_;
+    }
+    /**
+     * <pre>
+     * 8000, 16000, 48000 only for pcm
+     * </pre>
+     *
+     * <code>int64 sample_rate_hertz = 2;</code>
+     * @param value The sampleRateHertz to set.
+     */
+    private void setSampleRateHertz(long value) {
+      
+      sampleRateHertz_ = value;
+    }
+    /**
+     * <pre>
+     * 8000, 16000, 48000 only for pcm
+     * </pre>
+     *
+     * <code>int64 sample_rate_hertz = 2;</code>
+     */
+    private void clearSampleRateHertz() {
+
+      sampleRateHertz_ = 0L;
+    }
+
+    public static final int LANGUAGE_CODE_FIELD_NUMBER = 3;
+    private String languageCode_;
+    /**
+     * <pre>
+     * code in BCP-47
+     * </pre>
+     *
+     * <code>string language_code = 3;</code>
+     * @return The languageCode.
+     */
+    @Override
+    public String getLanguageCode() {
+      return languageCode_;
+    }
+    /**
+     * <pre>
+     * code in BCP-47
+     * </pre>
+     *
+     * <code>string language_code = 3;</code>
+     * @return The bytes for languageCode.
+     */
+    @Override
+    public com.google.protobuf.ByteString
+        getLanguageCodeBytes() {
+      return com.google.protobuf.ByteString.copyFromUtf8(languageCode_);
+    }
+    /**
+     * <pre>
+     * code in BCP-47
+     * </pre>
+     *
+     * <code>string language_code = 3;</code>
+     * @param value The languageCode to set.
+     */
+    private void setLanguageCode(
+        String value) {
+      Class<?> valueClass = value.getClass();
+  
+      languageCode_ = value;
+    }
+    /**
+     * <pre>
+     * code in BCP-47
+     * </pre>
+     *
+     * <code>string language_code = 3;</code>
+     */
+    private void clearLanguageCode() {
+
+      languageCode_ = getDefaultInstance().getLanguageCode();
+    }
+    /**
+     * <pre>
+     * code in BCP-47
+     * </pre>
+     *
+     * <code>string language_code = 3;</code>
+     * @param value The bytes for languageCode to set.
+     */
+    private void setLanguageCodeBytes(
+        com.google.protobuf.ByteString value) {
+      checkByteStringIsUtf8(value);
+      languageCode_ = value.toStringUtf8();
+
+    }
+
+    public static final int PROFANITY_FILTER_FIELD_NUMBER = 4;
+    private boolean profanityFilter_;
+    /**
+     * <code>bool profanity_filter = 4;</code>
+     * @return The profanityFilter.
+     */
+    @Override
+    public boolean getProfanityFilter() {
+      return profanityFilter_;
+    }
+    /**
+     * <code>bool profanity_filter = 4;</code>
+     * @param value The profanityFilter to set.
+     */
+    private void setProfanityFilter(boolean value) {
+      
+      profanityFilter_ = value;
+    }
+    /**
+     * <code>bool profanity_filter = 4;</code>
+     */
+    private void clearProfanityFilter() {
+
+      profanityFilter_ = false;
+    }
+
+    public static final int MODEL_FIELD_NUMBER = 5;
+    private String model_;
+    /**
+     * <code>string model = 5;</code>
+     * @return The model.
+     */
+    @Override
+    public String getModel() {
+      return model_;
+    }
+    /**
+     * <code>string model = 5;</code>
+     * @return The bytes for model.
+     */
+    @Override
+    public com.google.protobuf.ByteString
+        getModelBytes() {
+      return com.google.protobuf.ByteString.copyFromUtf8(model_);
+    }
+    /**
+     * <code>string model = 5;</code>
+     * @param value The model to set.
+     */
+    private void setModel(
+        String value) {
+      Class<?> valueClass = value.getClass();
+  
+      model_ = value;
+    }
+    /**
+     * <code>string model = 5;</code>
+     */
+    private void clearModel() {
+
+      model_ = getDefaultInstance().getModel();
+    }
+    /**
+     * <code>string model = 5;</code>
+     * @param value The bytes for model to set.
+     */
+    private void setModelBytes(
+        com.google.protobuf.ByteString value) {
+      checkByteStringIsUtf8(value);
+      model_ = value.toStringUtf8();
+
+    }
+
+    public static final int PARTIAL_RESULTS_FIELD_NUMBER = 7;
+    private boolean partialResults_;
+    /**
+     * <pre>
+     * If set true, tentative hypotheses may be returned as they become available (final=false flag)
+     * If false or omitted, only final=true result(s) are returned.
+     * Makes sense only for StreamingRecognize requests.
+     * </pre>
+     *
+     * <code>bool partial_results = 7;</code>
+     * @return The partialResults.
+     */
+    @Override
+    public boolean getPartialResults() {
+      return partialResults_;
+    }
+    /**
+     * <pre>
+     * If set true, tentative hypotheses may be returned as they become available (final=false flag)
+     * If false or omitted, only final=true result(s) are returned.
+     * Makes sense only for StreamingRecognize requests.
+     * </pre>
+     *
+     * <code>bool partial_results = 7;</code>
+     * @param value The partialResults to set.
+     */
+    private void setPartialResults(boolean value) {
+      
+      partialResults_ = value;
+    }
+    /**
+     * <pre>
+     * If set true, tentative hypotheses may be returned as they become available (final=false flag)
+     * If false or omitted, only final=true result(s) are returned.
+     * Makes sense only for StreamingRecognize requests.
+     * </pre>
+     *
+     * <code>bool partial_results = 7;</code>
+     */
+    private void clearPartialResults() {
+
+      partialResults_ = false;
+    }
+
+    public static final int SINGLE_UTTERANCE_FIELD_NUMBER = 8;
+    private boolean singleUtterance_;
+    /**
+     * <code>bool single_utterance = 8;</code>
+     * @return The singleUtterance.
+     */
+    @Override
+    public boolean getSingleUtterance() {
+      return singleUtterance_;
+    }
+    /**
+     * <code>bool single_utterance = 8;</code>
+     * @param value The singleUtterance to set.
+     */
+    private void setSingleUtterance(boolean value) {
+      
+      singleUtterance_ = value;
+    }
+    /**
+     * <code>bool single_utterance = 8;</code>
+     */
+    private void clearSingleUtterance() {
+
+      singleUtterance_ = false;
+    }
+
+    public static final int RAW_RESULTS_FIELD_NUMBER = 10;
+    private boolean rawResults_;
+    /**
+     * <pre>
+     * This mark allows disable normalization text
+     * </pre>
+     *
+     * <code>bool raw_results = 10;</code>
+     * @return The rawResults.
+     */
+    @Override
+    public boolean getRawResults() {
+      return rawResults_;
+    }
+    /**
+     * <pre>
+     * This mark allows disable normalization text
+     * </pre>
+     *
+     * <code>bool raw_results = 10;</code>
+     * @param value The rawResults to set.
+     */
+    private void setRawResults(boolean value) {
+      
+      rawResults_ = value;
+    }
+    /**
+     * <pre>
+     * This mark allows disable normalization text
+     * </pre>
+     *
+     * <code>bool raw_results = 10;</code>
+     */
+    private void clearRawResults() {
+
+      rawResults_ = false;
+    }
+
+    public static final int MAX_ALTERNATIVES_FIELD_NUMBER = 11;
+    private int maxAlternatives_;
+    /**
+     * <pre>
+     * Maximum number of recognition hypotheses to be returned.
+     * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
+     * within each `SpeechRecognitionResult`.
+     * The server may return fewer than `max_alternatives`.
+     * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
+     * one. If omitted, will return a maximum of one.
+     * </pre>
+     *
+     * <code>int32 max_alternatives = 11;</code>
+     * @return The maxAlternatives.
+     */
+    @Override
+    public int getMaxAlternatives() {
+      return maxAlternatives_;
+    }
+    /**
+     * <pre>
+     * Maximum number of recognition hypotheses to be returned.
+     * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
+     * within each `SpeechRecognitionResult`.
+     * The server may return fewer than `max_alternatives`.
+     * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
+     * one. If omitted, will return a maximum of one.
+     * </pre>
+     *
+     * <code>int32 max_alternatives = 11;</code>
+     * @param value The maxAlternatives to set.
+     */
+    private void setMaxAlternatives(int value) {
+      
+      maxAlternatives_ = value;
+    }
+    /**
+     * <pre>
+     * Maximum number of recognition hypotheses to be returned.
+     * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
+     * within each `SpeechRecognitionResult`.
+     * The server may return fewer than `max_alternatives`.
+     * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
+     * one. If omitted, will return a maximum of one.
+     * </pre>
+     *
+     * <code>int32 max_alternatives = 11;</code>
+     */
+    private void clearMaxAlternatives() {
+
+      maxAlternatives_ = 0;
+    }
+
+    public static final int ENABLE_WORD_TIME_OFFSETS_FIELD_NUMBER = 12;
+    private boolean enableWordTimeOffsets_;
+    /**
+     * <pre>
+     * If `true`, the top result includes a list of words and
+     * the start and end time offsets (timestamps) for those words. If
+     * `false`, no word-level time offset information is returned. The default is
+     * `false`.
+     * </pre>
+     *
+     * <code>bool enable_word_time_offsets = 12;</code>
+     * @return The enableWordTimeOffsets.
+     */
+    @Override
+    public boolean getEnableWordTimeOffsets() {
+      return enableWordTimeOffsets_;
+    }
+    /**
+     * <pre>
+     * If `true`, the top result includes a list of words and
+     * the start and end time offsets (timestamps) for those words. If
+     * `false`, no word-level time offset information is returned. The default is
+     * `false`.
+     * </pre>
+     *
+     * <code>bool enable_word_time_offsets = 12;</code>
+     * @param value The enableWordTimeOffsets to set.
+     */
+    private void setEnableWordTimeOffsets(boolean value) {
+      
+      enableWordTimeOffsets_ = value;
+    }
+    /**
+     * <pre>
+     * If `true`, the top result includes a list of words and
+     * the start and end time offsets (timestamps) for those words. If
+     * `false`, no word-level time offset information is returned. The default is
+     * `false`.
+     * </pre>
+     *
+     * <code>bool enable_word_time_offsets = 12;</code>
+     */
+    private void clearEnableWordTimeOffsets() {
+
+      enableWordTimeOffsets_ = false;
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseFrom(
+        java.nio.ByteBuffer data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseFrom(
+        java.nio.ByteBuffer data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseFrom(
+        com.google.protobuf.ByteString data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseFrom(
+        com.google.protobuf.ByteString data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseFrom(byte[] data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseFrom(
+        byte[] data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseDelimitedFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseDelimitedFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseFrom(
+        com.google.protobuf.CodedInputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec parseFrom(
+        com.google.protobuf.CodedInputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static Builder newBuilder() {
+      return (Builder) DEFAULT_INSTANCE.createBuilder();
+    }
+    public static Builder newBuilder(vosk.stt.v1.SttServiceOuterClass.RecognitionSpec prototype) {
+      return DEFAULT_INSTANCE.createBuilder(prototype);
+    }
+
+    /**
+     * Protobuf type {@code vosk.stt.v1.RecognitionSpec}
+     */
+    public static final class Builder extends
+        com.google.protobuf.GeneratedMessageLite.Builder<
+          vosk.stt.v1.SttServiceOuterClass.RecognitionSpec, Builder> implements
+        // @@protoc_insertion_point(builder_implements:vosk.stt.v1.RecognitionSpec)
+        vosk.stt.v1.SttServiceOuterClass.RecognitionSpecOrBuilder {
+      // Construct using vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.newBuilder()
+      private Builder() {
+        super(DEFAULT_INSTANCE);
+      }
+
+
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+       * @return The enum numeric value on the wire for audioEncoding.
+       */
+      @Override
+      public int getAudioEncodingValue() {
+        return instance.getAudioEncodingValue();
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+       * @param value The audioEncoding to set.
+       * @return This builder for chaining.
+       */
+      public Builder setAudioEncodingValue(int value) {
+        copyOnWrite();
+        instance.setAudioEncodingValue(value);
+        return this;
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+       * @return The audioEncoding.
+       */
+      @Override
+      public vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.AudioEncoding getAudioEncoding() {
+        return instance.getAudioEncoding();
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+       * @param value The enum numeric value on the wire for audioEncoding to set.
+       * @return This builder for chaining.
+       */
+      public Builder setAudioEncoding(vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.AudioEncoding value) {
+        copyOnWrite();
+        instance.setAudioEncoding(value);
+        return this;
+      }
+      /**
+       * <code>.vosk.stt.v1.RecognitionSpec.AudioEncoding audio_encoding = 1;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearAudioEncoding() {
+        copyOnWrite();
+        instance.clearAudioEncoding();
+        return this;
+      }
+
+      /**
+       * <pre>
+       * 8000, 16000, 48000 only for pcm
+       * </pre>
+       *
+       * <code>int64 sample_rate_hertz = 2;</code>
+       * @return The sampleRateHertz.
+       */
+      @Override
+      public long getSampleRateHertz() {
+        return instance.getSampleRateHertz();
+      }
+      /**
+       * <pre>
+       * 8000, 16000, 48000 only for pcm
+       * </pre>
+       *
+       * <code>int64 sample_rate_hertz = 2;</code>
+       * @param value The sampleRateHertz to set.
+       * @return This builder for chaining.
+       */
+      public Builder setSampleRateHertz(long value) {
+        copyOnWrite();
+        instance.setSampleRateHertz(value);
+        return this;
+      }
+      /**
+       * <pre>
+       * 8000, 16000, 48000 only for pcm
+       * </pre>
+       *
+       * <code>int64 sample_rate_hertz = 2;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearSampleRateHertz() {
+        copyOnWrite();
+        instance.clearSampleRateHertz();
+        return this;
+      }
+
+      /**
+       * <pre>
+       * code in BCP-47
+       * </pre>
+       *
+       * <code>string language_code = 3;</code>
+       * @return The languageCode.
+       */
+      @Override
+      public String getLanguageCode() {
+        return instance.getLanguageCode();
+      }
+      /**
+       * <pre>
+       * code in BCP-47
+       * </pre>
+       *
+       * <code>string language_code = 3;</code>
+       * @return The bytes for languageCode.
+       */
+      @Override
+      public com.google.protobuf.ByteString
+          getLanguageCodeBytes() {
+        return instance.getLanguageCodeBytes();
+      }
+      /**
+       * <pre>
+       * code in BCP-47
+       * </pre>
+       *
+       * <code>string language_code = 3;</code>
+       * @param value The languageCode to set.
+       * @return This builder for chaining.
+       */
+      public Builder setLanguageCode(
+          String value) {
+        copyOnWrite();
+        instance.setLanguageCode(value);
+        return this;
+      }
+      /**
+       * <pre>
+       * code in BCP-47
+       * </pre>
+       *
+       * <code>string language_code = 3;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearLanguageCode() {
+        copyOnWrite();
+        instance.clearLanguageCode();
+        return this;
+      }
+      /**
+       * <pre>
+       * code in BCP-47
+       * </pre>
+       *
+       * <code>string language_code = 3;</code>
+       * @param value The bytes for languageCode to set.
+       * @return This builder for chaining.
+       */
+      public Builder setLanguageCodeBytes(
+          com.google.protobuf.ByteString value) {
+        copyOnWrite();
+        instance.setLanguageCodeBytes(value);
+        return this;
+      }
+
+      /**
+       * <code>bool profanity_filter = 4;</code>
+       * @return The profanityFilter.
+       */
+      @Override
+      public boolean getProfanityFilter() {
+        return instance.getProfanityFilter();
+      }
+      /**
+       * <code>bool profanity_filter = 4;</code>
+       * @param value The profanityFilter to set.
+       * @return This builder for chaining.
+       */
+      public Builder setProfanityFilter(boolean value) {
+        copyOnWrite();
+        instance.setProfanityFilter(value);
+        return this;
+      }
+      /**
+       * <code>bool profanity_filter = 4;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearProfanityFilter() {
+        copyOnWrite();
+        instance.clearProfanityFilter();
+        return this;
+      }
+
+      /**
+       * <code>string model = 5;</code>
+       * @return The model.
+       */
+      @Override
+      public String getModel() {
+        return instance.getModel();
+      }
+      /**
+       * <code>string model = 5;</code>
+       * @return The bytes for model.
+       */
+      @Override
+      public com.google.protobuf.ByteString
+          getModelBytes() {
+        return instance.getModelBytes();
+      }
+      /**
+       * <code>string model = 5;</code>
+       * @param value The model to set.
+       * @return This builder for chaining.
+       */
+      public Builder setModel(
+          String value) {
+        copyOnWrite();
+        instance.setModel(value);
+        return this;
+      }
+      /**
+       * <code>string model = 5;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearModel() {
+        copyOnWrite();
+        instance.clearModel();
+        return this;
+      }
+      /**
+       * <code>string model = 5;</code>
+       * @param value The bytes for model to set.
+       * @return This builder for chaining.
+       */
+      public Builder setModelBytes(
+          com.google.protobuf.ByteString value) {
+        copyOnWrite();
+        instance.setModelBytes(value);
+        return this;
+      }
+
+      /**
+       * <pre>
+       * If set true, tentative hypotheses may be returned as they become available (final=false flag)
+       * If false or omitted, only final=true result(s) are returned.
+       * Makes sense only for StreamingRecognize requests.
+       * </pre>
+       *
+       * <code>bool partial_results = 7;</code>
+       * @return The partialResults.
+       */
+      @Override
+      public boolean getPartialResults() {
+        return instance.getPartialResults();
+      }
+      /**
+       * <pre>
+       * If set true, tentative hypotheses may be returned as they become available (final=false flag)
+       * If false or omitted, only final=true result(s) are returned.
+       * Makes sense only for StreamingRecognize requests.
+       * </pre>
+       *
+       * <code>bool partial_results = 7;</code>
+       * @param value The partialResults to set.
+       * @return This builder for chaining.
+       */
+      public Builder setPartialResults(boolean value) {
+        copyOnWrite();
+        instance.setPartialResults(value);
+        return this;
+      }
+      /**
+       * <pre>
+       * If set true, tentative hypotheses may be returned as they become available (final=false flag)
+       * If false or omitted, only final=true result(s) are returned.
+       * Makes sense only for StreamingRecognize requests.
+       * </pre>
+       *
+       * <code>bool partial_results = 7;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearPartialResults() {
+        copyOnWrite();
+        instance.clearPartialResults();
+        return this;
+      }
+
+      /**
+       * <code>bool single_utterance = 8;</code>
+       * @return The singleUtterance.
+       */
+      @Override
+      public boolean getSingleUtterance() {
+        return instance.getSingleUtterance();
+      }
+      /**
+       * <code>bool single_utterance = 8;</code>
+       * @param value The singleUtterance to set.
+       * @return This builder for chaining.
+       */
+      public Builder setSingleUtterance(boolean value) {
+        copyOnWrite();
+        instance.setSingleUtterance(value);
+        return this;
+      }
+      /**
+       * <code>bool single_utterance = 8;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearSingleUtterance() {
+        copyOnWrite();
+        instance.clearSingleUtterance();
+        return this;
+      }
+
+      /**
+       * <pre>
+       * This mark allows disable normalization text
+       * </pre>
+       *
+       * <code>bool raw_results = 10;</code>
+       * @return The rawResults.
+       */
+      @Override
+      public boolean getRawResults() {
+        return instance.getRawResults();
+      }
+      /**
+       * <pre>
+       * This mark allows disable normalization text
+       * </pre>
+       *
+       * <code>bool raw_results = 10;</code>
+       * @param value The rawResults to set.
+       * @return This builder for chaining.
+       */
+      public Builder setRawResults(boolean value) {
+        copyOnWrite();
+        instance.setRawResults(value);
+        return this;
+      }
+      /**
+       * <pre>
+       * This mark allows disable normalization text
+       * </pre>
+       *
+       * <code>bool raw_results = 10;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearRawResults() {
+        copyOnWrite();
+        instance.clearRawResults();
+        return this;
+      }
+
+      /**
+       * <pre>
+       * Maximum number of recognition hypotheses to be returned.
+       * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
+       * within each `SpeechRecognitionResult`.
+       * The server may return fewer than `max_alternatives`.
+       * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
+       * one. If omitted, will return a maximum of one.
+       * </pre>
+       *
+       * <code>int32 max_alternatives = 11;</code>
+       * @return The maxAlternatives.
+       */
+      @Override
+      public int getMaxAlternatives() {
+        return instance.getMaxAlternatives();
+      }
+      /**
+       * <pre>
+       * Maximum number of recognition hypotheses to be returned.
+       * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
+       * within each `SpeechRecognitionResult`.
+       * The server may return fewer than `max_alternatives`.
+       * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
+       * one. If omitted, will return a maximum of one.
+       * </pre>
+       *
+       * <code>int32 max_alternatives = 11;</code>
+       * @param value The maxAlternatives to set.
+       * @return This builder for chaining.
+       */
+      public Builder setMaxAlternatives(int value) {
+        copyOnWrite();
+        instance.setMaxAlternatives(value);
+        return this;
+      }
+      /**
+       * <pre>
+       * Maximum number of recognition hypotheses to be returned.
+       * Specifically, the maximum number of `SpeechRecognitionAlternative` messages
+       * within each `SpeechRecognitionResult`.
+       * The server may return fewer than `max_alternatives`.
+       * Valid values are `0`-`30`. A value of `0` or `1` will return a maximum of
+       * one. If omitted, will return a maximum of one.
+       * </pre>
+       *
+       * <code>int32 max_alternatives = 11;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearMaxAlternatives() {
+        copyOnWrite();
+        instance.clearMaxAlternatives();
+        return this;
+      }
+
+      /**
+       * <pre>
+       * If `true`, the top result includes a list of words and
+       * the start and end time offsets (timestamps) for those words. If
+       * `false`, no word-level time offset information is returned. The default is
+       * `false`.
+       * </pre>
+       *
+       * <code>bool enable_word_time_offsets = 12;</code>
+       * @return The enableWordTimeOffsets.
+       */
+      @Override
+      public boolean getEnableWordTimeOffsets() {
+        return instance.getEnableWordTimeOffsets();
+      }
+      /**
+       * <pre>
+       * If `true`, the top result includes a list of words and
+       * the start and end time offsets (timestamps) for those words. If
+       * `false`, no word-level time offset information is returned. The default is
+       * `false`.
+       * </pre>
+       *
+       * <code>bool enable_word_time_offsets = 12;</code>
+       * @param value The enableWordTimeOffsets to set.
+       * @return This builder for chaining.
+       */
+      public Builder setEnableWordTimeOffsets(boolean value) {
+        copyOnWrite();
+        instance.setEnableWordTimeOffsets(value);
+        return this;
+      }
+      /**
+       * <pre>
+       * If `true`, the top result includes a list of words and
+       * the start and end time offsets (timestamps) for those words. If
+       * `false`, no word-level time offset information is returned. The default is
+       * `false`.
+       * </pre>
+       *
+       * <code>bool enable_word_time_offsets = 12;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearEnableWordTimeOffsets() {
+        copyOnWrite();
+        instance.clearEnableWordTimeOffsets();
+        return this;
+      }
+
+      // @@protoc_insertion_point(builder_scope:vosk.stt.v1.RecognitionSpec)
+    }
+    @Override
+    @SuppressWarnings({"unchecked", "fallthrough"})
+    protected final Object dynamicMethod(
+        MethodToInvoke method,
+        Object arg0, Object arg1) {
+      switch (method) {
+        case NEW_MUTABLE_INSTANCE: {
+          return new vosk.stt.v1.SttServiceOuterClass.RecognitionSpec();
+        }
+        case NEW_BUILDER: {
+          return new Builder();
+        }
+        case BUILD_MESSAGE_INFO: {
+            Object[] objects = new Object[] {
+              "audioEncoding_",
+              "sampleRateHertz_",
+              "languageCode_",
+              "profanityFilter_",
+              "model_",
+              "partialResults_",
+              "singleUtterance_",
+              "rawResults_",
+              "maxAlternatives_",
+              "enableWordTimeOffsets_",
+            };
+            String info =
+                "\u0000\n\u0000\u0000\u0001\f\n\u0000\u0000\u0000\u0001\f\u0002\u0002\u0003\u0208" +
+                "\u0004\u0007\u0005\u0208\u0007\u0007\b\u0007\n\u0007\u000b\u0004\f\u0007";
+            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
+        }
+        // fall through
+        case GET_DEFAULT_INSTANCE: {
+          return DEFAULT_INSTANCE;
+        }
+        case GET_PARSER: {
+          com.google.protobuf.Parser<vosk.stt.v1.SttServiceOuterClass.RecognitionSpec> parser = PARSER;
+          if (parser == null) {
+            synchronized (vosk.stt.v1.SttServiceOuterClass.RecognitionSpec.class) {
+              parser = PARSER;
+              if (parser == null) {
+                parser =
+                    new DefaultInstanceBasedParser<vosk.stt.v1.SttServiceOuterClass.RecognitionSpec>(
+                        DEFAULT_INSTANCE);
+                PARSER = parser;
+              }
+            }
+          }
+          return parser;
+      }
+      case GET_MEMOIZED_IS_INITIALIZED: {
+        return (byte) 1;
+      }
+      case SET_MEMOIZED_IS_INITIALIZED: {
+        return null;
+      }
+      }
+      throw new UnsupportedOperationException();
+    }
+
+
+    // @@protoc_insertion_point(class_scope:vosk.stt.v1.RecognitionSpec)
+    private static final vosk.stt.v1.SttServiceOuterClass.RecognitionSpec DEFAULT_INSTANCE;
+    static {
+      RecognitionSpec defaultInstance = new RecognitionSpec();
+      // New instances are implicitly immutable so no need to make
+      // immutable.
+      DEFAULT_INSTANCE = defaultInstance;
+      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
+        RecognitionSpec.class, defaultInstance);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.RecognitionSpec getDefaultInstance() {
+      return DEFAULT_INSTANCE;
+    }
+
+    private static volatile com.google.protobuf.Parser<RecognitionSpec> PARSER;
+
+    public static com.google.protobuf.Parser<RecognitionSpec> parser() {
+      return DEFAULT_INSTANCE.getParserForType();
+    }
+  }
+
+  public interface SpeechRecognitionChunkOrBuilder extends
+      // @@protoc_insertion_point(interface_extends:vosk.stt.v1.SpeechRecognitionChunk)
+      com.google.protobuf.MessageLiteOrBuilder {
+
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    java.util.List<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative> 
+        getAlternativesList();
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative getAlternatives(int index);
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    int getAlternativesCount();
+
+    /**
+     * <pre>
+     * This flag shows that the received chunk contains a part of the recognized text that won't be changed.
+     * </pre>
+     *
+     * <code>bool final = 2;</code>
+     * @return The final.
+     */
+    boolean getFinal();
+
+    /**
+     * <pre>
+     * This flag shows that the received chunk is the end of an utterance.
+     * </pre>
+     *
+     * <code>bool end_of_utterance = 3;</code>
+     * @return The endOfUtterance.
+     */
+    boolean getEndOfUtterance();
+  }
+  /**
+   * Protobuf type {@code vosk.stt.v1.SpeechRecognitionChunk}
+   */
+  public  static final class SpeechRecognitionChunk extends
+      com.google.protobuf.GeneratedMessageLite<
+          SpeechRecognitionChunk, SpeechRecognitionChunk.Builder> implements
+      // @@protoc_insertion_point(message_implements:vosk.stt.v1.SpeechRecognitionChunk)
+      SpeechRecognitionChunkOrBuilder {
+    private SpeechRecognitionChunk() {
+      alternatives_ = emptyProtobufList();
+    }
+    public static final int ALTERNATIVES_FIELD_NUMBER = 1;
+    private com.google.protobuf.Internal.ProtobufList<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative> alternatives_;
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    @Override
+    public java.util.List<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative> getAlternativesList() {
+      return alternatives_;
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    public java.util.List<? extends vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternativeOrBuilder> 
+        getAlternativesOrBuilderList() {
+      return alternatives_;
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    @Override
+    public int getAlternativesCount() {
+      return alternatives_.size();
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    @Override
+    public vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative getAlternatives(int index) {
+      return alternatives_.get(index);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    public vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternativeOrBuilder getAlternativesOrBuilder(
+        int index) {
+      return alternatives_.get(index);
+    }
+    private void ensureAlternativesIsMutable() {
+      com.google.protobuf.Internal.ProtobufList<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative> tmp = alternatives_;
+      if (!tmp.isModifiable()) {
+        alternatives_ =
+            mutableCopy(tmp);
+       }
+    }
+
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    private void setAlternatives(
+        int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative value) {
+      value.getClass();
+  ensureAlternativesIsMutable();
+      alternatives_.set(index, value);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    private void addAlternatives(vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative value) {
+      value.getClass();
+  ensureAlternativesIsMutable();
+      alternatives_.add(value);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    private void addAlternatives(
+        int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative value) {
+      value.getClass();
+  ensureAlternativesIsMutable();
+      alternatives_.add(index, value);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    private void addAllAlternatives(
+        Iterable<? extends vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative> values) {
+      ensureAlternativesIsMutable();
+      addAll(
+          values, alternatives_);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    private void clearAlternatives() {
+      alternatives_ = emptyProtobufList();
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+     */
+    private void removeAlternatives(int index) {
+      ensureAlternativesIsMutable();
+      alternatives_.remove(index);
+    }
+
+    public static final int FINAL_FIELD_NUMBER = 2;
+    private boolean final_;
+    /**
+     * <pre>
+     * This flag shows that the received chunk contains a part of the recognized text that won't be changed.
+     * </pre>
+     *
+     * <code>bool final = 2;</code>
+     * @return The final.
+     */
+    @Override
+    public boolean getFinal() {
+      return final_;
+    }
+    /**
+     * <pre>
+     * This flag shows that the received chunk contains a part of the recognized text that won't be changed.
+     * </pre>
+     *
+     * <code>bool final = 2;</code>
+     * @param value The final to set.
+     */
+    private void setFinal(boolean value) {
+      
+      final_ = value;
+    }
+    /**
+     * <pre>
+     * This flag shows that the received chunk contains a part of the recognized text that won't be changed.
+     * </pre>
+     *
+     * <code>bool final = 2;</code>
+     */
+    private void clearFinal() {
+
+      final_ = false;
+    }
+
+    public static final int END_OF_UTTERANCE_FIELD_NUMBER = 3;
+    private boolean endOfUtterance_;
+    /**
+     * <pre>
+     * This flag shows that the received chunk is the end of an utterance.
+     * </pre>
+     *
+     * <code>bool end_of_utterance = 3;</code>
+     * @return The endOfUtterance.
+     */
+    @Override
+    public boolean getEndOfUtterance() {
+      return endOfUtterance_;
+    }
+    /**
+     * <pre>
+     * This flag shows that the received chunk is the end of an utterance.
+     * </pre>
+     *
+     * <code>bool end_of_utterance = 3;</code>
+     * @param value The endOfUtterance to set.
+     */
+    private void setEndOfUtterance(boolean value) {
+      
+      endOfUtterance_ = value;
+    }
+    /**
+     * <pre>
+     * This flag shows that the received chunk is the end of an utterance.
+     * </pre>
+     *
+     * <code>bool end_of_utterance = 3;</code>
+     */
+    private void clearEndOfUtterance() {
+
+      endOfUtterance_ = false;
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseFrom(
+        java.nio.ByteBuffer data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseFrom(
+        java.nio.ByteBuffer data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseFrom(
+        com.google.protobuf.ByteString data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseFrom(
+        com.google.protobuf.ByteString data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseFrom(byte[] data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseFrom(
+        byte[] data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseDelimitedFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseDelimitedFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseFrom(
+        com.google.protobuf.CodedInputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk parseFrom(
+        com.google.protobuf.CodedInputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static Builder newBuilder() {
+      return (Builder) DEFAULT_INSTANCE.createBuilder();
+    }
+    public static Builder newBuilder(vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk prototype) {
+      return DEFAULT_INSTANCE.createBuilder(prototype);
+    }
+
+    /**
+     * Protobuf type {@code vosk.stt.v1.SpeechRecognitionChunk}
+     */
+    public static final class Builder extends
+        com.google.protobuf.GeneratedMessageLite.Builder<
+          vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk, Builder> implements
+        // @@protoc_insertion_point(builder_implements:vosk.stt.v1.SpeechRecognitionChunk)
+        vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunkOrBuilder {
+      // Construct using vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk.newBuilder()
+      private Builder() {
+        super(DEFAULT_INSTANCE);
+      }
+
+
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      @Override
+      public java.util.List<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative> getAlternativesList() {
+        return java.util.Collections.unmodifiableList(
+            instance.getAlternativesList());
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      @Override
+      public int getAlternativesCount() {
+        return instance.getAlternativesCount();
+      }/**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      @Override
+      public vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative getAlternatives(int index) {
+        return instance.getAlternatives(index);
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      public Builder setAlternatives(
+          int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative value) {
+        copyOnWrite();
+        instance.setAlternatives(index, value);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      public Builder setAlternatives(
+          int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative.Builder builderForValue) {
+        copyOnWrite();
+        instance.setAlternatives(index,
+            builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      public Builder addAlternatives(vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative value) {
+        copyOnWrite();
+        instance.addAlternatives(value);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      public Builder addAlternatives(
+          int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative value) {
+        copyOnWrite();
+        instance.addAlternatives(index, value);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      public Builder addAlternatives(
+          vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative.Builder builderForValue) {
+        copyOnWrite();
+        instance.addAlternatives(builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      public Builder addAlternatives(
+          int index, vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative.Builder builderForValue) {
+        copyOnWrite();
+        instance.addAlternatives(index,
+            builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      public Builder addAllAlternatives(
+          Iterable<? extends vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative> values) {
+        copyOnWrite();
+        instance.addAllAlternatives(values);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      public Builder clearAlternatives() {
+        copyOnWrite();
+        instance.clearAlternatives();
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.SpeechRecognitionAlternative alternatives = 1;</code>
+       */
+      public Builder removeAlternatives(int index) {
+        copyOnWrite();
+        instance.removeAlternatives(index);
+        return this;
+      }
+
+      /**
+       * <pre>
+       * This flag shows that the received chunk contains a part of the recognized text that won't be changed.
+       * </pre>
+       *
+       * <code>bool final = 2;</code>
+       * @return The final.
+       */
+      @Override
+      public boolean getFinal() {
+        return instance.getFinal();
+      }
+      /**
+       * <pre>
+       * This flag shows that the received chunk contains a part of the recognized text that won't be changed.
+       * </pre>
+       *
+       * <code>bool final = 2;</code>
+       * @param value The final to set.
+       * @return This builder for chaining.
+       */
+      public Builder setFinal(boolean value) {
+        copyOnWrite();
+        instance.setFinal(value);
+        return this;
+      }
+      /**
+       * <pre>
+       * This flag shows that the received chunk contains a part of the recognized text that won't be changed.
+       * </pre>
+       *
+       * <code>bool final = 2;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearFinal() {
+        copyOnWrite();
+        instance.clearFinal();
+        return this;
+      }
+
+      /**
+       * <pre>
+       * This flag shows that the received chunk is the end of an utterance.
+       * </pre>
+       *
+       * <code>bool end_of_utterance = 3;</code>
+       * @return The endOfUtterance.
+       */
+      @Override
+      public boolean getEndOfUtterance() {
+        return instance.getEndOfUtterance();
+      }
+      /**
+       * <pre>
+       * This flag shows that the received chunk is the end of an utterance.
+       * </pre>
+       *
+       * <code>bool end_of_utterance = 3;</code>
+       * @param value The endOfUtterance to set.
+       * @return This builder for chaining.
+       */
+      public Builder setEndOfUtterance(boolean value) {
+        copyOnWrite();
+        instance.setEndOfUtterance(value);
+        return this;
+      }
+      /**
+       * <pre>
+       * This flag shows that the received chunk is the end of an utterance.
+       * </pre>
+       *
+       * <code>bool end_of_utterance = 3;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearEndOfUtterance() {
+        copyOnWrite();
+        instance.clearEndOfUtterance();
+        return this;
+      }
+
+      // @@protoc_insertion_point(builder_scope:vosk.stt.v1.SpeechRecognitionChunk)
+    }
+    @Override
+    @SuppressWarnings({"unchecked", "fallthrough"})
+    protected final Object dynamicMethod(
+        MethodToInvoke method,
+        Object arg0, Object arg1) {
+      switch (method) {
+        case NEW_MUTABLE_INSTANCE: {
+          return new vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk();
+        }
+        case NEW_BUILDER: {
+          return new Builder();
+        }
+        case BUILD_MESSAGE_INFO: {
+            Object[] objects = new Object[] {
+              "alternatives_",
+              vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative.class,
+              "final_",
+              "endOfUtterance_",
+            };
+            String info =
+                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0001\u0000\u0001\u001b\u0002\u0007" +
+                "\u0003\u0007";
+            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
+        }
+        // fall through
+        case GET_DEFAULT_INSTANCE: {
+          return DEFAULT_INSTANCE;
+        }
+        case GET_PARSER: {
+          com.google.protobuf.Parser<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk> parser = PARSER;
+          if (parser == null) {
+            synchronized (vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk.class) {
+              parser = PARSER;
+              if (parser == null) {
+                parser =
+                    new DefaultInstanceBasedParser<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk>(
+                        DEFAULT_INSTANCE);
+                PARSER = parser;
+              }
+            }
+          }
+          return parser;
+      }
+      case GET_MEMOIZED_IS_INITIALIZED: {
+        return (byte) 1;
+      }
+      case SET_MEMOIZED_IS_INITIALIZED: {
+        return null;
+      }
+      }
+      throw new UnsupportedOperationException();
+    }
+
+
+    // @@protoc_insertion_point(class_scope:vosk.stt.v1.SpeechRecognitionChunk)
+    private static final vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk DEFAULT_INSTANCE;
+    static {
+      SpeechRecognitionChunk defaultInstance = new SpeechRecognitionChunk();
+      // New instances are implicitly immutable so no need to make
+      // immutable.
+      DEFAULT_INSTANCE = defaultInstance;
+      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
+        SpeechRecognitionChunk.class, defaultInstance);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionChunk getDefaultInstance() {
+      return DEFAULT_INSTANCE;
+    }
+
+    private static volatile com.google.protobuf.Parser<SpeechRecognitionChunk> PARSER;
+
+    public static com.google.protobuf.Parser<SpeechRecognitionChunk> parser() {
+      return DEFAULT_INSTANCE.getParserForType();
+    }
+  }
+
+  public interface SpeechRecognitionAlternativeOrBuilder extends
+      // @@protoc_insertion_point(interface_extends:vosk.stt.v1.SpeechRecognitionAlternative)
+      com.google.protobuf.MessageLiteOrBuilder {
+
+    /**
+     * <code>string text = 1;</code>
+     * @return The text.
+     */
+    String getText();
+    /**
+     * <code>string text = 1;</code>
+     * @return The bytes for text.
+     */
+    com.google.protobuf.ByteString
+        getTextBytes();
+
+    /**
+     * <code>float confidence = 2;</code>
+     * @return The confidence.
+     */
+    float getConfidence();
+
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    java.util.List<vosk.stt.v1.SttServiceOuterClass.WordInfo> 
+        getWordsList();
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    vosk.stt.v1.SttServiceOuterClass.WordInfo getWords(int index);
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    int getWordsCount();
+  }
+  /**
+   * Protobuf type {@code vosk.stt.v1.SpeechRecognitionAlternative}
+   */
+  public  static final class SpeechRecognitionAlternative extends
+      com.google.protobuf.GeneratedMessageLite<
+          SpeechRecognitionAlternative, SpeechRecognitionAlternative.Builder> implements
+      // @@protoc_insertion_point(message_implements:vosk.stt.v1.SpeechRecognitionAlternative)
+      SpeechRecognitionAlternativeOrBuilder {
+    private SpeechRecognitionAlternative() {
+      text_ = "";
+      words_ = emptyProtobufList();
+    }
+    public static final int TEXT_FIELD_NUMBER = 1;
+    private String text_;
+    /**
+     * <code>string text = 1;</code>
+     * @return The text.
+     */
+    @Override
+    public String getText() {
+      return text_;
+    }
+    /**
+     * <code>string text = 1;</code>
+     * @return The bytes for text.
+     */
+    @Override
+    public com.google.protobuf.ByteString
+        getTextBytes() {
+      return com.google.protobuf.ByteString.copyFromUtf8(text_);
+    }
+    /**
+     * <code>string text = 1;</code>
+     * @param value The text to set.
+     */
+    private void setText(
+        String value) {
+      Class<?> valueClass = value.getClass();
+  
+      text_ = value;
+    }
+    /**
+     * <code>string text = 1;</code>
+     */
+    private void clearText() {
+
+      text_ = getDefaultInstance().getText();
+    }
+    /**
+     * <code>string text = 1;</code>
+     * @param value The bytes for text to set.
+     */
+    private void setTextBytes(
+        com.google.protobuf.ByteString value) {
+      checkByteStringIsUtf8(value);
+      text_ = value.toStringUtf8();
+
+    }
+
+    public static final int CONFIDENCE_FIELD_NUMBER = 2;
+    private float confidence_;
+    /**
+     * <code>float confidence = 2;</code>
+     * @return The confidence.
+     */
+    @Override
+    public float getConfidence() {
+      return confidence_;
+    }
+    /**
+     * <code>float confidence = 2;</code>
+     * @param value The confidence to set.
+     */
+    private void setConfidence(float value) {
+      
+      confidence_ = value;
+    }
+    /**
+     * <code>float confidence = 2;</code>
+     */
+    private void clearConfidence() {
+
+      confidence_ = 0F;
+    }
+
+    public static final int WORDS_FIELD_NUMBER = 3;
+    private com.google.protobuf.Internal.ProtobufList<vosk.stt.v1.SttServiceOuterClass.WordInfo> words_;
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    @Override
+    public java.util.List<vosk.stt.v1.SttServiceOuterClass.WordInfo> getWordsList() {
+      return words_;
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    public java.util.List<? extends vosk.stt.v1.SttServiceOuterClass.WordInfoOrBuilder> 
+        getWordsOrBuilderList() {
+      return words_;
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    @Override
+    public int getWordsCount() {
+      return words_.size();
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    @Override
+    public vosk.stt.v1.SttServiceOuterClass.WordInfo getWords(int index) {
+      return words_.get(index);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    public vosk.stt.v1.SttServiceOuterClass.WordInfoOrBuilder getWordsOrBuilder(
+        int index) {
+      return words_.get(index);
+    }
+    private void ensureWordsIsMutable() {
+      com.google.protobuf.Internal.ProtobufList<vosk.stt.v1.SttServiceOuterClass.WordInfo> tmp = words_;
+      if (!tmp.isModifiable()) {
+        words_ =
+            mutableCopy(tmp);
+       }
+    }
+
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    private void setWords(
+        int index, vosk.stt.v1.SttServiceOuterClass.WordInfo value) {
+      value.getClass();
+  ensureWordsIsMutable();
+      words_.set(index, value);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    private void addWords(vosk.stt.v1.SttServiceOuterClass.WordInfo value) {
+      value.getClass();
+  ensureWordsIsMutable();
+      words_.add(value);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    private void addWords(
+        int index, vosk.stt.v1.SttServiceOuterClass.WordInfo value) {
+      value.getClass();
+  ensureWordsIsMutable();
+      words_.add(index, value);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    private void addAllWords(
+        Iterable<? extends vosk.stt.v1.SttServiceOuterClass.WordInfo> values) {
+      ensureWordsIsMutable();
+      addAll(
+          values, words_);
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    private void clearWords() {
+      words_ = emptyProtobufList();
+    }
+    /**
+     * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+     */
+    private void removeWords(int index) {
+      ensureWordsIsMutable();
+      words_.remove(index);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseFrom(
+        java.nio.ByteBuffer data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseFrom(
+        java.nio.ByteBuffer data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseFrom(
+        com.google.protobuf.ByteString data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseFrom(
+        com.google.protobuf.ByteString data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseFrom(byte[] data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseFrom(
+        byte[] data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseDelimitedFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseDelimitedFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseFrom(
+        com.google.protobuf.CodedInputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative parseFrom(
+        com.google.protobuf.CodedInputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static Builder newBuilder() {
+      return (Builder) DEFAULT_INSTANCE.createBuilder();
+    }
+    public static Builder newBuilder(vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative prototype) {
+      return DEFAULT_INSTANCE.createBuilder(prototype);
+    }
+
+    /**
+     * Protobuf type {@code vosk.stt.v1.SpeechRecognitionAlternative}
+     */
+    public static final class Builder extends
+        com.google.protobuf.GeneratedMessageLite.Builder<
+          vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative, Builder> implements
+        // @@protoc_insertion_point(builder_implements:vosk.stt.v1.SpeechRecognitionAlternative)
+        vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternativeOrBuilder {
+      // Construct using vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative.newBuilder()
+      private Builder() {
+        super(DEFAULT_INSTANCE);
+      }
+
+
+      /**
+       * <code>string text = 1;</code>
+       * @return The text.
+       */
+      @Override
+      public String getText() {
+        return instance.getText();
+      }
+      /**
+       * <code>string text = 1;</code>
+       * @return The bytes for text.
+       */
+      @Override
+      public com.google.protobuf.ByteString
+          getTextBytes() {
+        return instance.getTextBytes();
+      }
+      /**
+       * <code>string text = 1;</code>
+       * @param value The text to set.
+       * @return This builder for chaining.
+       */
+      public Builder setText(
+          String value) {
+        copyOnWrite();
+        instance.setText(value);
+        return this;
+      }
+      /**
+       * <code>string text = 1;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearText() {
+        copyOnWrite();
+        instance.clearText();
+        return this;
+      }
+      /**
+       * <code>string text = 1;</code>
+       * @param value The bytes for text to set.
+       * @return This builder for chaining.
+       */
+      public Builder setTextBytes(
+          com.google.protobuf.ByteString value) {
+        copyOnWrite();
+        instance.setTextBytes(value);
+        return this;
+      }
+
+      /**
+       * <code>float confidence = 2;</code>
+       * @return The confidence.
+       */
+      @Override
+      public float getConfidence() {
+        return instance.getConfidence();
+      }
+      /**
+       * <code>float confidence = 2;</code>
+       * @param value The confidence to set.
+       * @return This builder for chaining.
+       */
+      public Builder setConfidence(float value) {
+        copyOnWrite();
+        instance.setConfidence(value);
+        return this;
+      }
+      /**
+       * <code>float confidence = 2;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearConfidence() {
+        copyOnWrite();
+        instance.clearConfidence();
+        return this;
+      }
+
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      @Override
+      public java.util.List<vosk.stt.v1.SttServiceOuterClass.WordInfo> getWordsList() {
+        return java.util.Collections.unmodifiableList(
+            instance.getWordsList());
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      @Override
+      public int getWordsCount() {
+        return instance.getWordsCount();
+      }/**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      @Override
+      public vosk.stt.v1.SttServiceOuterClass.WordInfo getWords(int index) {
+        return instance.getWords(index);
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      public Builder setWords(
+          int index, vosk.stt.v1.SttServiceOuterClass.WordInfo value) {
+        copyOnWrite();
+        instance.setWords(index, value);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      public Builder setWords(
+          int index, vosk.stt.v1.SttServiceOuterClass.WordInfo.Builder builderForValue) {
+        copyOnWrite();
+        instance.setWords(index,
+            builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      public Builder addWords(vosk.stt.v1.SttServiceOuterClass.WordInfo value) {
+        copyOnWrite();
+        instance.addWords(value);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      public Builder addWords(
+          int index, vosk.stt.v1.SttServiceOuterClass.WordInfo value) {
+        copyOnWrite();
+        instance.addWords(index, value);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      public Builder addWords(
+          vosk.stt.v1.SttServiceOuterClass.WordInfo.Builder builderForValue) {
+        copyOnWrite();
+        instance.addWords(builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      public Builder addWords(
+          int index, vosk.stt.v1.SttServiceOuterClass.WordInfo.Builder builderForValue) {
+        copyOnWrite();
+        instance.addWords(index,
+            builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      public Builder addAllWords(
+          Iterable<? extends vosk.stt.v1.SttServiceOuterClass.WordInfo> values) {
+        copyOnWrite();
+        instance.addAllWords(values);
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      public Builder clearWords() {
+        copyOnWrite();
+        instance.clearWords();
+        return this;
+      }
+      /**
+       * <code>repeated .vosk.stt.v1.WordInfo words = 3;</code>
+       */
+      public Builder removeWords(int index) {
+        copyOnWrite();
+        instance.removeWords(index);
+        return this;
+      }
+
+      // @@protoc_insertion_point(builder_scope:vosk.stt.v1.SpeechRecognitionAlternative)
+    }
+    @Override
+    @SuppressWarnings({"unchecked", "fallthrough"})
+    protected final Object dynamicMethod(
+        MethodToInvoke method,
+        Object arg0, Object arg1) {
+      switch (method) {
+        case NEW_MUTABLE_INSTANCE: {
+          return new vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative();
+        }
+        case NEW_BUILDER: {
+          return new Builder();
+        }
+        case BUILD_MESSAGE_INFO: {
+            Object[] objects = new Object[] {
+              "text_",
+              "confidence_",
+              "words_",
+              vosk.stt.v1.SttServiceOuterClass.WordInfo.class,
+            };
+            String info =
+                "\u0000\u0003\u0000\u0000\u0001\u0003\u0003\u0000\u0001\u0000\u0001\u0208\u0002\u0001" +
+                "\u0003\u001b";
+            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
+        }
+        // fall through
+        case GET_DEFAULT_INSTANCE: {
+          return DEFAULT_INSTANCE;
+        }
+        case GET_PARSER: {
+          com.google.protobuf.Parser<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative> parser = PARSER;
+          if (parser == null) {
+            synchronized (vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative.class) {
+              parser = PARSER;
+              if (parser == null) {
+                parser =
+                    new DefaultInstanceBasedParser<vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative>(
+                        DEFAULT_INSTANCE);
+                PARSER = parser;
+              }
+            }
+          }
+          return parser;
+      }
+      case GET_MEMOIZED_IS_INITIALIZED: {
+        return (byte) 1;
+      }
+      case SET_MEMOIZED_IS_INITIALIZED: {
+        return null;
+      }
+      }
+      throw new UnsupportedOperationException();
+    }
+
+
+    // @@protoc_insertion_point(class_scope:vosk.stt.v1.SpeechRecognitionAlternative)
+    private static final vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative DEFAULT_INSTANCE;
+    static {
+      SpeechRecognitionAlternative defaultInstance = new SpeechRecognitionAlternative();
+      // New instances are implicitly immutable so no need to make
+      // immutable.
+      DEFAULT_INSTANCE = defaultInstance;
+      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
+        SpeechRecognitionAlternative.class, defaultInstance);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.SpeechRecognitionAlternative getDefaultInstance() {
+      return DEFAULT_INSTANCE;
+    }
+
+    private static volatile com.google.protobuf.Parser<SpeechRecognitionAlternative> PARSER;
+
+    public static com.google.protobuf.Parser<SpeechRecognitionAlternative> parser() {
+      return DEFAULT_INSTANCE.getParserForType();
+    }
+  }
+
+  public interface WordInfoOrBuilder extends
+      // @@protoc_insertion_point(interface_extends:vosk.stt.v1.WordInfo)
+      com.google.protobuf.MessageLiteOrBuilder {
+
+    /**
+     * <code>.google.protobuf.Duration start_time = 1;</code>
+     * @return Whether the startTime field is set.
+     */
+    boolean hasStartTime();
+    /**
+     * <code>.google.protobuf.Duration start_time = 1;</code>
+     * @return The startTime.
+     */
+    com.google.protobuf.Duration getStartTime();
+
+    /**
+     * <code>.google.protobuf.Duration end_time = 2;</code>
+     * @return Whether the endTime field is set.
+     */
+    boolean hasEndTime();
+    /**
+     * <code>.google.protobuf.Duration end_time = 2;</code>
+     * @return The endTime.
+     */
+    com.google.protobuf.Duration getEndTime();
+
+    /**
+     * <code>string word = 3;</code>
+     * @return The word.
+     */
+    String getWord();
+    /**
+     * <code>string word = 3;</code>
+     * @return The bytes for word.
+     */
+    com.google.protobuf.ByteString
+        getWordBytes();
+
+    /**
+     * <code>float confidence = 4;</code>
+     * @return The confidence.
+     */
+    float getConfidence();
+  }
+  /**
+   * Protobuf type {@code vosk.stt.v1.WordInfo}
+   */
+  public  static final class WordInfo extends
+      com.google.protobuf.GeneratedMessageLite<
+          WordInfo, WordInfo.Builder> implements
+      // @@protoc_insertion_point(message_implements:vosk.stt.v1.WordInfo)
+      WordInfoOrBuilder {
+    private WordInfo() {
+      word_ = "";
+    }
+    private int bitField0_;
+    public static final int START_TIME_FIELD_NUMBER = 1;
+    private com.google.protobuf.Duration startTime_;
+    /**
+     * <code>.google.protobuf.Duration start_time = 1;</code>
+     */
+    @Override
+    public boolean hasStartTime() {
+      return ((bitField0_ & 0x00000001) != 0);
+    }
+    /**
+     * <code>.google.protobuf.Duration start_time = 1;</code>
+     */
+    @Override
+    public com.google.protobuf.Duration getStartTime() {
+      return startTime_ == null ? com.google.protobuf.Duration.getDefaultInstance() : startTime_;
+    }
+    /**
+     * <code>.google.protobuf.Duration start_time = 1;</code>
+     */
+    private void setStartTime(com.google.protobuf.Duration value) {
+      value.getClass();
+  startTime_ = value;
+      bitField0_ |= 0x00000001;
+      }
+    /**
+     * <code>.google.protobuf.Duration start_time = 1;</code>
+     */
+    @SuppressWarnings({"ReferenceEquality"})
+    private void mergeStartTime(com.google.protobuf.Duration value) {
+      value.getClass();
+  if (startTime_ != null &&
+          startTime_ != com.google.protobuf.Duration.getDefaultInstance()) {
+        startTime_ =
+          com.google.protobuf.Duration.newBuilder(startTime_).mergeFrom(value).buildPartial();
+      } else {
+        startTime_ = value;
+      }
+      bitField0_ |= 0x00000001;
+    }
+    /**
+     * <code>.google.protobuf.Duration start_time = 1;</code>
+     */
+    private void clearStartTime() {  startTime_ = null;
+      bitField0_ = (bitField0_ & ~0x00000001);
+    }
+
+    public static final int END_TIME_FIELD_NUMBER = 2;
+    private com.google.protobuf.Duration endTime_;
+    /**
+     * <code>.google.protobuf.Duration end_time = 2;</code>
+     */
+    @Override
+    public boolean hasEndTime() {
+      return ((bitField0_ & 0x00000002) != 0);
+    }
+    /**
+     * <code>.google.protobuf.Duration end_time = 2;</code>
+     */
+    @Override
+    public com.google.protobuf.Duration getEndTime() {
+      return endTime_ == null ? com.google.protobuf.Duration.getDefaultInstance() : endTime_;
+    }
+    /**
+     * <code>.google.protobuf.Duration end_time = 2;</code>
+     */
+    private void setEndTime(com.google.protobuf.Duration value) {
+      value.getClass();
+  endTime_ = value;
+      bitField0_ |= 0x00000002;
+      }
+    /**
+     * <code>.google.protobuf.Duration end_time = 2;</code>
+     */
+    @SuppressWarnings({"ReferenceEquality"})
+    private void mergeEndTime(com.google.protobuf.Duration value) {
+      value.getClass();
+  if (endTime_ != null &&
+          endTime_ != com.google.protobuf.Duration.getDefaultInstance()) {
+        endTime_ =
+          com.google.protobuf.Duration.newBuilder(endTime_).mergeFrom(value).buildPartial();
+      } else {
+        endTime_ = value;
+      }
+      bitField0_ |= 0x00000002;
+    }
+    /**
+     * <code>.google.protobuf.Duration end_time = 2;</code>
+     */
+    private void clearEndTime() {  endTime_ = null;
+      bitField0_ = (bitField0_ & ~0x00000002);
+    }
+
+    public static final int WORD_FIELD_NUMBER = 3;
+    private String word_;
+    /**
+     * <code>string word = 3;</code>
+     * @return The word.
+     */
+    @Override
+    public String getWord() {
+      return word_;
+    }
+    /**
+     * <code>string word = 3;</code>
+     * @return The bytes for word.
+     */
+    @Override
+    public com.google.protobuf.ByteString
+        getWordBytes() {
+      return com.google.protobuf.ByteString.copyFromUtf8(word_);
+    }
+    /**
+     * <code>string word = 3;</code>
+     * @param value The word to set.
+     */
+    private void setWord(
+        String value) {
+      Class<?> valueClass = value.getClass();
+  
+      word_ = value;
+    }
+    /**
+     * <code>string word = 3;</code>
+     */
+    private void clearWord() {
+
+      word_ = getDefaultInstance().getWord();
+    }
+    /**
+     * <code>string word = 3;</code>
+     * @param value The bytes for word to set.
+     */
+    private void setWordBytes(
+        com.google.protobuf.ByteString value) {
+      checkByteStringIsUtf8(value);
+      word_ = value.toStringUtf8();
+
+    }
+
+    public static final int CONFIDENCE_FIELD_NUMBER = 4;
+    private float confidence_;
+    /**
+     * <code>float confidence = 4;</code>
+     * @return The confidence.
+     */
+    @Override
+    public float getConfidence() {
+      return confidence_;
+    }
+    /**
+     * <code>float confidence = 4;</code>
+     * @param value The confidence to set.
+     */
+    private void setConfidence(float value) {
+      
+      confidence_ = value;
+    }
+    /**
+     * <code>float confidence = 4;</code>
+     */
+    private void clearConfidence() {
+
+      confidence_ = 0F;
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseFrom(
+        java.nio.ByteBuffer data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseFrom(
+        java.nio.ByteBuffer data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseFrom(
+        com.google.protobuf.ByteString data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseFrom(
+        com.google.protobuf.ByteString data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseFrom(byte[] data)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseFrom(
+        byte[] data,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws com.google.protobuf.InvalidProtocolBufferException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, data, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseDelimitedFrom(java.io.InputStream input)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseDelimitedFrom(
+        java.io.InputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseFrom(
+        com.google.protobuf.CodedInputStream input)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input);
+    }
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo parseFrom(
+        com.google.protobuf.CodedInputStream input,
+        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
+        throws java.io.IOException {
+      return com.google.protobuf.GeneratedMessageLite.parseFrom(
+          DEFAULT_INSTANCE, input, extensionRegistry);
+    }
+
+    public static Builder newBuilder() {
+      return (Builder) DEFAULT_INSTANCE.createBuilder();
+    }
+    public static Builder newBuilder(vosk.stt.v1.SttServiceOuterClass.WordInfo prototype) {
+      return DEFAULT_INSTANCE.createBuilder(prototype);
+    }
+
+    /**
+     * Protobuf type {@code vosk.stt.v1.WordInfo}
+     */
+    public static final class Builder extends
+        com.google.protobuf.GeneratedMessageLite.Builder<
+          vosk.stt.v1.SttServiceOuterClass.WordInfo, Builder> implements
+        // @@protoc_insertion_point(builder_implements:vosk.stt.v1.WordInfo)
+        vosk.stt.v1.SttServiceOuterClass.WordInfoOrBuilder {
+      // Construct using vosk.stt.v1.SttServiceOuterClass.WordInfo.newBuilder()
+      private Builder() {
+        super(DEFAULT_INSTANCE);
+      }
+
+
+      /**
+       * <code>.google.protobuf.Duration start_time = 1;</code>
+       */
+      @Override
+      public boolean hasStartTime() {
+        return instance.hasStartTime();
+      }
+      /**
+       * <code>.google.protobuf.Duration start_time = 1;</code>
+       */
+      @Override
+      public com.google.protobuf.Duration getStartTime() {
+        return instance.getStartTime();
+      }
+      /**
+       * <code>.google.protobuf.Duration start_time = 1;</code>
+       */
+      public Builder setStartTime(com.google.protobuf.Duration value) {
+        copyOnWrite();
+        instance.setStartTime(value);
+        return this;
+        }
+      /**
+       * <code>.google.protobuf.Duration start_time = 1;</code>
+       */
+      public Builder setStartTime(
+          com.google.protobuf.Duration.Builder builderForValue) {
+        copyOnWrite();
+        instance.setStartTime(builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>.google.protobuf.Duration start_time = 1;</code>
+       */
+      public Builder mergeStartTime(com.google.protobuf.Duration value) {
+        copyOnWrite();
+        instance.mergeStartTime(value);
+        return this;
+      }
+      /**
+       * <code>.google.protobuf.Duration start_time = 1;</code>
+       */
+      public Builder clearStartTime() {  copyOnWrite();
+        instance.clearStartTime();
+        return this;
+      }
+
+      /**
+       * <code>.google.protobuf.Duration end_time = 2;</code>
+       */
+      @Override
+      public boolean hasEndTime() {
+        return instance.hasEndTime();
+      }
+      /**
+       * <code>.google.protobuf.Duration end_time = 2;</code>
+       */
+      @Override
+      public com.google.protobuf.Duration getEndTime() {
+        return instance.getEndTime();
+      }
+      /**
+       * <code>.google.protobuf.Duration end_time = 2;</code>
+       */
+      public Builder setEndTime(com.google.protobuf.Duration value) {
+        copyOnWrite();
+        instance.setEndTime(value);
+        return this;
+        }
+      /**
+       * <code>.google.protobuf.Duration end_time = 2;</code>
+       */
+      public Builder setEndTime(
+          com.google.protobuf.Duration.Builder builderForValue) {
+        copyOnWrite();
+        instance.setEndTime(builderForValue.build());
+        return this;
+      }
+      /**
+       * <code>.google.protobuf.Duration end_time = 2;</code>
+       */
+      public Builder mergeEndTime(com.google.protobuf.Duration value) {
+        copyOnWrite();
+        instance.mergeEndTime(value);
+        return this;
+      }
+      /**
+       * <code>.google.protobuf.Duration end_time = 2;</code>
+       */
+      public Builder clearEndTime() {  copyOnWrite();
+        instance.clearEndTime();
+        return this;
+      }
+
+      /**
+       * <code>string word = 3;</code>
+       * @return The word.
+       */
+      @Override
+      public String getWord() {
+        return instance.getWord();
+      }
+      /**
+       * <code>string word = 3;</code>
+       * @return The bytes for word.
+       */
+      @Override
+      public com.google.protobuf.ByteString
+          getWordBytes() {
+        return instance.getWordBytes();
+      }
+      /**
+       * <code>string word = 3;</code>
+       * @param value The word to set.
+       * @return This builder for chaining.
+       */
+      public Builder setWord(
+          String value) {
+        copyOnWrite();
+        instance.setWord(value);
+        return this;
+      }
+      /**
+       * <code>string word = 3;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearWord() {
+        copyOnWrite();
+        instance.clearWord();
+        return this;
+      }
+      /**
+       * <code>string word = 3;</code>
+       * @param value The bytes for word to set.
+       * @return This builder for chaining.
+       */
+      public Builder setWordBytes(
+          com.google.protobuf.ByteString value) {
+        copyOnWrite();
+        instance.setWordBytes(value);
+        return this;
+      }
+
+      /**
+       * <code>float confidence = 4;</code>
+       * @return The confidence.
+       */
+      @Override
+      public float getConfidence() {
+        return instance.getConfidence();
+      }
+      /**
+       * <code>float confidence = 4;</code>
+       * @param value The confidence to set.
+       * @return This builder for chaining.
+       */
+      public Builder setConfidence(float value) {
+        copyOnWrite();
+        instance.setConfidence(value);
+        return this;
+      }
+      /**
+       * <code>float confidence = 4;</code>
+       * @return This builder for chaining.
+       */
+      public Builder clearConfidence() {
+        copyOnWrite();
+        instance.clearConfidence();
+        return this;
+      }
+
+      // @@protoc_insertion_point(builder_scope:vosk.stt.v1.WordInfo)
+    }
+    @Override
+    @SuppressWarnings({"unchecked", "fallthrough"})
+    protected final Object dynamicMethod(
+        MethodToInvoke method,
+        Object arg0, Object arg1) {
+      switch (method) {
+        case NEW_MUTABLE_INSTANCE: {
+          return new vosk.stt.v1.SttServiceOuterClass.WordInfo();
+        }
+        case NEW_BUILDER: {
+          return new Builder();
+        }
+        case BUILD_MESSAGE_INFO: {
+            Object[] objects = new Object[] {
+              "bitField0_",
+              "startTime_",
+              "endTime_",
+              "word_",
+              "confidence_",
+            };
+            String info =
+                "\u0000\u0004\u0000\u0001\u0001\u0004\u0004\u0000\u0000\u0000\u0001\u1009\u0000\u0002" +
+                "\u1009\u0001\u0003\u0208\u0004\u0001";
+            return newMessageInfo(DEFAULT_INSTANCE, info, objects);
+        }
+        // fall through
+        case GET_DEFAULT_INSTANCE: {
+          return DEFAULT_INSTANCE;
+        }
+        case GET_PARSER: {
+          com.google.protobuf.Parser<vosk.stt.v1.SttServiceOuterClass.WordInfo> parser = PARSER;
+          if (parser == null) {
+            synchronized (vosk.stt.v1.SttServiceOuterClass.WordInfo.class) {
+              parser = PARSER;
+              if (parser == null) {
+                parser =
+                    new DefaultInstanceBasedParser<vosk.stt.v1.SttServiceOuterClass.WordInfo>(
+                        DEFAULT_INSTANCE);
+                PARSER = parser;
+              }
+            }
+          }
+          return parser;
+      }
+      case GET_MEMOIZED_IS_INITIALIZED: {
+        return (byte) 1;
+      }
+      case SET_MEMOIZED_IS_INITIALIZED: {
+        return null;
+      }
+      }
+      throw new UnsupportedOperationException();
+    }
+
+
+    // @@protoc_insertion_point(class_scope:vosk.stt.v1.WordInfo)
+    private static final vosk.stt.v1.SttServiceOuterClass.WordInfo DEFAULT_INSTANCE;
+    static {
+      WordInfo defaultInstance = new WordInfo();
+      // New instances are implicitly immutable so no need to make
+      // immutable.
+      DEFAULT_INSTANCE = defaultInstance;
+      com.google.protobuf.GeneratedMessageLite.registerDefaultInstance(
+        WordInfo.class, defaultInstance);
+    }
+
+    public static vosk.stt.v1.SttServiceOuterClass.WordInfo getDefaultInstance() {
+      return DEFAULT_INSTANCE;
+    }
+
+    private static volatile com.google.protobuf.Parser<WordInfo> PARSER;
+
+    public static com.google.protobuf.Parser<WordInfo> parser() {
+      return DEFAULT_INSTANCE.getParserForType();
+    }
+  }
+
+
+  static {
+  }
+
+  // @@protoc_insertion_point(outer_class_scope)
+}
Index: app/src/main/java/com/optiflowx/optikeysx/views/phone/PhonePortraitKeyboard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.phone\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.mandatorySystemGesturesPadding\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.ui.keyboard.NumberKeyboardActionView\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun PhonePortraitKeyboard(viewModel: KeyboardViewModel) {\r\n    \r\n    val viewWidth = LocalConfiguration.current.screenWidthDp.dp\r\n    val locale = viewModel.locale.collectAsState().value\r\n\r\n    Box(\r\n        Modifier\r\n            .mandatorySystemGesturesPadding()\r\n    ) {\r\n        Column {\r\n            NumberKeyboardActionView(locale, viewWidth)\r\n\r\n            PhoneKeyboardView(viewModel , viewWidth)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhonePortraitKeyboard.kt b/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhonePortraitKeyboard.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhonePortraitKeyboard.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhonePortraitKeyboard.kt	(date 1707381446690)
@@ -15,7 +15,7 @@
 fun PhonePortraitKeyboard(viewModel: KeyboardViewModel) {
     
     val viewWidth = LocalConfiguration.current.screenWidthDp.dp
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
 
     Box(
         Modifier
Index: app/src/main/java/com/optiflowx/optikeysx/views/phone/DefaultPhoneKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.phone\r\n\r\nimport android.content.Context\r\nimport android.content.res.Configuration\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.wrapContentSize\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.RectangleShape\r\nimport androidx.compose.ui.platform.AbstractComposeView\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport com.optiflowx.optikeysx.ui.AppleKeyboardIMETheme\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\nclass DefaultPhoneKeyboardView(context: Context, val locale: String) : AbstractComposeView(context) {\r\n    @Composable\r\n    override fun Content() {\r\n        val config = LocalConfiguration.current\r\n\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        val viewModel = viewModel<KeyboardViewModel>(\r\n            key = \"KeyboardViewModel\",\r\n            factory = object : ViewModelProvider.Factory {\r\n                override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n                    return KeyboardViewModel(context) as T\r\n                }\r\n            }\r\n        )\r\n\r\n        val orientation = rememberSaveable(config.orientation) {\r\n            mutableIntStateOf(config.orientation)\r\n        }\r\n\r\n        LaunchedEffect(locale) {\r\n            viewModel.initLocale(locale)\r\n        }\r\n\r\n        DisposableEffect(Unit) {\r\n            viewModel.initSoundIDs(context)\r\n\r\n            onDispose { viewModel.onDisposeSoundIDs() }\r\n        }\r\n\r\n        AppleKeyboardIMETheme {\r\n            Box(Modifier.wrapContentSize()) {\r\n                Card(\r\n                    shape = RectangleShape,\r\n                    colors = CardDefaults.cardColors(\r\n                        containerColor = MaterialTheme.colorScheme.background\r\n                    ),\r\n                ) {\r\n                    if (orientation.intValue == Configuration.ORIENTATION_PORTRAIT) {\r\n                        PhonePortraitKeyboard(viewModel)\r\n                    } else PhoneLandscapeKeyboard(viewModel)\r\n                }\r\n            }\r\n\r\n            isSystemInDarkTheme()\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/phone/DefaultPhoneKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/phone/DefaultPhoneKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/phone/DefaultPhoneKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/phone/DefaultPhoneKeyboardView.kt	(date 1707381788243)
@@ -1,72 +1,73 @@
-package com.optiflowx.optikeysx.views.phone
-
-import android.content.Context
-import android.content.res.Configuration
-import androidx.compose.foundation.isSystemInDarkTheme
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.wrapContentSize
-import androidx.compose.material3.Card
-import androidx.compose.material3.CardDefaults
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.DisposableEffect
-import androidx.compose.runtime.LaunchedEffect
-import androidx.compose.runtime.mutableIntStateOf
-import androidx.compose.runtime.saveable.rememberSaveable
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.RectangleShape
-import androidx.compose.ui.platform.AbstractComposeView
-import androidx.compose.ui.platform.LocalConfiguration
-import androidx.lifecycle.ViewModel
-import androidx.lifecycle.ViewModelProvider
-import androidx.lifecycle.viewmodel.compose.viewModel
-import com.optiflowx.optikeysx.ui.AppleKeyboardIMETheme
-import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
-
-class DefaultPhoneKeyboardView(context: Context, val locale: String) : AbstractComposeView(context) {
-    @Composable
-    override fun Content() {
-        val config = LocalConfiguration.current
-
-        @Suppress("UNCHECKED_CAST")
-        val viewModel = viewModel<KeyboardViewModel>(
-            key = "KeyboardViewModel",
-            factory = object : ViewModelProvider.Factory {
-                override fun <T : ViewModel> create(modelClass: Class<T>): T {
-                    return KeyboardViewModel(context) as T
-                }
-            }
-        )
-
-        val orientation = rememberSaveable(config.orientation) {
-            mutableIntStateOf(config.orientation)
-        }
-
-        LaunchedEffect(locale) {
-            viewModel.initLocale(locale)
-        }
-
-        DisposableEffect(Unit) {
-            viewModel.initSoundIDs(context)
-
-            onDispose { viewModel.onDisposeSoundIDs() }
-        }
-
-        AppleKeyboardIMETheme {
-            Box(Modifier.wrapContentSize()) {
-                Card(
-                    shape = RectangleShape,
-                    colors = CardDefaults.cardColors(
-                        containerColor = MaterialTheme.colorScheme.background
-                    ),
-                ) {
-                    if (orientation.intValue == Configuration.ORIENTATION_PORTRAIT) {
-                        PhonePortraitKeyboard(viewModel)
-                    } else PhoneLandscapeKeyboard(viewModel)
-                }
-            }
-
-            isSystemInDarkTheme()
-        }
-    }
-}
\ No newline at end of file
+//package com.optiflowx.optikeysx.views.phone
+//
+//import android.content.Context
+//import android.content.res.Configuration
+//import androidx.compose.foundation.isSystemInDarkTheme
+//import androidx.compose.foundation.layout.Box
+//import androidx.compose.foundation.layout.wrapContentSize
+//import androidx.compose.material3.Card
+//import androidx.compose.material3.CardDefaults
+//import androidx.compose.material3.MaterialTheme
+//import androidx.compose.runtime.Composable
+//import androidx.compose.runtime.DisposableEffect
+//import androidx.compose.runtime.LaunchedEffect
+//import androidx.compose.runtime.mutableIntStateOf
+//import androidx.compose.runtime.saveable.rememberSaveable
+//import androidx.compose.ui.Modifier
+//import androidx.compose.ui.graphics.RectangleShape
+//import androidx.compose.ui.platform.AbstractComposeView
+//import androidx.compose.ui.platform.LocalConfiguration
+//import androidx.compose.ui.tooling.data.EmptyGroup.data
+//import androidx.lifecycle.ViewModel
+//import androidx.lifecycle.ViewModelProvider
+//import androidx.lifecycle.viewmodel.compose.viewModel
+//import com.optiflowx.optikeysx.ui.AppleKeyboardIMETheme
+//import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+//
+//class DefaultPhoneKeyboardView(context: Context, val da: String) : AbstractComposeView(context) {
+//    @Composable
+//    override fun Content() {
+//        val config = LocalConfiguration.current
+//
+//        @Suppress("UNCHECKED_CAST")
+//        val viewModel = viewModel<KeyboardViewModel>(
+//            key = "KeyboardViewModel",
+//            factory = object : ViewModelProvider.Factory {
+//                override fun <T : ViewModel> create(modelClass: Class<T>): T {
+//                    return KeyboardViewModel(context) as T
+//                }
+//            }
+//        )
+//
+//        val orientation = rememberSaveable(config.orientation) {
+//            mutableIntStateOf(config.orientation)
+//        }
+//
+//        LaunchedEffect(locale) {
+//            viewModel.initKeyboardData(data)
+//        }
+//
+//        DisposableEffect(Unit) {
+//            viewModel.initSoundIDs(context)
+//
+//            onDispose { viewModel.onDisposeSoundIDs() }
+//        }
+//
+//        AppleKeyboardIMETheme {
+//            Box(Modifier.wrapContentSize()) {
+//                Card(
+//                    shape = RectangleShape,
+//                    colors = CardDefaults.cardColors(
+//                        containerColor = MaterialTheme.colorScheme.background
+//                    ),
+//                ) {
+//                    if (orientation.intValue == Configuration.ORIENTATION_PORTRAIT) {
+//                        PhonePortraitKeyboard(viewModel)
+//                    } else PhoneLandscapeKeyboard(viewModel)
+//                }
+//            }
+//
+//            isSystemInDarkTheme()
+//        }
+//    }
+//}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneLandscapeKeyboard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.phone\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.mandatorySystemGesturesPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.ui.keyboard.NumberKeyboardActionView\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun PhoneLandscapeKeyboard(viewModel: KeyboardViewModel) {\r\n    val screenWidth = LocalConfiguration.current.screenWidthDp\r\n    val viewWidth = (screenWidth * 0.8).dp\r\n    val sideWidth = (screenWidth * 0.1)\r\n    val locale = viewModel.locale.collectAsState().value\r\n    \r\n\r\n    Column(\r\n        modifier = Modifier.mandatorySystemGesturesPadding(),\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n    ) {\r\n        NumberKeyboardActionView(locale, viewWidth)\r\n\r\n        Row(\r\n            verticalAlignment = Alignment.Bottom,\r\n            modifier = Modifier.padding(vertical = 2.dp)\r\n        ) {\r\n\r\n            Box(\r\n                contentAlignment = Alignment.BottomCenter,\r\n                modifier = Modifier\r\n                    .width(sideWidth.dp)\r\n                    .padding(bottom = 2.dp)\r\n            ) {}\r\n\r\n            PhoneKeyboardView(viewModel, viewWidth,  34, 0)\r\n\r\n            Box(\r\n                contentAlignment = Alignment.BottomCenter,\r\n                modifier = Modifier\r\n                    .width(sideWidth.dp)\r\n                    .padding(bottom = 2.dp)\r\n            ) {}\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneLandscapeKeyboard.kt b/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneLandscapeKeyboard.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneLandscapeKeyboard.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneLandscapeKeyboard.kt	(date 1707381446739)
@@ -20,7 +20,7 @@
     val screenWidth = LocalConfiguration.current.screenWidthDp
     val viewWidth = (screenWidth * 0.8).dp
     val sideWidth = (screenWidth * 0.1)
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     
 
     Column(
Index: app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.phone\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun PhoneKeyboardView(\r\n    viewModel: KeyboardViewModel, viewWidth: Dp, rowHeight: Int = 55,\r\n    bottomDivHeight: Int = 30,\r\n) {\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val isPhoneSymbols = viewModel.isPhoneSymbol.collectAsState().value\r\n    val phoneRowKeys = PhoneRowKeys(locale)\r\n    val phoneConst = PhoneConstraintsSet(rowHeight, bottomDivHeight)\r\n\r\n    ConstraintLayout(phoneConst.constraints, Modifier.width(viewWidth), optimizationLevel = OPTIMIZATION_STANDARDIZED, animateChanges = true,\r\n            ) {\r\n\r\n        Box(Modifier.layoutId('1')) {\r\n            ConstraintLayout(\r\n                phoneConst.firstRowConstraints,\r\n                Modifier\r\n                    .width(viewWidth)\r\n                    .align(Alignment.Center)\r\n                    .padding(horizontal = 3.dp), optimizationLevel = OPTIMIZATION_STANDARDIZED, animateChanges = true,\r\n            \r\n            ) { for (key in phoneRowKeys.row1Keys) PhoneNumKeyboardKey(key, viewModel) }\r\n        }\r\n        Box(Modifier.layoutId('2')) {\r\n            ConstraintLayout(\r\n                phoneConst.secondRowConstraints,\r\n                Modifier\r\n                    .width(viewWidth)\r\n                    .align(Alignment.Center)\r\n                    .padding(horizontal = 3.dp), optimizationLevel = OPTIMIZATION_STANDARDIZED, animateChanges = true,\r\n            \r\n            ) {\r\n                if (isPhoneSymbols) for (key in phoneRowKeys.row2KeysB) PhoneNumKeyboardKey(\r\n                    key,\r\n                    viewModel\r\n                ) else for (key in phoneRowKeys.row2Keys) PhoneNumKeyboardKey(\r\n                    key,\r\n                    viewModel\r\n                )\r\n            }\r\n        }\r\n        Box(Modifier.layoutId('3')) {\r\n            ConstraintLayout(\r\n                phoneConst.thirdRowConstraints,\r\n                Modifier\r\n                    .width(viewWidth)\r\n                    .align(Alignment.Center)\r\n                    .padding(horizontal = 3.dp), optimizationLevel = OPTIMIZATION_STANDARDIZED, animateChanges = true,\r\n            \r\n            ) {\r\n                if (isPhoneSymbols) for (key in phoneRowKeys.row3KeysB) PhoneNumKeyboardKey(\r\n                    key,\r\n                    viewModel\r\n                ) else for (key in phoneRowKeys.row3Keys) PhoneNumKeyboardKey(\r\n                    key,\r\n                    viewModel\r\n                )\r\n            }\r\n        }\r\n        Box(Modifier.layoutId('4')) {\r\n            ConstraintLayout(\r\n                phoneConst.fourthRowConstraints,\r\n                Modifier\r\n                    .width(viewWidth)\r\n                    .align(Alignment.Center)\r\n                    .padding(horizontal = 3.dp), optimizationLevel = OPTIMIZATION_STANDARDIZED, animateChanges = true,\r\n            \r\n            ) {\r\n                if (isPhoneSymbols) for (key in phoneRowKeys.row4keysB) PhoneNumKeyboardKey(\r\n                    key,\r\n                    viewModel\r\n                ) else for (key in phoneRowKeys.row4Keys) PhoneNumKeyboardKey(\r\n                    key,\r\n                    viewModel\r\n                )\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneKeyboardView.kt	(date 1707381446697)
@@ -19,7 +19,7 @@
     viewModel: KeyboardViewModel, viewWidth: Dp, rowHeight: Int = 55,
     bottomDivHeight: Int = 30,
 ) {
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val isPhoneSymbols = viewModel.isPhoneSymbol.collectAsState().value
     val phoneRowKeys = PhoneRowKeys(locale)
     val phoneConst = PhoneConstraintsSet(rowHeight, bottomDivHeight)
Index: app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/DownloadModelBottomSheet.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/DownloadModelBottomSheet.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/DownloadModelBottomSheet.kt
new file mode 100644
--- /dev/null	(date 1707346111134)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/DownloadModelBottomSheet.kt	(date 1707346111134)
@@ -0,0 +1,116 @@
+package com.optiflowx.optikeysx.ui.cupertino
+
+import androidx.compose.foundation.background
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.heightIn
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.lazy.LazyColumn
+import androidx.compose.material3.Card
+import androidx.compose.material3.ExperimentalMaterial3Api
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.platform.LocalConfiguration
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.unit.sp
+import com.optiflowx.optikeysx.core.data.InstalledModelReference
+import com.optiflowx.optikeysx.core.data.ModelLink
+import com.optiflowx.optikeysx.core.downloader.FileDownloader
+import io.github.alexzhirkevich.cupertino.CupertinoBottomSheetContent
+import io.github.alexzhirkevich.cupertino.CupertinoBottomSheetScaffoldState
+import io.github.alexzhirkevich.cupertino.CupertinoButton
+import io.github.alexzhirkevich.cupertino.CupertinoButtonDefaults
+import io.github.alexzhirkevich.cupertino.CupertinoText
+import io.github.alexzhirkevich.cupertino.CupertinoTopAppBar
+import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
+import io.github.alexzhirkevich.cupertino.section.CupertinoSection
+import kotlinx.coroutines.launch
+
+@OptIn(ExperimentalCupertinoApi::class, ExperimentalMaterial3Api::class)
+@Composable
+fun DownloadModelBottomSheet(
+    scaffoldState: CupertinoBottomSheetScaffoldState,
+    sheetSectionColor: Color,
+    modelOrder: List<InstalledModelReference>,
+) {
+
+    val coroutineScope = rememberCoroutineScope()
+    val context = LocalContext.current
+
+    fun closeSheet() {
+        coroutineScope.launch {
+            scaffoldState.bottomSheetState.hide()
+        }
+    }
+
+    CupertinoBottomSheetContent(
+        topBar = {
+            CupertinoTopAppBar(
+                title = {
+                    CupertinoText("Model Downloads")
+                },
+                actions = {
+                    CupertinoButton(
+                        colors = CupertinoButtonDefaults.borderlessButtonColors(),
+                        onClick = { closeSheet() }
+                    ) {
+                        CupertinoText("Cancel")
+                    }
+                },
+                isTransparent = true
+            )
+        }
+    ) { pv ->
+        CupertinoSection(
+            modifier = Modifier.padding(pv),
+            containerColor = Color.Transparent,
+            color = sheetSectionColor
+        ) {
+            item { it ->
+                LazyColumn(
+                    verticalArrangement = Arrangement.spacedBy(10.dp),
+                    modifier = Modifier
+                        .padding(it)
+                        .fillMaxWidth()
+                        .heightIn(0.dp, (LocalConfiguration.current.screenHeightDp * 0.9).dp)
+                ) {
+                    item {
+                        ModelLink.entries.filter { ml ->
+                            modelOrder.none {
+                                ml.link.substring(
+                                    ml.link.lastIndexOf('/'),
+                                    ml.link.lastIndexOf('.')
+                                ) == it.path.substring(
+                                    it.path.lastIndexOf('/')
+                                )
+                            }
+                        }.forEach { ml ->
+                            Card(
+                                onClick = {
+                                    closeSheet()
+                                    FileDownloader.downloadModel(ml, context)
+                                },
+                                modifier = Modifier.fillMaxWidth()
+                            ) {
+                                Column(
+                                    modifier = Modifier
+                                        .background(MaterialTheme.colorScheme.onSurface.copy(0.2f))
+                                        .padding(10.dp)
+                                ) {
+                                    Text(text = ml.locale.displayName)
+                                    Text(text = ml.link, fontSize = 10.sp)
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyboardBottomView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.ui.keyboard\r\n\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.interaction.MutableInteractionSource\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.semantics.Role\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\nimport com.optiflowx.optikeysx.ui.cupertino.KeyboardGlobalOptions\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun KeyboardBottomView(viewModel: KeyboardViewModel) {\r\n    val keyboardWidth = LocalConfiguration.current.screenWidthDp.dp\r\n\r\n    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n\r\n    Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier = Modifier\r\n            .layoutId(\"bottomView\")\r\n            .padding(horizontal = (keyboardWidth.value * 0.075).dp)\r\n            .fillMaxWidth()\r\n    ) {\r\n\r\n\r\n        Row(\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            verticalAlignment = Alignment.Bottom,\r\n            modifier = Modifier\r\n                .height(48.dp)\r\n                .fillMaxWidth()\r\n                .fillMaxHeight()\r\n        ) {\r\n            Box {\r\n                KeyboardGlobalOptions(viewModel, fontType, keyboardWidth)\r\n                Icon(\r\n                    painter = painterResource(R.drawable.globe_outline),\r\n                    contentDescription = \"globe\",\r\n                    tint = MaterialTheme.colorScheme.scrim,\r\n                    modifier = Modifier\r\n                        .size(30.dp)\r\n                        .clickable(\r\n                            indication = null,\r\n                            interactionSource = remember { MutableInteractionSource() },\r\n                            role = Role.Button,\r\n                        ) { viewModel.updateIsShowOptions(true) }\r\n                )\r\n            }\r\n\r\n            Icon(\r\n                painter = painterResource(\r\n                    if (isSystemInDarkTheme()) R.drawable.mic_fill else R.drawable.mic_outline\r\n                ),\r\n                contentDescription = \"microphone\",\r\n                tint = MaterialTheme.colorScheme.scrim,\r\n                modifier = Modifier\r\n                    .size(30.dp)\r\n                    .clickable(\r\n                        indication = null,\r\n                        interactionSource = remember { MutableInteractionSource() },\r\n                        role = Role.Button,\r\n                    ) { }\r\n            )\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyboardBottomView.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyboardBottomView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyboardBottomView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyboardBottomView.kt	(date 1707381185673)
@@ -14,7 +14,6 @@
 import androidx.compose.material3.Icon
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
 import androidx.compose.runtime.remember
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
@@ -24,16 +23,15 @@
 import androidx.compose.ui.semantics.Role
 import androidx.compose.ui.unit.dp
 import com.optiflowx.optikeysx.R
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
 import com.optiflowx.optikeysx.ui.cupertino.KeyboardGlobalOptions
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 
 @Composable
 fun KeyboardBottomView(viewModel: KeyboardViewModel) {
     val keyboardWidth = LocalConfiguration.current.screenWidthDp.dp
 
-    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
+    val fontType = viewModel.prefs.keyboardFontType.observeAsState().value
 
     Box(
         contentAlignment = Alignment.Center,
Index: app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/SuggestionView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.ui.keyboard\r\n\r\nimport androidx.compose.animation.core.tween\r\nimport androidx.compose.foundation.layout.BoxScope\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport androidx.constraintlayout.compose.ConstraintSet\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun SuggestionView(viewModel: KeyboardViewModel, textSize: Float, boxScope: BoxScope) {\r\n    val context = LocalContext.current\r\n    val suggestions = viewModel.wordsDictionary.collectAsState().value\r\n\r\n    val suggestion1 = remember(suggestions) {\r\n        mutableStateOf(if (suggestions.isNotEmpty()) suggestions.elementAt(0) else \"\")\r\n    }\r\n\r\n    val suggestion2 = remember(suggestions) {\r\n        mutableStateOf(if (suggestions.size >= 2) suggestions.elementAt(1) else \"\")\r\n    }\r\n\r\n    val suggestion3 = remember(suggestions) {\r\n        mutableStateOf(if (suggestions.size >= 3) suggestions.elementAt(2) else \"\")\r\n    }\r\n\r\n    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n\r\n\r\n    val constraints = ConstraintSet {\r\n        val firstSuggestion = createRefFor(\"sug1\")\r\n        val secondSuggestion = createRefFor(\"sug2\")\r\n        val thirdSuggestion = createRefFor(\"sug3\")\r\n        val div1 = createRefFor(\"div1\")\r\n        val div2 = createRefFor(\"div2\")\r\n\r\n        constrain(firstSuggestion) {\r\n            start.linkTo(parent.start)\r\n            end.linkTo(div1.start)\r\n            top.linkTo(parent.top)\r\n            bottom.linkTo(parent.bottom)\r\n        }\r\n\r\n        constrain(div1) {\r\n            start.linkTo(firstSuggestion.end)\r\n            end.linkTo(secondSuggestion.start)\r\n            top.linkTo(parent.top)\r\n            bottom.linkTo(parent.bottom)\r\n        }\r\n\r\n        constrain(secondSuggestion) {\r\n            start.linkTo(div1.end)\r\n            end.linkTo(div2.start)\r\n            top.linkTo(parent.top)\r\n            bottom.linkTo(parent.bottom)\r\n        }\r\n\r\n        constrain(div2) {\r\n            start.linkTo(secondSuggestion.end)\r\n            end.linkTo(thirdSuggestion.start)\r\n            top.linkTo(parent.top)\r\n            bottom.linkTo(parent.bottom)\r\n        }\r\n\r\n        constrain(thirdSuggestion) {\r\n            start.linkTo(div2.end)\r\n            end.linkTo(parent.end)\r\n            top.linkTo(parent.top)\r\n            bottom.linkTo(parent.bottom)\r\n        }\r\n    }\r\n\r\n    LaunchedEffect(suggestions) {\r\n        if (suggestions.isNotEmpty()) {\r\n            suggestions.forEachIndexed { index, element ->\r\n                when (index) {\r\n                    0 -> suggestion1.value = element\r\n                    1 -> suggestion2.value = element\r\n                    2 -> suggestion3.value = element\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    boxScope.apply {\r\n        ConstraintLayout(\r\n            constraintSet = constraints,\r\n            modifier = Modifier.matchParentSize(),\r\n            optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n            animateChanges = true,\r\n            animationSpec = tween(300),\r\n        ) {\r\n            Suggestion(\"sug1\", suggestion1.value, fontType, textSize, onClick = {\r\n                viewModel.onSuggestionClick(\r\n                    suggestion1.value,\r\n                    context\r\n                )\r\n            })\r\n            Div(\"div1\")\r\n            Suggestion(\"sug2\", suggestion2.value, fontType, textSize, onClick = {\r\n                viewModel.onSuggestionClick(\r\n                    suggestion2.value,\r\n                    context\r\n                )\r\n            })\r\n            Div(\"div2\")\r\n            Suggestion(\"sug3\", suggestion3.value, fontType, textSize, onClick = {\r\n                viewModel.onSuggestionClick(\r\n                    suggestion3.value,\r\n                    context\r\n                )\r\n            })\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/SuggestionView.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/SuggestionView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/SuggestionView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/SuggestionView.kt	(date 1707381185653)
@@ -5,17 +5,15 @@
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.LaunchedEffect
 import androidx.compose.runtime.collectAsState
-import androidx.compose.runtime.getValue
 import androidx.compose.runtime.mutableStateOf
 import androidx.compose.runtime.remember
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.platform.LocalContext
 import androidx.constraintlayout.compose.ConstraintLayout
 import androidx.constraintlayout.compose.ConstraintSet
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
 import com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 
 @Composable
 fun SuggestionView(viewModel: KeyboardViewModel, textSize: Float, boxScope: BoxScope) {
@@ -34,7 +32,7 @@
         mutableStateOf(if (suggestions.size >= 3) suggestions.elementAt(2) else "")
     }
 
-    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
+    val fontType = viewModel.prefs.keyboardFontType.observeAsState().value
 
 
     val constraints = ConstraintSet {
Index: app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/NumberKeyboardActionView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.ui.keyboard\r\n\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.Spacer\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.size\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.PlatformTextStyle\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.services.IMEService\r\nimport io.github.alexzhirkevich.cupertino.icons.CupertinoIcons\r\nimport io.github.alexzhirkevich.cupertino.icons.outlined.ChevronDown\r\nimport io.github.alexzhirkevich.cupertino.icons.outlined.ChevronUp\r\nimport io.github.alexzhirkevich.cupertino.theme.CupertinoColors\r\nimport io.github.alexzhirkevich.cupertino.theme.systemBlue\r\n\r\n@Composable\r\nfun NumberKeyboardActionView(locale: String, viewWidth: Dp) {\r\n\r\n    val imeService = LocalContext.current as IMEService\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n\r\n    Box(\r\n        modifier = Modifier\r\n            .width(viewWidth)\r\n            .height(35.dp)\r\n            .fillMaxWidth()\r\n    ) {\r\n        Row(\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            modifier = Modifier\r\n                .fillMaxSize()\r\n                .padding(horizontal = 12.dp)\r\n        ) {\r\n            Row(verticalAlignment = Alignment.CenterVertically) {\r\n                Icon(\r\n                    CupertinoIcons.Default.ChevronUp, \"arrowUp\",\r\n                    tint = MaterialTheme.colorScheme.primary,\r\n                    modifier = Modifier\r\n                        .size(22.dp)\r\n                        .clickable(\r\n                            onClick = { }\r\n                        ),\r\n                )\r\n                Spacer(modifier = Modifier.width(15.dp))\r\n                Icon(\r\n                    CupertinoIcons.Default.ChevronDown, \"arrowDown\",\r\n                    tint = MaterialTheme.colorScheme.primary,\r\n                    modifier = Modifier\r\n                        .size(22.dp)\r\n                        .clickable(\r\n                            onClick = { imeService.currentInputConnection?.performEditorAction(6) }\r\n                        ),\r\n                )\r\n            }\r\n            Text(\r\n                keyboardLocale.action(\"done\").replaceFirstChar {\r\n                    it.uppercase()\r\n                },\r\n                style = TextStyle(\r\n                    fontFamily = appFontType(\"Bold\"),\r\n                    color = CupertinoColors.systemBlue,\r\n                    fontSize = TextUnit(16f, TextUnitType.Sp).nonScaledSp,\r\n                    platformStyle = PlatformTextStyle(includeFontPadding = false)\r\n                ),\r\n                modifier = Modifier.clickable(\r\n                    onClick = {\r\n                        imeService.currentInputConnection?.performEditorAction(6)\r\n                    }\r\n                )\r\n            )\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/NumberKeyboardActionView.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/NumberKeyboardActionView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/NumberKeyboardActionView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/NumberKeyboardActionView.kt	(date 1707381405200)
@@ -24,10 +24,11 @@
 import androidx.compose.ui.unit.TextUnit
 import androidx.compose.ui.unit.TextUnitType
 import androidx.compose.ui.unit.dp
+import com.optiflowx.optikeysx.core.enums.KeyboardFontType
 import com.optiflowx.optikeysx.core.utils.KeyboardLocale
 import com.optiflowx.optikeysx.core.utils.appFontType
 import com.optiflowx.optikeysx.core.utils.nonScaledSp
-import com.optiflowx.optikeysx.services.IMEService
+import com.optiflowx.optikeysx.ime.IMEService
 import io.github.alexzhirkevich.cupertino.icons.CupertinoIcons
 import io.github.alexzhirkevich.cupertino.icons.outlined.ChevronDown
 import io.github.alexzhirkevich.cupertino.icons.outlined.ChevronUp
@@ -79,7 +80,7 @@
                     it.uppercase()
                 },
                 style = TextStyle(
-                    fontFamily = appFontType("Bold"),
+                    fontFamily = appFontType(KeyboardFontType.Bold),
                     color = CupertinoColors.systemBlue,
                     fontSize = TextUnit(16f, TextUnitType.Sp).nonScaledSp,
                     platformStyle = PlatformTextStyle(includeFontPadding = false)
Index: app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyboardKey.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.ui.keyboard\r\n\r\nimport android.util.Log\r\nimport android.view.inputmethod.EditorInfo\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.runtime.setValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.platform.LocalView\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.PlatformTextStyle\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.unit.sp\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.services.IMEService\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun KeyboardKey(key: Key, viewModel: KeyboardViewModel) {\r\n    val ctx = LocalContext.current\r\n    val view = LocalView.current\r\n    \r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n    val colorScheme = MaterialTheme.colorScheme\r\n\r\n    val isSymbols = key.id == \"symbol\"\r\n    val isShift = key.id == \"shift\"\r\n    val isErase = key.id == \"delete\"\r\n    val isEmoji = key.id == \"emoji\"\r\n\r\n    val colorA = colorScheme.onSurface\r\n    val colorB = colorScheme.inversePrimary\r\n    val colorC = colorScheme.secondaryContainer\r\n    val colorD = colorScheme.primary\r\n\r\n\r\n    val isAllCaps = viewModel.isAllCaps.collectAsState().value\r\n    val isNumberSymbol = viewModel.isNumberSymbol.collectAsState().value\r\n    val isCapsLock = viewModel.isCapsLock.collectAsState().value\r\n    val buttonColor = viewModel.keyActionButtonColor.collectAsState().value\r\n    val textColor = viewModel.keyActionTextColor.collectAsState().value\r\n    val text = viewModel.keyActionText.collectAsState().value\r\n\r\n    var keyValue by rememberSaveable { mutableStateOf(key.value) }\r\n    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n\r\n    LaunchedEffect(isAllCaps) {\r\n        keyValue = if (isAllCaps) {\r\n            key.value.uppercase()\r\n        } else key.value.lowercase()\r\n    }\r\n\r\n    DisposableEffect(key.id) {\r\n        if (key.id == \"action\") {\r\n            view.addOnLayoutChangeListener { view, _, _, _, _, _, _, _, _ ->\r\n                view.isInLayout.let {visible ->\r\n                    val action =\r\n                        (ctx as IMEService).currentInputEditorInfo.imeOptions and EditorInfo.IME_MASK_ACTION\r\n                    if (visible) {\r\n                        when (action) {\r\n                            EditorInfo.IME_ACTION_DONE -> {\r\n                                viewModel.updateIMEActions(colorA, colorB, \"done\")\r\n                            }\r\n\r\n                            EditorInfo.IME_ACTION_GO -> {\r\n                                viewModel.updateIMEActions(colorA, colorB, \"go\")\r\n                            }\r\n\r\n                            EditorInfo.IME_ACTION_SEARCH -> {\r\n                                viewModel.updateIMEActions(colorA, colorB, \"search\")\r\n                            }\r\n\r\n                            EditorInfo.IME_ACTION_NEXT -> {\r\n                                viewModel.updateIMEActions(colorA, colorB, \"next\")\r\n                            }\r\n\r\n                            EditorInfo.IME_ACTION_SEND -> {\r\n                                viewModel.updateIMEActions(colorA, colorB, \"send\")\r\n                            }\r\n\r\n                            else -> viewModel.updateIMEActions(colorC, colorD, \"return\")\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        onDispose {\r\n            view.removeOnLayoutChangeListener { _, _, _, _, _, _, _, _, _ ->\r\n                Log.v(\"KEYBOARD INFO\", \"onDispose: actionView Listener\")\r\n            }\r\n        }\r\n    }\r\n\r\n    val width = LocalConfiguration.current.screenWidthDp\r\n    val widthFactor = 0.086f\r\n    val specialWidthFactor = 0.1275f\r\n    val popupWidth = if (\r\n        key.id == \".\" || key.id == \",\" || key.id == \"?\" || key.id == \"!\" || key.id == \"'\"\r\n    ) (width * specialWidthFactor) else width * widthFactor\r\n\r\n    //Erase and Shift Keys\r\n    if (isErase) {\r\n        EraseButton(\r\n            color = colorC,\r\n            id = key.id,\r\n            onClick = {\r\n                viewModel.playSound(key)\r\n                viewModel.vibrate()\r\n            },\r\n            onRepeatableClick = { viewModel.onIKeyClick(key, ctx) }\r\n        ) {\r\n            Icon(\r\n                painter = painterResource(R.drawable.deletebackward),\r\n                contentDescription = \"icon\",\r\n                modifier = Modifier\r\n                    .fillMaxHeight(0.54f)\r\n                    .fillMaxWidth(0.54f),\r\n                tint = colorScheme.primary,\r\n            )\r\n        }\r\n    } else if (isShift || isSymbols || isEmoji) {\r\n        (if (isShift) {\r\n            if (isCapsLock) painterResource(R.drawable.capslockfill)\r\n            else painterResource(\r\n                if (isAllCaps) R.drawable.shift_fill else R.drawable.shift\r\n            )\r\n        } else if (isSymbols) {\r\n            painterResource(\r\n                if (isNumberSymbol) R.drawable.num else R.drawable.sym\r\n            )\r\n        } else {\r\n            painterResource(\r\n                if (isSystemInDarkTheme()) R.drawable.emoji_fill else R.drawable.emoji_outline\r\n            )\r\n        }).apply {\r\n            KeyButton(\r\n                color = (if (isShift && isAllCaps) colorScheme.surface else colorC),\r\n                id = key.id,\r\n                showPopup = false,\r\n                onClick = {\r\n                    viewModel.onIKeyClick(key, ctx).let {\r\n                        viewModel.playSound(key)\r\n                        viewModel.vibrate()\r\n                    }\r\n                }\r\n            ) {\r\n                Icon(\r\n                    painter = this,\r\n                    contentDescription = \"icon\",\r\n                    modifier = Modifier\r\n                        .fillMaxHeight(0.54f)\r\n                        .fillMaxWidth(0.54f),\r\n                    tint = if (isAllCaps && !isEmoji && !isSymbols)\r\n                        Color.Black else colorScheme.primary,\r\n                )\r\n            }\r\n        }\r\n    } else {\r\n        //All Other Text Keys\r\n        (if (key.id == \"123\" || key.id == \"ABC\" || key.id == \"action\") {\r\n            if (key.id == \"action\") buttonColor else colorC\r\n        } else colorScheme.secondary).apply {\r\n            KeyButton(\r\n                color = this,\r\n                id = key.id,\r\n                text = keyValue,\r\n                popupWidth = popupWidth,\r\n                showPopup = !(key.id == \"123\" || key.id == \"ABC\" || key.id == \"action\" || key.id == \"space\"),\r\n                onClick = {\r\n                    viewModel.onTKeyClick(key, ctx, text).let {\r\n                        viewModel.playSound(key)\r\n                        viewModel.vibrate()\r\n                    }\r\n                }\r\n            ) {\r\n                Text(\r\n                    text = (if (key.id == \"ABC\" || key.id == \"space\" || key.id == \"action\") {\r\n                        if (key.id == \"action\") keyboardLocale.action(text)\r\n                        else key.value\r\n                    } else keyValue),\r\n                    maxLines = 1,\r\n                    style = TextStyle(\r\n                        fontFamily = appFontType(fontType),\r\n                        fontSize = (if (key.id == \"123\" || key.id == \"ABC\" || key.id == \"action\" || key.id == \"space\")\r\n                            15.sp else 22.5.sp).nonScaledSp,\r\n                        platformStyle = PlatformTextStyle(includeFontPadding = false)\r\n                    ),\r\n                    color = if (key.id == \"action\") textColor else colorD,\r\n                )\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyboardKey.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyboardKey.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyboardKey.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyboardKey.kt	(date 1707381185626)
@@ -27,20 +27,19 @@
 import androidx.compose.ui.unit.sp
 import com.optiflowx.optikeysx.R
 import com.optiflowx.optikeysx.core.model.Key
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
 import com.optiflowx.optikeysx.core.utils.KeyboardLocale
 import com.optiflowx.optikeysx.core.utils.appFontType
 import com.optiflowx.optikeysx.core.utils.nonScaledSp
-import com.optiflowx.optikeysx.services.IMEService
+import com.optiflowx.optikeysx.ime.IMEService
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 
 @Composable
 fun KeyboardKey(key: Key, viewModel: KeyboardViewModel) {
     val ctx = LocalContext.current
     val view = LocalView.current
     
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
     val colorScheme = MaterialTheme.colorScheme
 
@@ -63,7 +62,7 @@
     val text = viewModel.keyActionText.collectAsState().value
 
     var keyValue by rememberSaveable { mutableStateOf(key.value) }
-    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
+    val fontType = viewModel.prefs.keyboardFontType.observeAsState().value
 
     LaunchedEffect(isAllCaps) {
         keyValue = if (isAllCaps) {
@@ -159,6 +158,7 @@
                 color = (if (isShift && isAllCaps) colorScheme.surface else colorC),
                 id = key.id,
                 showPopup = false,
+                prefs = viewModel.prefs,
                 onClick = {
                     viewModel.onIKeyClick(key, ctx).let {
                         viewModel.playSound(key)
@@ -185,6 +185,7 @@
             KeyButton(
                 color = this,
                 id = key.id,
+                prefs = viewModel.prefs,
                 text = keyValue,
                 popupWidth = popupWidth,
                 showPopup = !(key.id == "123" || key.id == "ABC" || key.id == "action" || key.id == "space"),
Index: app/src/main/java/com/optiflowx/optikeysx/AppPrefs.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/AppPrefs.kt b/app/src/main/java/com/optiflowx/optikeysx/AppPrefs.kt
new file mode 100644
--- /dev/null	(date 1707377222901)
+++ b/app/src/main/java/com/optiflowx/optikeysx/AppPrefs.kt	(date 1707377222901)
@@ -0,0 +1,97 @@
+package com.optiflowx.optikeysx
+
+import com.optiflowx.optikeysx.core.enums.KeepScreenAwakeMode
+import com.optiflowx.optikeysx.core.enums.KeyboardFontType
+import com.optiflowx.optikeysx.core.utils.ModelListSerializer
+import dev.patrickgold.jetpref.datastore.JetPref
+import dev.patrickgold.jetpref.datastore.model.PreferenceModel
+
+// Defining a getter function for easy retrieval of the AppPrefs model.
+// You can name this however you want, the convention is <projectName>PreferenceModel
+fun optikeysxPreferences() = JetPref.getOrCreatePreferenceModel(AppPrefs::class, ::AppPrefs)
+
+// Defining a preference model for our app prefs
+// The name we give here is the file name of the preferences and is saved
+// within the app's `jetpref_datastore` directory.
+class AppPrefs : PreferenceModel("optikeysx-app-preferences") {
+    val modelsOrder = custom(
+        key = "sl_models_order",
+        default = listOf(),
+        serializer = ModelListSerializer()
+    )
+
+    val keepScreenAwake = enum(
+        key = "e_keep_screen_awake",
+        default = KeepScreenAwakeMode.NEVER
+    )
+
+    val keyboardFontType = enum(
+        key = "keyboard_font_type",
+        default = KeyboardFontType.Regular
+    )
+
+    val startRecognitionInstantaneously = boolean(
+        key = "start_recognition_instantaneously",
+        default = true
+    )
+
+    val autoSwitchIBackIME = boolean(
+        key = "auto_switch_back_ime",
+        default = false
+    )
+
+    val keepLanguageModelInMemory = boolean(
+        key = "keep_language_model_in_memory",
+        default = false
+    )
+
+    val isAutoCorrect = boolean(
+        key = "is_auto_correct",
+        default = false,
+    )
+
+    val isCheckSpelling = boolean(
+        key = "is_check_spelling",
+        default = false,
+    )
+
+    val isAutoCapitalisation = boolean(
+        key = "is_auto_capitalisation",
+        default = true,
+    )
+
+    val isVibrateOnKeypress = boolean(
+        key = "is_vibrate_on_keypress",
+        default = false,
+    )
+
+    val isSoundOnKeypress = boolean(
+        key = "is_sound_on_keypress",
+        default = false,
+    )
+
+    val isCharacterPreview = boolean(
+        key = "is_character_preview",
+        default = false,
+    )
+
+    val isPredictive = boolean(
+        key = "is_predictive",
+        default = false,
+    )
+
+    val isEnableCapsLock = boolean(
+        key = "is_enable_caps_lock",
+        default = false,
+    )
+    
+    val isAutoCorrection = boolean(
+        key = "is_auto_correction",
+        default = false,
+    )
+    
+    val isDotShortcut = boolean(
+        key = "is_dot_shortcut",
+        default = false,
+    )
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/views/number/DefaultNumberKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.number\r\n\r\nimport android.content.Context\r\nimport android.content.res.Configuration\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.wrapContentSize\r\nimport androidx.compose.material3.Card\r\nimport androidx.compose.material3.CardDefaults\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.DisposableEffect\r\nimport androidx.compose.runtime.LaunchedEffect\r\nimport androidx.compose.runtime.mutableIntStateOf\r\nimport androidx.compose.runtime.saveable.rememberSaveable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.RectangleShape\r\nimport androidx.compose.ui.platform.AbstractComposeView\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport com.optiflowx.optikeysx.ui.AppleKeyboardIMETheme\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\nclass DefaultNumberKeyboardView(context: Context, val locale: String) : AbstractComposeView(context) {\r\n    @Composable\r\n    override fun Content() {\r\n        val config = LocalConfiguration.current\r\n\r\n        @Suppress(\"UNCHECKED_CAST\")\r\n        val viewModel = viewModel<KeyboardViewModel>(\r\n            key = \"KeyboardViewModel\",\r\n            factory = object : ViewModelProvider.Factory {\r\n                override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n                    return KeyboardViewModel(context) as T\r\n                }\r\n            }\r\n        )\r\n\r\n        val orientation = rememberSaveable(config.orientation) {\r\n            mutableIntStateOf(config.orientation)\r\n        }\r\n\r\n        LaunchedEffect(locale) {\r\n            viewModel.initLocale(locale)\r\n        }\r\n\r\n        DisposableEffect(Unit) {\r\n            viewModel.initSoundIDs(context)\r\n\r\n            onDispose { viewModel.onDisposeSoundIDs() }\r\n        }\r\n\r\n        AppleKeyboardIMETheme {\r\n            Box(Modifier.wrapContentSize()) {\r\n                Card(\r\n                    shape = RectangleShape,\r\n                    colors = CardDefaults.cardColors(\r\n                        containerColor = MaterialTheme.colorScheme.background\r\n                    ),\r\n                ) {\r\n                    if (orientation.intValue == Configuration.ORIENTATION_PORTRAIT) {\r\n                        NumberPortraitKeyboard(viewModel, locale)\r\n                    } else NumberLandscapeKeyboard(viewModel, locale)\r\n                }\r\n            }\r\n\r\n            isSystemInDarkTheme()\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/number/DefaultNumberKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/number/DefaultNumberKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/number/DefaultNumberKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/number/DefaultNumberKeyboardView.kt	(date 1707381790678)
@@ -1,72 +1,69 @@
-package com.optiflowx.optikeysx.views.number
-
-import android.content.Context
-import android.content.res.Configuration
-import androidx.compose.foundation.isSystemInDarkTheme
-import androidx.compose.foundation.layout.Box
-import androidx.compose.foundation.layout.wrapContentSize
-import androidx.compose.material3.Card
-import androidx.compose.material3.CardDefaults
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.DisposableEffect
-import androidx.compose.runtime.LaunchedEffect
-import androidx.compose.runtime.mutableIntStateOf
-import androidx.compose.runtime.saveable.rememberSaveable
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.graphics.RectangleShape
-import androidx.compose.ui.platform.AbstractComposeView
-import androidx.compose.ui.platform.LocalConfiguration
-import androidx.lifecycle.ViewModel
-import androidx.lifecycle.ViewModelProvider
-import androidx.lifecycle.viewmodel.compose.viewModel
-import com.optiflowx.optikeysx.ui.AppleKeyboardIMETheme
-import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
-
-class DefaultNumberKeyboardView(context: Context, val locale: String) : AbstractComposeView(context) {
-    @Composable
-    override fun Content() {
-        val config = LocalConfiguration.current
-
-        @Suppress("UNCHECKED_CAST")
-        val viewModel = viewModel<KeyboardViewModel>(
-            key = "KeyboardViewModel",
-            factory = object : ViewModelProvider.Factory {
-                override fun <T : ViewModel> create(modelClass: Class<T>): T {
-                    return KeyboardViewModel(context) as T
-                }
-            }
-        )
-
-        val orientation = rememberSaveable(config.orientation) {
-            mutableIntStateOf(config.orientation)
-        }
-
-        LaunchedEffect(locale) {
-            viewModel.initLocale(locale)
-        }
-
-        DisposableEffect(Unit) {
-            viewModel.initSoundIDs(context)
-
-            onDispose { viewModel.onDisposeSoundIDs() }
-        }
-
-        AppleKeyboardIMETheme {
-            Box(Modifier.wrapContentSize()) {
-                Card(
-                    shape = RectangleShape,
-                    colors = CardDefaults.cardColors(
-                        containerColor = MaterialTheme.colorScheme.background
-                    ),
-                ) {
-                    if (orientation.intValue == Configuration.ORIENTATION_PORTRAIT) {
-                        NumberPortraitKeyboard(viewModel, locale)
-                    } else NumberLandscapeKeyboard(viewModel, locale)
-                }
-            }
-
-            isSystemInDarkTheme()
-        }
-    }
-}
+//package com.optiflowx.optikeysx.views.number
+//
+//import android.content.Context
+//import androidx.compose.foundation.isSystemInDarkTheme
+//import androidx.compose.foundation.layout.Box
+//import androidx.compose.foundation.layout.wrapContentSize
+//import androidx.compose.material3.Card
+//import androidx.compose.material3.CardDefaults
+//import androidx.compose.material3.MaterialTheme
+//import androidx.compose.runtime.Composable
+//import androidx.compose.runtime.DisposableEffect
+//import androidx.compose.runtime.LaunchedEffect
+//import androidx.compose.runtime.mutableIntStateOf
+//import androidx.compose.runtime.saveable.rememberSaveable
+//import androidx.compose.ui.Modifier
+//import androidx.compose.ui.graphics.RectangleShape
+//import androidx.compose.ui.platform.AbstractComposeView
+//import androidx.compose.ui.platform.LocalConfiguration
+//import androidx.lifecycle.ViewModel
+//import androidx.lifecycle.ViewModelProvider
+//import androidx.lifecycle.viewmodel.compose.viewModel
+//import com.optiflowx.optikeysx.ui.AppleKeyboardIMETheme
+//import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+//
+//class DefaultNumberKeyboardView(context: Context, val locale: String) : AbstractComposeView(context) {
+//    @Composable
+//    override fun Content() {
+//        val config = LocalConfiguration.current
+//
+//        @Suppress("UNCHECKED_CAST")
+//        val viewModel = viewModel<KeyboardViewModel>(
+//            key = "KeyboardViewModel",
+//            factory = object : ViewModelProvider.Factory {
+//                override fun <T : ViewModel> create(modelClass: Class<T>): T {
+//                    return KeyboardViewModel(context) as T
+//                }
+//            }
+//        )
+//
+//        val orientation = rememberSaveable(config.orientation) {
+//            mutableIntStateOf(config.orientation)
+//        }
+//
+//        LaunchedEffect(locale) {
+//            viewModel.initLocale(locale)
+//        }
+//
+//        DisposableEffect(Unit) {
+//            viewModel.initSoundIDs(context)
+//
+//            onDispose { viewModel.onDisposeSoundIDs() }
+//        }
+//
+//        AppleKeyboardIMETheme {
+//            Box(Modifier.wrapContentSize()) {
+//                Card(
+//                    shape = RectangleShape,
+//                    colors = CardDefaults.cardColors(
+//                        containerColor = MaterialTheme.colorScheme.background
+//                    ),
+//                ) {
+//
+//                }
+//            }
+//
+//            isSystemInDarkTheme()
+//        }
+//    }
+//}
Index: app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyButton.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.ui.keyboard\r\n\r\nimport androidx.compose.foundation.interaction.MutableInteractionSource\r\nimport androidx.compose.foundation.interaction.collectIsPressedAsState\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.absoluteOffset\r\nimport androidx.compose.foundation.layout.absolutePadding\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Surface\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\n\r\n@Composable\r\nfun KeyButton(\r\n    modifier: Modifier = Modifier,\r\n    enabled: Boolean = true,\r\n    text: String = \"\",\r\n    color: Color,\r\n    id: String,\r\n    popupWidth: Float = 0f,\r\n    showPopup: Boolean,\r\n    onClick: () -> Unit,\r\n    content: @Composable () -> Unit,\r\n\r\n    ) {\r\n    val isIgnoreElevation = (id == \"switch\" || id == \"period\")\r\n\r\n    val interactionSource = remember { MutableInteractionSource() }\r\n\r\n    val isCharacterPreview = rememberPreference(PrefsConstants.CHARACTER_PREVIEW_KEY, false)\r\n\r\n    val pressed = interactionSource.collectIsPressedAsState()\r\n\r\n    Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier = Modifier\r\n            .layoutId(id)\r\n            .fillMaxSize()\r\n    ) {\r\n        if(!isIgnoreElevation) {\r\n            Surface(\r\n                color = MaterialTheme.colorScheme.tertiaryContainer,\r\n                shape = RoundedCornerShape(5.5.dp),\r\n                modifier = Modifier\r\n                    .matchParentSize()\r\n                    .absoluteOffset(0.dp, 1.5.dp)\r\n                    .absolutePadding(left = 0.75.dp, right = 0.5.dp)\r\n            ) {}\r\n        }\r\n\r\n        Surface(\r\n            color = color,\r\n            enabled = enabled,\r\n            shape = RoundedCornerShape((5.5).dp),\r\n            interactionSource = interactionSource,\r\n            onClick = onClick,\r\n            modifier = modifier.matchParentSize()\r\n        ) {\r\n            Box(contentAlignment = Alignment.Center) {\r\n                if (pressed.value && showPopup && isCharacterPreview.value) {\r\n                    KeyButtonPopup(popupWidth.dp, text)\r\n                }\r\n\r\n                content()\r\n            }\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyButton.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyButton.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyButton.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/keyboard/KeyButton.kt	(date 1707382571268)
@@ -16,8 +16,8 @@
 import androidx.compose.ui.graphics.Color
 import androidx.compose.ui.layout.layoutId
 import androidx.compose.ui.unit.dp
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
+import com.optiflowx.optikeysx.AppPrefs
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 
 @Composable
 fun KeyButton(
@@ -28,15 +28,15 @@
     id: String,
     popupWidth: Float = 0f,
     showPopup: Boolean,
+    prefs: AppPrefs,
     onClick: () -> Unit,
     content: @Composable () -> Unit,
-
-    ) {
+) {
     val isIgnoreElevation = (id == "switch" || id == "period")
 
     val interactionSource = remember { MutableInteractionSource() }
 
-    val isCharacterPreview = rememberPreference(PrefsConstants.CHARACTER_PREVIEW_KEY, false)
+    val isCharacterPreview = prefs.isCharacterPreview.observeAsState().value
 
     val pressed = interactionSource.collectIsPressedAsState()
 
@@ -46,7 +46,7 @@
             .layoutId(id)
             .fillMaxSize()
     ) {
-        if(!isIgnoreElevation) {
+        if (!isIgnoreElevation) {
             Surface(
                 color = MaterialTheme.colorScheme.tertiaryContainer,
                 shape = RoundedCornerShape(5.5.dp),
@@ -66,7 +66,7 @@
             modifier = modifier.matchParentSize()
         ) {
             Box(contentAlignment = Alignment.Center) {
-                if (pressed.value && showPopup && isCharacterPreview.value) {
+                if (pressed.value && showPopup && isCharacterPreview) {
                     KeyButtonPopup(popupWidth.dp, text)
                 }
 
Index: app/src/main/java/com/optiflowx/optikeysx/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport com.optiflowx.optikeysx.screens.NavGraphs\r\nimport com.ramcosta.composedestinations.DestinationsNavHost\r\nimport io.github.alexzhirkevich.cupertino.theme.CupertinoTheme\r\n\r\nclass MainActivity : AppCompatActivity() {\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        setContent {\r\n            enableEdgeToEdge()\r\n\r\n            CupertinoTheme {\r\n                DestinationsNavHost(navGraph = NavGraphs.root)\r\n                isSystemInDarkTheme()\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/MainActivity.kt b/app/src/main/java/com/optiflowx/optikeysx/MainActivity.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/MainActivity.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/MainActivity.kt	(date 1707378318334)
@@ -5,21 +5,65 @@
 import androidx.activity.enableEdgeToEdge
 import androidx.appcompat.app.AppCompatActivity
 import androidx.compose.foundation.isSystemInDarkTheme
-import com.optiflowx.optikeysx.screens.NavGraphs
-import com.ramcosta.composedestinations.DestinationsNavHost
+import androidx.compose.runtime.collectAsState
+import cafe.adriel.voyager.navigator.Navigator
+import com.optiflowx.optikeysx.core.Tools
+import com.optiflowx.optikeysx.screens.home.HomeScreen
+import com.optiflowx.optikeysx.ui.cupertino.GrantPermissionUI
 import io.github.alexzhirkevich.cupertino.theme.CupertinoTheme
+import kotlinx.coroutines.flow.MutableStateFlow
 
 class MainActivity : AppCompatActivity() {
 
+    private val micGranted = MutableStateFlow(false)
+    private val imeGranted = MutableStateFlow(false)
+    private val keyboardSelected = MutableStateFlow(true)
+    private val notiGranted = MutableStateFlow(false)
+
+    private fun checkPermissions() {
+        micGranted.value = Tools.isMicrophonePermissionGranted(this)
+        imeGranted.value = Tools.isIMEEnabled(this)
+        notiGranted.value = Tools.isNotificationAccessGranted(this)
+//        keyboardSelected.value = Tools.isKeyboardSelected(this)
+    }
+
+    override fun onResume() {
+        super.onResume()
+        checkPermissions()
+    }
+
+    override fun onPostResume() {
+        super.onPostResume()
+        checkPermissions()
+    }
+
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
 
+        Tools.createNotificationChannel(this)
+
+        checkPermissions()
+
+        this.enableEdgeToEdge()
+
         setContent {
-            enableEdgeToEdge()
-
             CupertinoTheme {
-                DestinationsNavHost(navGraph = NavGraphs.root)
+                val micGrantedState = micGranted.collectAsState()
+                val imeGrantedState = imeGranted.collectAsState()
+                val keyboardSelectedState = keyboardSelected.collectAsState()
+                val notiGrantedState = notiGranted.collectAsState()
+
                 isSystemInDarkTheme()
+
+                if (micGrantedState.value && notiGrantedState.value && imeGrantedState.value && keyboardSelectedState.value) {
+                    Navigator(HomeScreen(this))
+                } else GrantPermissionUI(
+                    mic = micGrantedState,
+                    ime = imeGrantedState,
+                    kSS = keyboardSelectedState,
+                    nP = notiGrantedState,
+                    activity = this,
+                )
             }
         }
     }
Index: app/src/main/java/com/optiflowx/optikeysx/views/number/NumberPortraitKeyboard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.number\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.mandatorySystemGesturesPadding\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.ui.keyboard.NumberKeyboardActionView\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun NumberPortraitKeyboard(viewModel: KeyboardViewModel, locale: String) {\r\n    val viewWidth = LocalConfiguration.current.screenWidthDp.dp\r\n    \r\n\r\n    Box(\r\n        Modifier\r\n            .mandatorySystemGesturesPadding()\r\n    ) {\r\n        Column {\r\n            NumberKeyboardActionView(locale, viewWidth)\r\n\r\n            NumberKeyboardView(viewModel , viewWidth)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/number/NumberPortraitKeyboard.kt b/app/src/main/java/com/optiflowx/optikeysx/views/number/NumberPortraitKeyboard.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/number/NumberPortraitKeyboard.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/number/NumberPortraitKeyboard.kt	(date 1707381884322)
@@ -7,12 +7,14 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.platform.LocalConfiguration
 import androidx.compose.ui.unit.dp
+import androidx.lifecycle.compose.collectAsStateWithLifecycle
 import com.optiflowx.optikeysx.ui.keyboard.NumberKeyboardActionView
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
 
 @Composable
-fun NumberPortraitKeyboard(viewModel: KeyboardViewModel, locale: String) {
+fun NumberPortraitKeyboard(viewModel: KeyboardViewModel) {
     val viewWidth = LocalConfiguration.current.screenWidthDp.dp
+    val locale = viewModel.keyboardData.collectAsStateWithLifecycle().value.locale
     
 
     Box(
Index: app/src/main/java/com/optiflowx/optikeysx/views/number/NumKeyboardKey.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.number\r\n\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.ui.keyboard.EraseButton\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyButton\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun NumKeyboardKey(key: Key, viewModel: KeyboardViewModel) {\r\n    val ctx = LocalContext.current\r\n    val colorScheme = MaterialTheme.colorScheme\r\n    val isPeriod: Boolean = key.id == \"period\"\r\n    val isErase: Boolean = key.id == \"delete\"\r\n    val fontType  by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n\r\n\r\n    if (isErase) {\r\n        EraseButton(\r\n            color = Color.Transparent,\r\n            id = key.id,\r\n            applyShadow = false,\r\n            onClick = {\r\n                viewModel.playSound(key)\r\n                viewModel.vibrate()\r\n            },\r\n            onRepeatableClick = { viewModel.onIKeyClick(key, ctx) }\r\n        ) {\r\n            Icon(\r\n                painter = painterResource(R.drawable.deletebackward),\r\n                \"icons\",\r\n                tint = colorScheme.primary,\r\n                modifier = Modifier\r\n                    .fillMaxWidth(0.3f)\r\n                    .fillMaxHeight(0.3f),\r\n            )\r\n        }\r\n    } else KeyButton(\r\n        color = (if (isPeriod) Color.Transparent else colorScheme.secondary),\r\n        id = key.id,\r\n        showPopup = false,\r\n        onClick = {\r\n            viewModel.onNumKeyClick(key, ctx)\r\n            viewModel.playSound(key)\r\n            viewModel.vibrate()\r\n        }\r\n    ) {\r\n        Column(\r\n            verticalArrangement = Arrangement.Bottom,\r\n            horizontalAlignment = Alignment.CenterHorizontally\r\n        ) {\r\n            Text(\r\n                text = if(isPeriod) \".\" else key.id,\r\n                fontWeight = FontWeight.Light,\r\n                textAlign = TextAlign.Center,\r\n                fontFamily = appFontType(fontType),\r\n                style = TextStyle(\r\n                    MaterialTheme.colorScheme.primary,\r\n                    TextUnit(26f, TextUnitType.Sp)\r\n                ),\r\n            )\r\n            Text(\r\n                text = key.value,\r\n                fontWeight = FontWeight.Light,\r\n                textAlign = TextAlign.Center,\r\n                fontFamily = appFontType(fontType),\r\n                style = TextStyle(\r\n                    MaterialTheme.colorScheme.primary,\r\n                    TextUnit(12f, TextUnitType.Sp)\r\n                ),\r\n            )\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/number/NumKeyboardKey.kt b/app/src/main/java/com/optiflowx/optikeysx/views/number/NumKeyboardKey.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/number/NumKeyboardKey.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/number/NumKeyboardKey.kt	(date 1707381185701)
@@ -8,7 +8,6 @@
 import androidx.compose.material3.MaterialTheme
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
@@ -21,12 +20,11 @@
 import androidx.compose.ui.unit.TextUnitType
 import com.optiflowx.optikeysx.R
 import com.optiflowx.optikeysx.core.model.Key
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
 import com.optiflowx.optikeysx.core.utils.appFontType
 import com.optiflowx.optikeysx.ui.keyboard.EraseButton
 import com.optiflowx.optikeysx.ui.keyboard.KeyButton
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 
 @Composable
 fun NumKeyboardKey(key: Key, viewModel: KeyboardViewModel) {
@@ -34,7 +32,7 @@
     val colorScheme = MaterialTheme.colorScheme
     val isPeriod: Boolean = key.id == "period"
     val isErase: Boolean = key.id == "delete"
-    val fontType  by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
+    val fontType = viewModel.prefs.keyboardFontType.observeAsState().value
 
 
     if (isErase) {
@@ -61,6 +59,7 @@
         color = (if (isPeriod) Color.Transparent else colorScheme.secondary),
         id = key.id,
         showPopup = false,
+        prefs = viewModel.prefs,
         onClick = {
             viewModel.onNumKeyClick(key, ctx)
             viewModel.playSound(key)
Index: app/src/main/java/com/optiflowx/optikeysx/ime/ActionManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/ActionManager.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/ActionManager.kt
new file mode 100644
--- /dev/null	(date 1707331464521)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/ActionManager.kt	(date 1707331464521)
@@ -0,0 +1,99 @@
+package com.optiflowx.optikeysx.ime
+
+import android.content.Context
+import android.content.Intent
+import android.os.Build
+import android.view.KeyEvent
+import android.view.inputmethod.EditorInfo
+import android.view.inputmethod.ExtractedTextRequest
+import android.view.inputmethod.InputMethodManager
+import android.widget.Toast
+import com.optiflowx.optikeysx.MainActivity
+
+class ActionManager(private val ime: IMEService) {
+    private val mInputMethodManager: InputMethodManager =
+        ime.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
+    private var selectionStart = 0
+    private var selectionEnd = 0
+
+    fun onCreateInputView() {
+        val ic = ime.currentInputConnection
+        if (ic != null) {
+            val et = ic.getExtractedText(ExtractedTextRequest(), 0)
+            if (et != null) {
+                selectionStart = et.selectionStart
+                selectionEnd = et.selectionEnd
+            } else {
+                selectionStart = 0
+                selectionEnd = 0
+            }
+        }
+    }
+
+    fun updateSelection(
+        newSelStart: Int,
+        newSelEnd: Int,
+    ) {
+        selectionStart = newSelStart
+        selectionEnd = newSelEnd
+    }
+
+    fun selectCharsBack(chars: Int) {
+        val ic = ime.currentInputConnection ?: return
+        var start = selectionEnd - chars
+        if (start < 0) start = 0
+        ic.setSelection(start, selectionEnd)
+    }
+
+    fun deleteSelection() {
+        val ic = ime.currentInputConnection ?: return
+        ic.commitText("", 1)
+    }
+
+    fun deleteLastChar() {
+        // delete last char
+        val ic = ime.currentInputConnection ?: return
+        val selectedChars = ic.getSelectedText(0)
+        if (selectedChars == null) {
+            ic.deleteSurroundingText(1, 0)
+        } else if (selectedChars.toString().isEmpty()) {
+            ic.deleteSurroundingText(1, 0)
+        } else {
+            ic.performContextMenuAction(android.R.id.cut)
+        }
+    }
+
+    fun sendEnter() {
+        val ic = ime.currentInputConnection ?: return
+        if (ime.keyboardData.enterAction == EditorInfo.IME_ACTION_UNSPECIFIED) {
+            if (ime.isRichTextEditor) {
+                ic.commitText("\n", 1)
+            } else {
+                ime.sendDownUpKeyEvents(KeyEvent.KEYCODE_ENTER)
+            }
+        } else {
+            ic.performEditorAction(ime.keyboardData.enterAction)
+        }
+    }
+
+    fun switchToLastIme(showError: Boolean) {
+        val result: Boolean = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
+            ime.switchToPreviousInputMethod()
+        } else {
+            mInputMethodManager.switchToLastInputMethod(ime.token)
+        }
+        if (!result && showError) {
+            Toast.makeText(ime, "There is no previous ime", Toast.LENGTH_SHORT).show()
+        }
+    }
+
+    fun openSettings() {
+        val myIntent = Intent(ime, MainActivity::class.java)
+        myIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+        ime.startActivity(myIntent)
+    }
+
+    companion object {
+        private const val TAG = "ActionManager"
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/views/number/NumberLandscapeKeyboard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.number\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.mandatorySystemGesturesPadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.ui.keyboard.NumberKeyboardActionView\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun NumberLandscapeKeyboard(viewModel: KeyboardViewModel, locale: String) {\r\n    val screenWidth = LocalConfiguration.current.screenWidthDp\r\n    val viewWidth = (screenWidth * 0.8).dp\r\n    val sideWidth = (screenWidth * 0.1)\r\n    \r\n\r\n    Column(\r\n        modifier = Modifier.mandatorySystemGesturesPadding(),\r\n        horizontalAlignment = Alignment.CenterHorizontally,\r\n    ) {\r\n        NumberKeyboardActionView(locale, viewWidth)\r\n\r\n        Row(\r\n            verticalAlignment = Alignment.Bottom,\r\n            modifier = Modifier.padding(vertical = 2.dp)\r\n        ) {\r\n\r\n            Box(\r\n                contentAlignment = Alignment.BottomCenter,\r\n                modifier = Modifier\r\n                    .width(sideWidth.dp)\r\n                    .padding(bottom = 2.dp)\r\n            ) {}\r\n\r\n            NumberKeyboardView(viewModel, viewWidth, 34, 0)\r\n\r\n            Box(\r\n                contentAlignment = Alignment.BottomCenter,\r\n                modifier = Modifier\r\n                    .width(sideWidth.dp)\r\n                    .padding(bottom = 2.dp)\r\n            ) {}\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/number/NumberLandscapeKeyboard.kt b/app/src/main/java/com/optiflowx/optikeysx/views/number/NumberLandscapeKeyboard.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/number/NumberLandscapeKeyboard.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/number/NumberLandscapeKeyboard.kt	(date 1707381884312)
@@ -11,14 +11,16 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.platform.LocalConfiguration
 import androidx.compose.ui.unit.dp
+import androidx.lifecycle.compose.collectAsStateWithLifecycle
 import com.optiflowx.optikeysx.ui.keyboard.NumberKeyboardActionView
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
 
 @Composable
-fun NumberLandscapeKeyboard(viewModel: KeyboardViewModel, locale: String) {
+fun NumberLandscapeKeyboard(viewModel: KeyboardViewModel) {
     val screenWidth = LocalConfiguration.current.screenWidthDp
     val viewWidth = (screenWidth * 0.8).dp
     val sideWidth = (screenWidth * 0.1)
+    val locale = viewModel.keyboardData.collectAsStateWithLifecycle().value.locale
     
 
     Column(
Index: app/src/main/java/com/optiflowx/optikeysx/screens/home/GeneralSection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/home/GeneralSection.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/home/GeneralSection.kt
new file mode 100644
--- /dev/null	(date 1707378880565)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/home/GeneralSection.kt	(date 1707378880565)
@@ -0,0 +1,56 @@
+package com.optiflowx.optikeysx.screens.home
+
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.text.TextStyle
+import cafe.adriel.voyager.navigator.LocalNavigator
+import cafe.adriel.voyager.navigator.currentOrThrow
+import com.optiflowx.optikeysx.screens.KeyboardFontsScreen
+import com.optiflowx.optikeysx.screens.KeyboardsScreen
+import com.optiflowx.optikeysx.screens.SpeechKeyboardScreen
+import com.optiflowx.optikeysx.screens.TextReplacementScreen
+import io.github.alexzhirkevich.cupertino.CupertinoText
+import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
+import io.github.alexzhirkevich.cupertino.section.CupertinoSection
+import io.github.alexzhirkevich.cupertino.section.link
+
+@OptIn(ExperimentalCupertinoApi::class)
+@Composable
+fun GeneralSection(
+    titleTextStyle: TextStyle,
+    tileTextStyle: TextStyle,
+) {
+    val navigator = LocalNavigator.currentOrThrow
+    
+    CupertinoSection(
+        title = { CupertinoText("GENERAL", style = titleTextStyle) },
+    ) {
+        this.link(
+            key = 0,
+            onClickLabel = "Keyboards",
+            title = { CupertinoText("Keyboards", style = tileTextStyle) },
+            onClick = { navigator.push(KeyboardsScreen()) }
+        )
+        this.link(
+            key = 1,
+            onClickLabel = "Keyboard Fonts",
+            title = { CupertinoText("Keyboard Fonts", style = tileTextStyle) },
+            onClick = { navigator.push(KeyboardFontsScreen()) }
+        )
+        this.link(
+            key = 3,
+            onClickLabel = "Speech Keyboard",
+            title = { CupertinoText("Speech Keyboard", style = tileTextStyle) },
+            onClick = { navigator.push(SpeechKeyboardScreen()) }
+        )
+        this.link(
+            key = 4,
+            onClickLabel = "Text Replacement",
+            title = {
+                CupertinoText("Text Replacement", style = tileTextStyle)
+            },
+            onClick = {
+                navigator.push(TextReplacementScreen())
+            }
+        )
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ime/IMELifecycleOwner.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/IMELifecycleOwner.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/IMELifecycleOwner.kt
new file mode 100644
--- /dev/null	(date 1707316391652)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/IMELifecycleOwner.kt	(date 1707316391652)
@@ -0,0 +1,68 @@
+package com.optiflowx.optikeysx.ime
+
+/**
+ * Based on: https://stackoverflow.com/a/66958772
+ */
+
+import android.view.View
+import androidx.lifecycle.Lifecycle
+import androidx.lifecycle.LifecycleOwner
+import androidx.lifecycle.LifecycleRegistry
+import androidx.lifecycle.ViewModelStore
+import androidx.lifecycle.ViewModelStoreOwner
+import androidx.lifecycle.setViewTreeLifecycleOwner
+import androidx.lifecycle.setViewTreeViewModelStoreOwner
+import androidx.savedstate.SavedStateRegistry
+import androidx.savedstate.SavedStateRegistryController
+import androidx.savedstate.SavedStateRegistryOwner
+import androidx.savedstate.setViewTreeSavedStateRegistryOwner
+
+class IMELifecycleOwner :
+    LifecycleOwner, ViewModelStoreOwner, SavedStateRegistryOwner {
+
+    fun onCreate() {
+        savedStateRegistryController.performRestore(null)
+        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_CREATE)
+    }
+
+    fun onResume() {
+        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_RESUME)
+    }
+
+    fun onPause() {
+        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_PAUSE)
+    }
+
+    fun onDestroy() {
+        lifecycleRegistry.handleLifecycleEvent(Lifecycle.Event.ON_DESTROY)
+        store.clear()
+    }
+
+    /**
+    Compose uses the Window's decor view to locate the
+    Lifecycle/ViewModel/SavedStateRegistry owners.
+    Therefore, we need to set this class as the "owner" for the decor view.
+     */
+    fun attachToDecorView(decorView: View?) {
+        if (decorView == null) return
+
+        decorView.setViewTreeLifecycleOwner(this)
+        decorView.setViewTreeViewModelStoreOwner(this)
+        decorView.setViewTreeSavedStateRegistryOwner(this)
+    }
+
+    // LifecycleOwner methods
+    private val lifecycleRegistry: LifecycleRegistry = LifecycleRegistry(this)
+    override val lifecycle: Lifecycle
+        get() = lifecycleRegistry
+
+    // ViewModelStore methods
+    private val store = ViewModelStore()
+    override val viewModelStore: ViewModelStore
+        get() = store
+
+    // SavedStateRegistry methods
+    private val savedStateRegistryController = SavedStateRegistryController.create(this)
+    override val savedStateRegistry: SavedStateRegistry
+        get() = savedStateRegistryController.savedStateRegistry
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneNumKeyboardKey.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.phone\r\n\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Column\r\nimport androidx.compose.foundation.layout.fillMaxHeight\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.material3.Icon\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.res.painterResource\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.font.FontWeight\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.sp\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.ui.keyboard.EraseButton\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyButton\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\nimport io.github.alexzhirkevich.cupertino.theme.CupertinoColors\r\nimport io.github.alexzhirkevich.cupertino.theme.systemGray\r\n\r\n@Composable\r\nfun PhoneNumKeyboardKey(key: Key, viewModel: KeyboardViewModel) {\r\n    val ctx = LocalContext.current\r\n    val colorScheme = MaterialTheme.colorScheme\r\n    val isSwitch: Boolean = key.id == \"switch\"\r\n    val isErase: Boolean = key.id == \"delete\"\r\n\r\n    //Make it global\r\n    \r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n    val isPhoneSymbols = viewModel.isPhoneSymbol.collectAsState().value\r\n\r\n    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n\r\n    val keysToDisable = (key.id == \"1\" || key.id == \"2\"\r\n            || key.id == \"3\" || key.id == \"5\"\r\n            || key.id == \"8\")\r\n\r\n    if (isErase) {\r\n        EraseButton(\r\n            color = Color.Transparent,\r\n            id = key.id,\r\n            applyShadow = false,\r\n            onClick = {\r\n                viewModel.playSound(key)\r\n                viewModel.vibrate()\r\n            },\r\n            onRepeatableClick = { viewModel.onIKeyClick(key, ctx) }\r\n        ) {\r\n            Icon(\r\n                painter = painterResource(R.drawable.deletebackward),\r\n                \"icons\",\r\n                tint = colorScheme.primary,\r\n                modifier = Modifier\r\n                    .fillMaxWidth(0.3f)\r\n                    .fillMaxHeight(0.3f),\r\n            )\r\n        }\r\n    } else KeyButton(\r\n        color = (if (isSwitch) Color.Transparent\r\n        else if (keysToDisable && isPhoneSymbols) colorScheme.outline\r\n        else colorScheme.secondary),\r\n        id = key.id,\r\n        showPopup = false,\r\n        enabled = !(isPhoneSymbols && keysToDisable),\r\n        onClick = {\r\n            if (isSwitch) viewModel.onPhoneSymbol()\r\n            else viewModel.onNumKeyClick(key, ctx)\r\n\r\n            viewModel.playSound(key)\r\n            viewModel.vibrate()\r\n        },\r\n    ) {\r\n        if (isSwitch) {\r\n            Icon(\r\n                painter = (if (isPhoneSymbols) painterResource(R.drawable.num)\r\n                else painterResource(R.drawable.sym)),\r\n                \"icons\",\r\n                tint = colorScheme.primary,\r\n                modifier = Modifier\r\n                    .fillMaxWidth(0.3f)\r\n                    .fillMaxHeight(0.3f),\r\n            )\r\n        } else {\r\n            Column(\r\n                verticalArrangement = Arrangement.Bottom,\r\n                horizontalAlignment = Alignment.CenterHorizontally\r\n            ) {\r\n                if (key.value == keyboardLocale.wait() || key.value == keyboardLocale.pause()\r\n                    || key.value == \"*\" || key.value == \"#\"\r\n                    || key.value == \"+\"\r\n                ) {\r\n                    Text(\r\n                        text = when (key.value) {\r\n                            keyboardLocale.wait() -> keyboardLocale.wait()\r\n                            keyboardLocale.pause() -> keyboardLocale.pause()\r\n                            else -> key.value\r\n                        },\r\n                        fontWeight = FontWeight.Light,\r\n                        textAlign = TextAlign.Center,\r\n                        fontFamily = appFontType(fontType),\r\n                        style = TextStyle(\r\n                            MaterialTheme.colorScheme.primary,\r\n                            TextUnit(26f, TextUnitType.Sp)\r\n                        ),\r\n                    )\r\n                } else {\r\n                    (if (isPhoneSymbols) {\r\n                        CupertinoColors.systemGray(isSystemInDarkTheme())\r\n                    } else MaterialTheme.colorScheme.primary).apply {\r\n                        Text(\r\n                            text = key.id,\r\n                            fontWeight = FontWeight.Light,\r\n                            textAlign = TextAlign.Center,\r\n                            fontFamily = appFontType(fontType),\r\n                            style = TextStyle(this, 28.sp.nonScaledSp),\r\n                        )\r\n                        Text(\r\n                            text = key.value,\r\n                            fontWeight = FontWeight.Light,\r\n                            textAlign = TextAlign.Center,\r\n                            fontFamily = appFontType(fontType),\r\n                            style = TextStyle(this, 12.sp.nonScaledSp),\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneNumKeyboardKey.kt b/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneNumKeyboardKey.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneNumKeyboardKey.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/phone/PhoneNumKeyboardKey.kt	(date 1707381185710)
@@ -10,7 +10,6 @@
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.collectAsState
-import androidx.compose.runtime.getValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.graphics.Color
@@ -24,14 +23,13 @@
 import androidx.compose.ui.unit.sp
 import com.optiflowx.optikeysx.R
 import com.optiflowx.optikeysx.core.model.Key
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
 import com.optiflowx.optikeysx.core.utils.KeyboardLocale
 import com.optiflowx.optikeysx.core.utils.appFontType
 import com.optiflowx.optikeysx.core.utils.nonScaledSp
 import com.optiflowx.optikeysx.ui.keyboard.EraseButton
 import com.optiflowx.optikeysx.ui.keyboard.KeyButton
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 import io.github.alexzhirkevich.cupertino.theme.CupertinoColors
 import io.github.alexzhirkevich.cupertino.theme.systemGray
 
@@ -44,11 +42,11 @@
 
     //Make it global
     
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
     val isPhoneSymbols = viewModel.isPhoneSymbol.collectAsState().value
 
-    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
+    val fontType = viewModel.prefs.keyboardFontType.observeAsState().value
 
     val keysToDisable = (key.id == "1" || key.id == "2"
             || key.id == "3" || key.id == "5"
@@ -80,6 +78,7 @@
         else colorScheme.secondary),
         id = key.id,
         showPopup = false,
+        prefs = viewModel.prefs,
         enabled = !(isPhoneSymbols && keysToDisable),
         onClick = {
             if (isSwitch) viewModel.onPhoneSymbol()
Index: app/src/main/java/com/optiflowx/optikeysx/screens/home/DeveloperSection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/home/DeveloperSection.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/home/DeveloperSection.kt
new file mode 100644
--- /dev/null	(date 1707376148564)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/home/DeveloperSection.kt	(date 1707376148564)
@@ -0,0 +1,65 @@
+package com.optiflowx.optikeysx.screens.home
+
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.rememberCoroutineScope
+import androidx.compose.ui.platform.LocalUriHandler
+import androidx.compose.ui.text.TextStyle
+import io.github.alexzhirkevich.cupertino.CupertinoBottomSheetScaffoldState
+import io.github.alexzhirkevich.cupertino.CupertinoText
+import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
+import io.github.alexzhirkevich.cupertino.section.CupertinoSection
+import io.github.alexzhirkevich.cupertino.section.link
+import io.github.alexzhirkevich.cupertino.theme.CupertinoColors
+import io.github.alexzhirkevich.cupertino.theme.systemBlue
+import io.github.alexzhirkevich.cupertino.theme.systemGreen
+import kotlinx.coroutines.launch
+
+@OptIn(ExperimentalCupertinoApi::class)
+@Composable
+fun DeveloperSection(
+    titleTextStyle: TextStyle,
+    descTextStyle: TextStyle,
+    tileTextStyle: TextStyle,
+    scaffoldState: CupertinoBottomSheetScaffoldState,
+) {
+    val coroutineScope = rememberCoroutineScope()
+    val uriHandler = LocalUriHandler.current
+
+
+    CupertinoSection(
+        title = { CupertinoText("DEVELOPER", style = titleTextStyle) },
+        caption = {
+            CupertinoText(
+                text = "This section contains important information from the developer.",
+                style = descTextStyle
+            )
+        }
+    ) {
+        this.link(
+            onClickLabel = "Copyright Information",
+            title = {
+                CupertinoText(
+                    text = "Copyright Information",
+                    color = CupertinoColors.systemBlue,
+                    style = tileTextStyle
+                )
+            },
+            onClick = {
+                coroutineScope.launch {
+                    scaffoldState.bottomSheetState.show()
+                }
+            }
+        )
+        this.link(
+            onClickLabel = "Join The Support Channel",
+            title = {
+                CupertinoText(
+                    text = "Join The Support Channel",
+                    color = CupertinoColors.systemGreen,
+                    style = tileTextStyle
+                )
+            },
+            onClick = { uriHandler.openUri("https://t.me/optiflowxparadise/") }
+        )
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/screens/home/AppInformationSection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/home/AppInformationSection.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/home/AppInformationSection.kt
new file mode 100644
--- /dev/null	(date 1707376148457)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/home/AppInformationSection.kt	(date 1707376148457)
@@ -0,0 +1,50 @@
+package com.optiflowx.optikeysx.screens.home
+
+import android.os.Build
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.platform.LocalContext
+import androidx.compose.ui.text.TextStyle
+import com.optiflowx.optikeysx.ui.cupertino.CupertinoTile
+import io.github.alexzhirkevich.cupertino.CupertinoText
+import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
+import io.github.alexzhirkevich.cupertino.section.CupertinoSection
+
+@OptIn(ExperimentalCupertinoApi::class)
+@Composable
+fun AppInformationSection(
+    titleTextStyle: TextStyle
+) {
+    val context = LocalContext.current
+    val packageInfo = context.packageManager.getPackageInfo(context.packageName, 0)
+
+    CupertinoSection(
+        title = { CupertinoText("APP INFORMATION", style = titleTextStyle) }
+    ) {
+        this.item(0) {
+            CupertinoTile(
+                title = "Version",
+                trailingText = packageInfo.versionName,
+                trailingIcon = null,
+            )
+        }
+        this.item(1) {
+            CupertinoTile(
+                title = "Package Name",
+                trailingText = packageInfo.packageName,
+                trailingIcon = null,
+            )
+        }
+        this.item(2) {
+            CupertinoTile(
+                title = "Build Version",
+                trailingText = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
+                    packageInfo.longVersionCode.toString()
+                } else {
+                    @Suppress("DEPRECATION")
+                    packageInfo.versionCode.toString()
+                },
+                trailingIcon = null,
+            )
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ime/ModelManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/ModelManager.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/ModelManager.kt
new file mode 100644
--- /dev/null	(date 1707376458709)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/ModelManager.kt	(date 1707376458709)
@@ -0,0 +1,185 @@
+package com.optiflowx.optikeysx.ime
+
+import android.Manifest
+import android.content.pm.PackageManager
+import android.util.Log
+import androidx.core.app.ActivityCompat
+import androidx.lifecycle.Observer
+import com.optiflowx.optikeysx.core.data.InstalledModelReference
+import com.optiflowx.optikeysx.ime.recognizers.RecognizerSource
+import com.optiflowx.optikeysx.ime.recognizers.providers.Providers
+import com.optiflowx.optikeysx.optikeysxPreferences
+import com.optiflowx.optikeysx.views.defaults.KeyboardViewManager
+import java.io.IOException
+import java.util.concurrent.Executor
+import java.util.concurrent.Executors
+
+class ModelManager(
+    private val ime: IMEService,
+    private val keyboardViewManager: KeyboardViewManager
+) {
+    private val prefs by optikeysxPreferences()
+    
+    private var speechService: MySpeechService? = null
+    var isRunning = false
+        private set
+
+    val openSettingsOnMic: Boolean
+        get() = recognizerSources.size == 0
+
+    private var recognizerSourceProviders = Providers(ime)
+    private var recognizerSourceModels: List<InstalledModelReference> = listOf()
+    private var recognizerSources: MutableList<RecognizerSource> = ArrayList()
+    private var currentRecognizerSourceIndex = 0
+    private var currentRecognizerSource: RecognizerSource? = null
+    private val executor: Executor = Executors.newSingleThreadExecutor()
+    private fun initializeRecognizer() {
+        if (recognizerSources.size == 0) {
+            return
+        }
+        val onLoaded = Observer { r: RecognizerSource? ->
+            if (prefs.startRecognitionInstantaneously.get()) {
+                start() // execute after initialize
+            }
+        }
+        currentRecognizerSource = recognizerSources[currentRecognizerSourceIndex]
+        keyboardViewManager.recognizerNameLD.postValue(currentRecognizerSource!!.name)
+        currentRecognizerSource!!.stateLD.observe(ime.lifecycleOwner, keyboardViewManager)
+        currentRecognizerSource!!.initialize(executor, onLoaded)
+    }
+
+    val currentRecognizerSourceAddSpaces: Boolean
+        get() = currentRecognizerSource?.addSpaces ?: true
+
+    fun switchToNextRecognizer() {
+        if (recognizerSources.size == 0 || recognizerSources.size == 1) return
+        stop(true)
+        currentRecognizerSourceIndex++
+        if (currentRecognizerSourceIndex >= recognizerSources.size) {
+            currentRecognizerSourceIndex = 0
+        }
+        initializeRecognizer() // start is called after the recognizer is initialized
+    }
+
+    fun start() {
+        if (currentRecognizerSource == null) {
+            Log.w(
+                TAG,
+                "currentRecognizerSource is null!"
+            )
+            return
+        }
+        if (currentRecognizerSource!!.closed) {
+            Log.w(
+                TAG,
+                "Trying to start a closed Recognizer Source: ${currentRecognizerSource!!.name}"
+            )
+            return
+        }
+        if (isRunning || speechService != null) {
+            speechService!!.stop()
+        }
+        isRunning = true
+        keyboardViewManager.stateLD.postValue(KeyboardViewManager.STATE_LISTENING)
+        
+        try {
+            val recognizer = currentRecognizerSource!!.recognizer
+            if (ActivityCompat.checkSelfPermission(
+                    ime,
+                    Manifest.permission.RECORD_AUDIO
+                ) != PackageManager.PERMISSION_GRANTED
+            ) {
+                return
+            }
+            speechService = MySpeechService(recognizer, recognizer.sampleRate)
+            speechService!!.startListening(ime)
+        } catch (e: IOException) {
+            keyboardViewManager.errorMessageLD.postValue("Microphone error: " + e.message)
+            keyboardViewManager.stateLD.postValue(KeyboardViewManager.STATE_ERROR)
+        }
+    }
+
+    private var pausedState = false
+
+    init {
+        reloadModels()
+    }
+
+    private fun reloadModels() {
+        val newModels = prefs.modelsOrder.get()
+        if (newModels == recognizerSourceModels) {
+            if (prefs.startRecognitionInstantaneously.get()) {
+                if (currentRecognizerSource != null) {
+                    start()
+                }
+            }
+            return
+        }
+
+        recognizerSources.clear()
+        recognizerSourceModels = newModels
+        recognizerSourceModels.forEach { model ->
+            recognizerSourceProviders.recognizerSourceForModel(model)?.let {
+                recognizerSources.add(it)
+            }
+        }
+
+        if (recognizerSources.size == 0) {
+            keyboardViewManager.errorMessageLD.postValue("No models found. Please download a model from the settings.")
+            keyboardViewManager.stateLD.postValue(KeyboardViewManager.STATE_ERROR)
+        } else {
+            currentRecognizerSourceIndex = 0
+            initializeRecognizer()
+        }
+    }
+
+    fun pause(checked: Boolean) {
+        if (speechService != null) {
+            speechService!!.setPause(checked)
+            pausedState = checked
+            if (checked) {
+                keyboardViewManager.stateLD.postValue(KeyboardViewManager.STATE_PAUSED)
+            } else {
+                keyboardViewManager.stateLD.postValue(KeyboardViewManager.STATE_LISTENING)
+            }
+        } else {
+            pausedState = false
+        }
+    }
+
+    val isPaused: Boolean
+        get() = pausedState && speechService != null
+
+    fun stop(forceFreeRam: Boolean = false) {
+        speechService?.let {
+            executor.execute {
+                it.stop()
+                it.shutdown()
+            }
+        }
+        speechService = null
+        isRunning = false
+        stopRecognizerSource(forceFreeRam || !prefs.keepLanguageModelInMemory.get())
+    }
+
+    private fun stopRecognizerSource(freeRam: Boolean) {
+        currentRecognizerSource?.let {
+            executor.execute {
+                it.close(freeRam)
+            }
+        }
+        currentRecognizerSource?.stateLD?.removeObserver(keyboardViewManager)
+    }
+
+    fun onDestroy() {
+        stop(true)
+    }
+
+    fun onResume() {
+        reloadModels()
+    }
+
+    companion object {
+        private const val TAG = "ModelManager"
+    }
+}
Index: app/src/main/java/com/optiflowx/optikeysx/ime/MySpeechService.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/MySpeechService.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/MySpeechService.kt
new file mode 100644
--- /dev/null	(date 1707316391671)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/MySpeechService.kt	(date 1707316391671)
@@ -0,0 +1,183 @@
+/*
+ * org.vosk.SpeechService, extended to support other recognizers.
+ */
+package com.optiflowx.optikeysx.ime
+
+import android.Manifest
+import android.media.AudioRecord
+import android.media.MediaRecorder
+import android.os.Handler
+import android.os.Looper
+import androidx.annotation.RequiresPermission
+import com.optiflowx.optikeysx.ime.recognizers.Recognizer
+import org.vosk.android.RecognitionListener
+import java.io.IOException
+
+class MySpeechService @RequiresPermission(Manifest.permission.RECORD_AUDIO) constructor(
+    private val recognizer: Recognizer, sampleRate: Float
+) {
+    private val sampleRate: Int
+    private val bufferSize: Int
+    private val recorder: AudioRecord
+    private var recognizerThread: RecognizerThread? = null
+    private val mainHandler = Handler(Looper.getMainLooper())
+
+    init {
+        this.sampleRate = sampleRate.toInt()
+        bufferSize = Math.round(this.sampleRate.toFloat() * BUFFER_SIZE_SECONDS)
+        recorder = AudioRecord(
+            MediaRecorder.AudioSource.VOICE_RECOGNITION,
+            this.sampleRate,
+            16,
+            2,
+            bufferSize * 2
+        )
+        if (recorder.state == 0) {
+            recorder.release()
+            throw IOException("Failed to initialize recorder. Microphone might be already in use.")
+        }
+    }
+
+    fun startListening(listener: RecognitionListener): Boolean {
+        return if (null != recognizerThread) {
+            false
+        } else {
+            recognizerThread =
+                RecognizerThread(listener)
+            recognizerThread!!.start()
+            true
+        }
+    }
+
+    fun startListening(listener: RecognitionListener, timeout: Int): Boolean {
+        return if (null != recognizerThread) {
+            false
+        } else {
+            recognizerThread =
+                RecognizerThread(listener, timeout)
+            recognizerThread!!.start()
+            true
+        }
+    }
+
+    private fun stopRecognizerThread(): Boolean {
+        return if (null == recognizerThread) {
+            false
+        } else {
+            try {
+                recognizerThread!!.interrupt()
+                recognizerThread!!.join()
+            } catch (var2: InterruptedException) {
+                Thread.currentThread().interrupt()
+            }
+            recognizerThread = null
+            true
+        }
+    }
+
+    fun stop(): Boolean {
+        return stopRecognizerThread()
+    }
+
+    fun cancel(): Boolean {
+        if (recognizerThread != null) {
+            recognizerThread!!.setPause(true)
+        }
+        return stopRecognizerThread()
+    }
+
+    fun shutdown() {
+        recorder.release()
+    }
+
+    fun setPause(paused: Boolean) {
+        if (recognizerThread != null) {
+            recognizerThread!!.setPause(paused)
+        }
+    }
+
+    fun reset() {
+        if (recognizerThread != null) {
+            recognizerThread!!.reset()
+        }
+    }
+
+    private inner class RecognizerThread @JvmOverloads constructor(
+        var listener: RecognitionListener,
+        timeout: Int = -1
+    ) : Thread() {
+        private var remainingSamples: Int
+        private val timeoutSamples: Int
+
+        @Volatile
+        private var paused = false
+
+        @Volatile
+        private var reset = false
+
+        init {
+            if (timeout != -1) {
+                timeoutSamples = timeout * sampleRate / 1000
+            } else {
+                timeoutSamples = -1
+            }
+            remainingSamples = timeoutSamples
+        }
+
+        fun setPause(paused: Boolean) {
+            this.paused = paused
+        }
+
+        fun reset() {
+            reset = true
+        }
+
+        override fun run() {
+            recorder.startRecording()
+            if (recorder.recordingState == 1) {
+                recorder.stop()
+                val ioe =
+                    IOException("Failed to start recording. Microphone might be already in use.")
+                mainHandler.post { listener.onError(ioe) }
+            }
+            val buffer = ShortArray(bufferSize)
+            while (!interrupted() && (timeoutSamples == -1 || remainingSamples > 0)) {
+                val nread = recorder.read(buffer, 0, buffer.size)
+                if (!paused) {
+                    if (reset) {
+                        recognizer.reset()
+                        reset = false
+                    }
+                    if (nread < 0) {
+                        throw RuntimeException("error reading audio buffer")
+                    }
+                    var result: String?
+                    if (recognizer.acceptWaveForm(buffer, nread)) {
+                        result = recognizer.getResult()
+                        mainHandler.post { listener.onResult(result) }
+                    } else {
+                        result = recognizer.getPartialResult()
+                        mainHandler.post { listener.onPartialResult(result) }
+                    }
+                    if (timeoutSamples != -1) {
+                        remainingSamples -= nread
+                    }
+                }
+            }
+            recorder.stop()
+            if (!paused) {
+                if (timeoutSamples != -1 && remainingSamples <= 0) {
+                    mainHandler.post { listener.onTimeout() }
+                } else {
+                    val finalResult = recognizer.getFinalResult()
+                    mainHandler.post { listener.onFinalResult(finalResult) }
+                }
+            }
+        }
+    }
+
+    companion object {
+        private const val NO_TIMEOUT = -1
+        private const val BUFFER_SIZE_SECONDS = 0.2f
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/screens/home/AllKeyboardsSections.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/home/AllKeyboardsSections.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/home/AllKeyboardsSections.kt
new file mode 100644
--- /dev/null	(date 1707382571287)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/home/AllKeyboardsSections.kt	(date 1707382571287)
@@ -0,0 +1,103 @@
+package com.optiflowx.optikeysx.screens.home
+
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.text.TextStyle
+import com.optiflowx.optikeysx.optikeysxPreferences
+import dev.patrickgold.jetpref.datastore.model.observeAsState
+import io.github.alexzhirkevich.cupertino.CupertinoText
+import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
+import io.github.alexzhirkevich.cupertino.section.CupertinoSection
+import io.github.alexzhirkevich.cupertino.section.switch
+import io.github.alexzhirkevich.cupertino.theme.CupertinoColors
+import io.github.alexzhirkevich.cupertino.theme.systemOrange
+import io.github.alexzhirkevich.cupertino.theme.systemYellow
+
+@OptIn(ExperimentalCupertinoApi::class)
+@Composable
+fun AllKeyboardsSection(
+    titleTextStyle: TextStyle,
+    descTextStyle: TextStyle,
+    tileTextStyle: TextStyle,
+) {
+    val prefs by optikeysxPreferences()
+    val isAutoCapitalization = prefs.isAutoCapitalisation.observeAsState().value
+    val isAutoCorrect = prefs.isAutoCorrect.observeAsState().value
+    val isCheckSpelling = prefs.isCheckSpelling.observeAsState().value
+    val isEnableCapsLock = prefs.isEnableCapsLock.observeAsState().value
+    val isPredictive = prefs.isPredictive.observeAsState().value
+    val isCharacterPreview = prefs.isCharacterPreview.observeAsState().value
+    val isDotShortcut = prefs.isDotShortcut.observeAsState().value
+
+
+    CupertinoSection(
+        title = { CupertinoText("ALL KEYBOARDS", style = titleTextStyle) },
+        caption = {
+            CupertinoText(
+                text = "Double tapping the space bar will insert a full stop followed by a space.",
+                style = descTextStyle
+            )
+        }
+    ) {
+        this.switch(
+            title = {
+                CupertinoText("Auto-Capitalisation", style = tileTextStyle)
+            },
+            checked = isAutoCapitalization,
+            onCheckedChange = { prefs.isAutoCapitalisation.set(it) }
+        )
+        this.switch(
+            title = {
+                CupertinoText(
+                    text = "Auto-Correction",
+                    color = CupertinoColors.systemOrange,
+                    style = tileTextStyle
+                )
+            },
+            checked = isAutoCorrect,
+            onCheckedChange = { prefs.isAutoCorrect.set(it) }
+        )
+        this.switch(
+            title = {
+                CupertinoText(
+                    text = "Check Spelling",
+                    color = CupertinoColors.systemOrange,
+                    style = tileTextStyle
+                )
+            },
+            checked = isCheckSpelling,
+            onCheckedChange = { prefs.isCheckSpelling.set(it) }
+        )
+        this.switch(
+            title = {
+                CupertinoText("Enable Caps Lock", style = tileTextStyle)
+            },
+            checked = isEnableCapsLock,
+            onCheckedChange = { prefs.isEnableCapsLock.set(it) }
+        )
+        this.switch(
+            title = {
+                CupertinoText("Predictive", style = tileTextStyle)
+            },
+            checked = isPredictive,
+            onCheckedChange = { prefs.isPredictive.set(it) }
+        )
+        this.switch(
+            title = {
+                CupertinoText(
+                    text = "Character Preview",
+                    color = CupertinoColors.systemYellow,
+                    style = tileTextStyle
+                )
+            },
+            checked = isCharacterPreview,
+            onCheckedChange = { prefs.isCharacterPreview.set(it) }
+        )
+        this.switch(
+            title = {
+                CupertinoText("\".\" Shortcut", style = tileTextStyle)
+            },
+            checked = isDotShortcut,
+            onCheckedChange = { prefs.isDotShortcut.set(it) }
+        )
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/ime/TextManager.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ime/TextManager.kt b/app/src/main/java/com/optiflowx/optikeysx/ime/TextManager.kt
new file mode 100644
--- /dev/null	(date 1707376148572)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ime/TextManager.kt	(date 1707376148572)
@@ -0,0 +1,129 @@
+package com.optiflowx.optikeysx.ime
+
+import android.util.Log
+import com.optiflowx.optikeysx.optikeysxPreferences
+
+class TextManager(private val ime: IMEService, private val modelManager: ModelManager) {
+    private val prefs by optikeysxPreferences()
+
+    private var addSpace = false
+    private var capitalize = true
+    private var firstSinceResume = true
+
+    private var composing = false
+
+    fun onUpdateSelection(
+        newSelStart: Int,
+        newSelEnd: Int,
+    ) {
+        if (!composing) {
+            if (newSelStart == newSelEnd) { // cursor moved
+                checkAddSpaceAndCapitalize()
+            }
+        }
+    }
+
+    fun onText(text: String, mode: Mode) {
+        if (text.isEmpty())  // no need to commit empty text
+            return
+        Log.d(
+            TAG,
+            "onText. text: $text, mode: $mode, addSpace: $addSpace, firstSinceResume: $firstSinceResume"
+        )
+
+        if (text.startsWith(" ")) {
+            Log.d(TAG, "Starts with space!")
+        }
+
+        if (firstSinceResume) {
+            firstSinceResume = false
+            checkAddSpaceAndCapitalize()
+        }
+
+        val ic = ime.currentInputConnection ?: return
+
+        var spacedText = text
+        if (prefs.isAutoCapitalisation.get() && capitalize) {
+            spacedText = spacedText[0].uppercase() + spacedText.substring(1)
+        }
+
+        if (modelManager.currentRecognizerSourceAddSpaces && addSpace) {
+            spacedText = " $spacedText"
+        }
+        when (mode) {
+            Mode.FINAL, Mode.STANDARD -> {
+                // add a space next time. Usually overridden by onUpdateSelection
+                addSpace = addSpaceAfter(
+                    spacedText[spacedText.length - 1] // last char
+                )
+                capitalizeAfter(
+                    spacedText
+                )?.let {
+                    capitalize = it
+                }
+                composing = false
+                ic.commitText(spacedText, 1)
+            }
+
+            Mode.PARTIAL -> {
+                composing = true
+                ic.setComposingText(spacedText, 1)
+            }
+
+            Mode.INSERT -> {                // Manual insert. Don't add a space.
+                composing = false
+                ic.commitText(text, 1)
+            }
+        }
+    }
+
+    private fun checkAddSpaceAndCapitalize() {
+        if (!modelManager.currentRecognizerSourceAddSpaces) {
+            addSpace = false
+            return
+        }
+        val cs = ime.currentInputConnection.getTextBeforeCursor(3, 0)
+        if (cs != null) {
+            addSpace = cs.isNotEmpty() && addSpaceAfter(cs[cs.length - 1])
+
+            val value = capitalizeAfter(cs)
+            value?.let {
+                capitalize = it
+            }
+        }
+    }
+
+    private fun capitalizeAfter(string: CharSequence): Boolean? {
+        for (char in string.reversed()) {
+            if (char.isLetterOrDigit()) {
+                return false
+            }
+            if (char in sentenceTerminator) {
+                return true
+            }
+        }
+        return null
+    }
+
+    private fun addSpaceAfter(char: Char): Boolean = when (char) {
+        '"' -> false
+        '*' -> false
+        ' ' -> false
+        '\n' -> false
+        '\t' -> false
+        else -> true
+    }
+
+    fun onResume() {
+        firstSinceResume = true;
+    }
+
+    enum class Mode {
+        STANDARD, PARTIAL, FINAL, INSERT
+    }
+
+    companion object {
+        private const val TAG = "TextManager"
+        private val sentenceTerminator = charArrayOf('.', '\n', '!', '?')
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/views/clipboard/ClipboardKeyboardActionView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.clipboard\r\n\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.BoxScope\r\nimport androidx.compose.foundation.layout.Row\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.wrapContentSize\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.livedata.observeAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.text.PlatformTextStyle\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.core.enums.KeyboardType\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\nimport io.github.alexzhirkevich.cupertino.theme.CupertinoColors\r\nimport io.github.alexzhirkevich.cupertino.theme.systemBlue\r\nimport io.github.alexzhirkevich.cupertino.theme.systemGray\r\nimport io.github.alexzhirkevich.cupertino.theme.systemRed\r\n\r\n@Composable\r\nfun ClipboardKeyboardActionView(viewModel: KeyboardViewModel, boxScope: BoxScope) {\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n    val clipDataList = viewModel.clipData.observeAsState().value\r\n\r\n    boxScope.apply {\r\n        Row(\r\n            verticalAlignment = Alignment.CenterVertically,\r\n            horizontalArrangement = Arrangement.SpaceBetween,\r\n            modifier = Modifier.fillMaxWidth().padding(horizontal = 10.dp)\r\n        ) {\r\n            Text(\r\n                keyboardLocale.clipboard(),\r\n                style = TextStyle(\r\n                    fontFamily = appFontType(\"Bold\"),\r\n                    color = CupertinoColors.systemGray(isSystemInDarkTheme()),\r\n                    fontSize = TextUnit(18f, TextUnitType.Sp).nonScaledSp,\r\n                    platformStyle = PlatformTextStyle(includeFontPadding = false)\r\n                ),\r\n            )\r\n\r\n            Row(\r\n                modifier = Modifier.wrapContentSize(),\r\n                verticalAlignment = Alignment.CenterVertically,\r\n                horizontalArrangement = Arrangement.End,\r\n            ) {\r\n                Text(\r\n                    keyboardLocale.clear(),\r\n                    style = TextStyle(\r\n                        color = if (clipDataList.isNullOrEmpty()) CupertinoColors.systemGray(\r\n                            isSystemInDarkTheme()\r\n                        ) else CupertinoColors.systemRed,\r\n                        fontFamily = appFontType(\"Bold\"),\r\n                        fontSize = TextUnit(14f, TextUnitType.Sp).nonScaledSp,\r\n                        platformStyle = PlatformTextStyle(includeFontPadding = false)\r\n                    ),\r\n                    modifier = Modifier\r\n                        .padding(horizontal = 8.dp)\r\n                        .clickable(\r\n                            enabled = !clipDataList.isNullOrEmpty(),\r\n                        ) { viewModel.clearClipboard(clipDataList)},\r\n                )\r\n\r\n                Text(\r\n                    keyboardLocale.back(),\r\n                    style = TextStyle(\r\n                        color = CupertinoColors.systemBlue,\r\n                        fontFamily = appFontType(\"Bold\"),\r\n                        fontSize = TextUnit(14f, TextUnitType.Sp).nonScaledSp,\r\n                        platformStyle = PlatformTextStyle(includeFontPadding = false)\r\n                    ),\r\n                    modifier = Modifier\r\n                        .padding(horizontal = 8.dp)\r\n                        .clickable(\r\n                            onClick = { viewModel.onUpdateKeyboardType(KeyboardType.Normal) }\r\n                        ),\r\n                )\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/clipboard/ClipboardKeyboardActionView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/clipboard/ClipboardKeyboardActionView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/clipboard/ClipboardKeyboardActionView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/clipboard/ClipboardKeyboardActionView.kt	(date 1707381543634)
@@ -19,6 +19,7 @@
 import androidx.compose.ui.unit.TextUnit
 import androidx.compose.ui.unit.TextUnitType
 import androidx.compose.ui.unit.dp
+import com.optiflowx.optikeysx.core.enums.KeyboardFontType
 import com.optiflowx.optikeysx.core.enums.KeyboardType
 import com.optiflowx.optikeysx.core.utils.KeyboardLocale
 import com.optiflowx.optikeysx.core.utils.appFontType
@@ -31,7 +32,7 @@
 
 @Composable
 fun ClipboardKeyboardActionView(viewModel: KeyboardViewModel, boxScope: BoxScope) {
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
     val clipDataList = viewModel.clipData.observeAsState().value
 
@@ -44,7 +45,7 @@
             Text(
                 keyboardLocale.clipboard(),
                 style = TextStyle(
-                    fontFamily = appFontType("Bold"),
+                    fontFamily = appFontType(KeyboardFontType.Bold),
                     color = CupertinoColors.systemGray(isSystemInDarkTheme()),
                     fontSize = TextUnit(18f, TextUnitType.Sp).nonScaledSp,
                     platformStyle = PlatformTextStyle(includeFontPadding = false)
@@ -62,7 +63,7 @@
                         color = if (clipDataList.isNullOrEmpty()) CupertinoColors.systemGray(
                             isSystemInDarkTheme()
                         ) else CupertinoColors.systemRed,
-                        fontFamily = appFontType("Bold"),
+                        fontFamily = appFontType(KeyboardFontType.Bold),
                         fontSize = TextUnit(14f, TextUnitType.Sp).nonScaledSp,
                         platformStyle = PlatformTextStyle(includeFontPadding = false)
                     ),
@@ -77,7 +78,7 @@
                     keyboardLocale.back(),
                     style = TextStyle(
                         color = CupertinoColors.systemBlue,
-                        fontFamily = appFontType("Bold"),
+                        fontFamily = appFontType(KeyboardFontType.Bold),
                         fontSize = TextUnit(14f, TextUnitType.Sp).nonScaledSp,
                         platformStyle = PlatformTextStyle(includeFontPadding = false)
                     ),
Index: app/src/main/java/com/optiflowx/optikeysx/views/clipboard/ClipboardKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.clipboard\r\n\r\nimport androidx.compose.foundation.LocalIndication\r\nimport androidx.compose.foundation.border\r\nimport androidx.compose.foundation.clickable\r\nimport androidx.compose.foundation.interaction.MutableInteractionSource\r\nimport androidx.compose.foundation.isSystemInDarkTheme\r\nimport androidx.compose.foundation.layout.Arrangement\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.PaddingValues\r\nimport androidx.compose.foundation.layout.fillMaxWidth\r\nimport androidx.compose.foundation.layout.height\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.foundation.lazy.staggeredgrid.LazyVerticalStaggeredGrid\r\nimport androidx.compose.foundation.lazy.staggeredgrid.StaggeredGridCells\r\nimport androidx.compose.foundation.shape.RoundedCornerShape\r\nimport androidx.compose.material3.MaterialTheme\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.livedata.observeAsState\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.semantics.Role\r\nimport androidx.compose.ui.text.PlatformTextStyle\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.text.style.TextAlign\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.compose.ui.unit.sp\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.appFontType\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\nimport io.github.alexzhirkevich.cupertino.theme.CupertinoColors\r\nimport io.github.alexzhirkevich.cupertino.theme.systemGray\r\n\r\n@Composable\r\nfun ClipboardKeyboardView(\r\n    viewModel: KeyboardViewModel,\r\n    viewWidth: Dp,\r\n    viewHeight: Dp = 200.dp,\r\n) {\r\n    val context = LocalContext.current\r\n\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n\r\n    val clipDataList = viewModel.clipData.observeAsState().value?.reversed()\r\n\r\n    val fontType  by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n\r\n    Box(\r\n        contentAlignment = Alignment.Center,\r\n        modifier = Modifier\r\n            .height(viewHeight)\r\n            .width(viewWidth)\r\n    ) {\r\n        if (!clipDataList.isNullOrEmpty()) {\r\n            LazyVerticalStaggeredGrid(\r\n                columns = StaggeredGridCells.Fixed(3),\r\n                contentPadding = PaddingValues(8.dp),\r\n                horizontalArrangement = Arrangement.spacedBy(5.dp),\r\n                verticalItemSpacing = 5.dp,\r\n                modifier = Modifier.matchParentSize()\r\n            ) {\r\n                for (index in 0 until clipDataList.count()) {\r\n                    val text = clipDataList[index].text\r\n\r\n                    item(\"clipboard_item_$index::string->${text}\") {\r\n                        Box(\r\n                            modifier = Modifier\r\n                                .fillMaxWidth()\r\n                                .border(\r\n                                    1.dp,\r\n                                    MaterialTheme.colorScheme.onPrimary,\r\n                                    RoundedCornerShape(5.dp)\r\n                                )\r\n                                .clickable(\r\n                                    indication = LocalIndication.current,\r\n                                    interactionSource = remember { MutableInteractionSource() },\r\n                                    role = Role.Button\r\n                                ) { viewModel.pasteTextFromClipboard(text, context) }\r\n                        ) {\r\n                            Text(\r\n                                text = text,\r\n                                textAlign = TextAlign.Center,\r\n                                minLines = 1,\r\n                                softWrap = true,\r\n                                style = TextStyle(\r\n                                    fontSize = 15.sp.nonScaledSp,\r\n                                    fontFamily = appFontType(fontType),\r\n                                    platformStyle = PlatformTextStyle(includeFontPadding = false)\r\n                                ),\r\n                                modifier = Modifier\r\n                                    .padding(5.dp)\r\n                                    .align(Alignment.Center)\r\n                            )\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        } else Text(\r\n            keyboardLocale.emptyClipboard(),\r\n            textAlign = TextAlign.Center,\r\n            style = TextStyle(\r\n                color = CupertinoColors.systemGray(isSystemInDarkTheme()),\r\n                fontFamily = appFontType(\"Regular\"),\r\n                fontSize = TextUnit(15f, TextUnitType.Sp).nonScaledSp,\r\n                platformStyle = PlatformTextStyle(includeFontPadding = false)\r\n            ),\r\n            modifier = Modifier.padding(15.dp),\r\n        )\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/clipboard/ClipboardKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/clipboard/ClipboardKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/clipboard/ClipboardKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/clipboard/ClipboardKeyboardView.kt	(date 1707381185729)
@@ -19,7 +19,6 @@
 import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.collectAsState
-import androidx.compose.runtime.getValue
 import androidx.compose.runtime.livedata.observeAsState
 import androidx.compose.runtime.remember
 import androidx.compose.ui.Alignment
@@ -34,12 +33,11 @@
 import androidx.compose.ui.unit.TextUnitType
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
 import com.optiflowx.optikeysx.core.utils.KeyboardLocale
 import com.optiflowx.optikeysx.core.utils.appFontType
 import com.optiflowx.optikeysx.core.utils.nonScaledSp
 import com.optiflowx.optikeysx.viewmodels.KeyboardViewModel
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 import io.github.alexzhirkevich.cupertino.theme.CupertinoColors
 import io.github.alexzhirkevich.cupertino.theme.systemGray
 
@@ -51,12 +49,12 @@
 ) {
     val context = LocalContext.current
 
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
 
     val clipDataList = viewModel.clipData.observeAsState().value?.reversed()
 
-    val fontType  by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
+    val fontType = viewModel.prefs.keyboardFontType.observeAsState().value
 
     Box(
         contentAlignment = Alignment.Center,
@@ -113,7 +111,7 @@
             textAlign = TextAlign.Center,
             style = TextStyle(
                 color = CupertinoColors.systemGray(isSystemInDarkTheme()),
-                fontFamily = appFontType("Regular"),
+                fontFamily = appFontType(fontType),
                 fontSize = TextUnit(15f, TextUnitType.Sp).nonScaledSp,
                 platformStyle = PlatformTextStyle(includeFontPadding = false)
             ),
Index: app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/JetPrefCupertinoDialog.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/JetPrefCupertinoDialog.kt b/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/JetPrefCupertinoDialog.kt
new file mode 100644
--- /dev/null	(date 1707342325919)
+++ b/app/src/main/java/com/optiflowx/optikeysx/ui/cupertino/JetPrefCupertinoDialog.kt	(date 1707342325919)
@@ -0,0 +1,134 @@
+package com.optiflowx.optikeysx.ui.cupertino
+
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.PaddingValues
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.widthIn
+import androidx.compose.foundation.rememberScrollState
+import androidx.compose.foundation.verticalScroll
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.Text
+import androidx.compose.material3.TextButton
+import androidx.compose.material3.contentColorFor
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Alignment
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.graphics.Color
+import androidx.compose.ui.graphics.Shape
+import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.style.TextOverflow
+import androidx.compose.ui.unit.dp
+import androidx.compose.ui.window.Dialog
+import androidx.compose.ui.window.DialogProperties
+import dev.patrickgold.jetpref.material.ui.JetPrefAlertDialog
+import dev.patrickgold.jetpref.material.ui.JetPrefAlertDialogDefaults
+import io.github.alexzhirkevich.cupertino.Surface
+
+@Composable
+fun JetPrefCupertinoAlertDialog(
+    title: String,
+    modifier: Modifier = Modifier,
+    confirmLabel: String? = null,
+    onConfirm: () -> Unit = { },
+    dismissLabel: String? = null,
+    onDismiss: () -> Unit = { },
+    neutralLabel: String? = null,
+    onNeutral: () -> Unit = { },
+    allowOutsideDismissal: Boolean = true,
+    onOutsideDismissal: () -> Unit = onDismiss,
+    trailingIconTitle: @Composable () -> Unit = { },
+    properties: DialogProperties = DialogProperties(usePlatformDefaultWidth = false),
+    scrollModifier: Modifier = Modifier.verticalScroll(rememberScrollState()),
+    shape: Shape = MaterialTheme.shapes.medium,
+    backgroundColor: Color = MaterialTheme.colorScheme.surface,
+    contentColor: Color = contentColorFor(backgroundColor),
+    contentPadding: PaddingValues = JetPrefAlertDialogDefaults.ContentPadding,
+    content: @Composable () -> Unit,
+) {
+    Dialog(
+        onDismissRequest = { if (allowOutsideDismissal) onOutsideDismissal() },
+        properties = properties,
+    ) {
+        Surface(
+            modifier = modifier
+                .padding(vertical = 16.dp, horizontal = 16.dp)
+                .widthIn(max = JetPrefAlertDialogDefaults.MaxDialogWidth),
+            shape = shape,
+            color = backgroundColor,
+            contentColor = contentColor,
+        ) {
+            Column {
+                Row(
+                    modifier = Modifier
+                        .padding(horizontal = 24.dp)
+                        .height(64.dp),
+                    horizontalArrangement = Arrangement.SpaceBetween,
+                    verticalAlignment = Alignment.CenterVertically,
+                ) {
+                    Text(
+                        modifier = Modifier.weight(1.0f),
+                        text = title,
+                        style = MaterialTheme.typography.headlineMedium,
+                        fontWeight = FontWeight.Bold,
+                        maxLines = 1,
+                        overflow = TextOverflow.Ellipsis,
+                    )
+                    trailingIconTitle()
+                }
+                Box(
+                    modifier = Modifier
+                        .padding(contentPadding)
+                        .weight(1.0f, fill = false)
+                        .fillMaxWidth()
+                        .then(scrollModifier),
+                ) {
+                    content()
+                }
+                Row(modifier = Modifier.padding(vertical = 8.dp, horizontal = 16.dp)) {
+                    if (neutralLabel != null && neutralLabel.isNotBlank()) {
+                        TextButton(
+                            onClick = onNeutral,
+                            modifier = Modifier.padding(end = 8.dp),
+                        ) {
+                            Text(neutralLabel)
+                        }
+                    }
+                    Spacer(modifier = Modifier.weight(1.0f))
+                    if (!dismissLabel.isNullOrBlank()) {
+                        TextButton(
+                            onClick = onDismiss,
+                            modifier = Modifier.padding(end = 8.dp),
+                        ) {
+                            Text(dismissLabel)
+                        }
+                    }
+                    if (!confirmLabel.isNullOrBlank()) {
+                        TextButton(
+                            onClick = onConfirm,
+                        ) {
+                            Text(confirmLabel)
+                        }
+                    }
+                }
+            }
+        }
+    }
+}
+
+object JetPrefAlertDialogDefaults {
+    /**
+     * The default content padding for [JetPrefAlertDialog].
+     */
+    val ContentPadding = PaddingValues(horizontal = 24.dp)
+
+    /**
+     * The maximum dialog width for [JetPrefAlertDialog].
+     */
+    val MaxDialogWidth = 320.dp
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/screens/TextReplacementScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.screens\r\n\r\nimport androidx.compose.foundation.layout.absolutePadding\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.ui.bold\r\nimport com.ramcosta.composedestinations.annotation.Destination\r\nimport com.ramcosta.composedestinations.navigation.DestinationsNavigator\r\nimport io.github.alexzhirkevich.cupertino.CupertinoIcon\r\nimport io.github.alexzhirkevich.cupertino.CupertinoNavigateBackButton\r\nimport io.github.alexzhirkevich.cupertino.CupertinoScaffold\r\nimport io.github.alexzhirkevich.cupertino.CupertinoText\r\nimport io.github.alexzhirkevich.cupertino.CupertinoTopAppBar\r\nimport io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi\r\nimport io.github.alexzhirkevich.cupertino.icons.CupertinoIcons\r\nimport io.github.alexzhirkevich.cupertino.icons.outlined.Plus\r\nimport io.github.alexzhirkevich.cupertino.section.CupertinoSectionDefaults\r\nimport io.github.alexzhirkevich.cupertino.section.LocalSectionStyle\r\n\r\n@Suppress(\"UNCHECKED_CAST\")\r\n@OptIn(ExperimentalCupertinoApi::class)\r\n@Composable\r\n@Destination\r\nfun TextReplacementScreen(navigator: DestinationsNavigator) {\r\n    val context = LocalContext.current\r\n\r\n//    val tileTextStyle = TextStyle(\r\n//        fontSize = TextUnit(17f, TextUnitType.Sp).nonScaledSp,\r\n//        fontFamily = regular,\r\n//    )\r\n//\r\n//    val viewModel = viewModel<AppViewModel>(\r\n//        key = \"AppViewModel\",\r\n//        factory = object : ViewModelProvider.Factory {\r\n//            override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n//                return AppViewModel(context) as T\r\n//            }\r\n//        }\r\n//    )\r\n//\r\n//    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n\r\n    CupertinoScaffold(\r\n        containerColor = CupertinoSectionDefaults.containerColor(LocalSectionStyle.current),\r\n        topBar = {\r\n            CupertinoTopAppBar(\r\n                modifier = Modifier.padding(end = 15.dp),\r\n                navigationIcon = {\r\n                    CupertinoNavigateBackButton(onClick = { navigator.popBackStack() }) {\r\n                        CupertinoText(\"Home\")\r\n                    }\r\n                },\r\n                title = {\r\n                    CupertinoText(\r\n                        text = \"Text Replacement\",\r\n                        fontFamily = bold,\r\n                    )\r\n                },\r\n                actions = {\r\n                    CupertinoIcon(\r\n                        imageVector = CupertinoIcons.Default.Plus,\r\n                        contentDescription = \"add\"\r\n                    )\r\n                }\r\n            )\r\n        }\r\n    ) {\r\n        LazyColumn(\r\n            modifier = Modifier.statusBarsPadding().absolutePadding(top = 40.dp),\r\n            userScrollEnabled = true\r\n        ) {\r\n            item(\"Keyboard Fonts\") {\r\n//                CupertinoSection {\r\n//                    fonts.forEachIndexed { index, font ->\r\n//                        this.link(\r\n//                            key = index,\r\n//                            title = { CupertinoText(font.name, style = tileTextStyle) },\r\n//                            trailingIcon = {\r\n//                                if (font.name == fontType.value) {\r\n//                                    CupertinoIcon(\r\n//                                        imageVector = CupertinoIcons.Default.CheckmarkCircle,\r\n//                                        contentDescription = \"check\",\r\n//                                        tint = CupertinoColors.systemBlue,\r\n//                                    )\r\n//                                }\r\n//                            },\r\n//                            onClick = { }\r\n//                        )\r\n//                    }\r\n//                }\r\n            }\r\n        }\r\n    }\r\n//    navigator: DestinationsNavigator\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/TextReplacementScreen.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/TextReplacementScreen.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/screens/TextReplacementScreen.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/TextReplacementScreen.kt	(date 1707379584728)
@@ -8,9 +8,12 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.unit.dp
+import cafe.adriel.voyager.core.screen.Screen
+import cafe.adriel.voyager.core.screen.ScreenKey
+import cafe.adriel.voyager.core.screen.uniqueScreenKey
+import cafe.adriel.voyager.navigator.LocalNavigator
+import cafe.adriel.voyager.navigator.currentOrThrow
 import com.optiflowx.optikeysx.ui.bold
-import com.ramcosta.composedestinations.annotation.Destination
-import com.ramcosta.composedestinations.navigation.DestinationsNavigator
 import io.github.alexzhirkevich.cupertino.CupertinoIcon
 import io.github.alexzhirkevich.cupertino.CupertinoNavigateBackButton
 import io.github.alexzhirkevich.cupertino.CupertinoScaffold
@@ -22,59 +25,45 @@
 import io.github.alexzhirkevich.cupertino.section.CupertinoSectionDefaults
 import io.github.alexzhirkevich.cupertino.section.LocalSectionStyle
 
-@Suppress("UNCHECKED_CAST")
-@OptIn(ExperimentalCupertinoApi::class)
-@Composable
-@Destination
-fun TextReplacementScreen(navigator: DestinationsNavigator) {
-    val context = LocalContext.current
-
-//    val tileTextStyle = TextStyle(
-//        fontSize = TextUnit(17f, TextUnitType.Sp).nonScaledSp,
-//        fontFamily = regular,
-//    )
-//
-//    val viewModel = viewModel<AppViewModel>(
-//        key = "AppViewModel",
-//        factory = object : ViewModelProvider.Factory {
-//            override fun <T : ViewModel> create(modelClass: Class<T>): T {
-//                return AppViewModel(context) as T
-//            }
-//        }
-//    )
-//
-//    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
+class TextReplacementScreen : Screen {
+    override val key: ScreenKey = uniqueScreenKey
+
+    @OptIn(ExperimentalCupertinoApi::class)
+    @Composable
+    override fun Content() {
+        val context = LocalContext.current
+        val navigator = LocalNavigator.currentOrThrow
 
-    CupertinoScaffold(
-        containerColor = CupertinoSectionDefaults.containerColor(LocalSectionStyle.current),
-        topBar = {
-            CupertinoTopAppBar(
-                modifier = Modifier.padding(end = 15.dp),
-                navigationIcon = {
-                    CupertinoNavigateBackButton(onClick = { navigator.popBackStack() }) {
-                        CupertinoText("Home")
-                    }
-                },
-                title = {
-                    CupertinoText(
-                        text = "Text Replacement",
-                        fontFamily = bold,
-                    )
-                },
-                actions = {
-                    CupertinoIcon(
-                        imageVector = CupertinoIcons.Default.Plus,
-                        contentDescription = "add"
-                    )
-                }
-            )
-        }
-    ) {
-        LazyColumn(
-            modifier = Modifier.statusBarsPadding().absolutePadding(top = 40.dp),
-            userScrollEnabled = true
-        ) {
-            item("Keyboard Fonts") {
+        CupertinoScaffold(
+            containerColor = CupertinoSectionDefaults.containerColor(LocalSectionStyle.current),
+            topBar = {
+                CupertinoTopAppBar(
+                    modifier = Modifier.padding(end = 15.dp),
+                    navigationIcon = {
+                        CupertinoNavigateBackButton(onClick = { navigator.pop() }) {
+                            CupertinoText("Home")
+                        }
+                    },
+                    title = {
+                        CupertinoText(
+                            text = "Text Replacement",
+                            fontFamily = bold,
+                        )
+                    },
+                    actions = {
+                        CupertinoIcon(
+                            imageVector = CupertinoIcons.Default.Plus,
+                            contentDescription = "add"
+                        )
+                    }
+                )
+            }
+        ) {
+            LazyColumn(
+                modifier = Modifier.statusBarsPadding().absolutePadding(top = 40.dp),
+                userScrollEnabled = true
+            ) {
+                item("Keyboard Fonts") {
 //                CupertinoSection {
 //                    fonts.forEachIndexed { index, font ->
 //                        this.link(
@@ -93,9 +82,10 @@
 //                        )
 //                    }
 //                }
-            }
-        }
-    }
+                }
+            }
+        }
 //    navigator: DestinationsNavigator
 
+    }
 }
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/screens/KeyboardsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@file:Suppress(\"UNCHECKED_CAST\")\r\n\r\npackage com.optiflowx.optikeysx.screens\r\n\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.provider.Settings\r\nimport android.view.inputmethod.InputMethodInfo\r\nimport android.view.inputmethod.InputMethodSubtype\r\nimport androidx.compose.foundation.layout.absolutePadding\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.runtime.mutableStateOf\r\nimport androidx.compose.runtime.remember\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.dp\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.ui.regular\r\nimport com.ramcosta.composedestinations.annotation.Destination\r\nimport com.ramcosta.composedestinations.navigation.DestinationsNavigator\r\nimport io.github.alexzhirkevich.cupertino.CupertinoIcon\r\nimport io.github.alexzhirkevich.cupertino.CupertinoNavigateBackButton\r\nimport io.github.alexzhirkevich.cupertino.CupertinoScaffold\r\nimport io.github.alexzhirkevich.cupertino.CupertinoText\r\nimport io.github.alexzhirkevich.cupertino.CupertinoTopAppBar\r\nimport io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi\r\nimport io.github.alexzhirkevich.cupertino.icons.CupertinoIcons\r\nimport io.github.alexzhirkevich.cupertino.icons.outlined.CheckmarkCircle\r\nimport io.github.alexzhirkevich.cupertino.section.CupertinoSection\r\nimport io.github.alexzhirkevich.cupertino.section.CupertinoSectionDefaults\r\nimport io.github.alexzhirkevich.cupertino.section.LocalSectionStyle\r\nimport io.github.alexzhirkevich.cupertino.section.link\r\nimport io.github.alexzhirkevich.cupertino.theme.CupertinoColors\r\nimport io.github.alexzhirkevich.cupertino.theme.systemBlue\r\nimport splitties.systemservices.inputMethodManager\r\n\r\nprivate fun onAddKeyboard(context: Context) {\r\n    val imId = Settings.Secure.getString(\r\n        context.contentResolver,\r\n        Settings.Secure.DEFAULT_INPUT_METHOD\r\n    )\r\n\r\n    val intent = Intent(Settings.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS)\r\n        .putExtra(Settings.EXTRA_INPUT_METHOD_ID, imId)\r\n        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)\r\n        .putExtra(Intent.EXTRA_TITLE, \"Select Enabled Subtypes\")\r\n    context.startActivity(intent);\r\n}\r\n\r\n@OptIn(ExperimentalCupertinoApi::class)\r\n@Composable\r\n@Destination\r\nfun KeyboardsScreen(navigator: DestinationsNavigator) {\r\n    val context = LocalContext.current\r\n    val pC = PrefsConstants\r\n\r\n    val tileTextStyle = TextStyle(\r\n        fontSize = TextUnit(17f, TextUnitType.Sp).nonScaledSp,\r\n        fontFamily = regular,\r\n    )\r\n\r\n    val mIMM = inputMethodManager\r\n\r\n    val inputML: List<InputMethodInfo> = mIMM.enabledInputMethodList\r\n\r\n    val subtypeList: List<InputMethodSubtype> = mIMM.getEnabledInputMethodSubtypeList(\r\n        inputML[0], true\r\n    )\r\n\r\n    val mIMS = mIMM.showInputMethodPicker()\r\n\r\n    val id = inputML[0].id\r\n\r\n//    val token = mIMS.window.window?.attributes?.token\r\n\r\n    val currentTag by remember(mIMM, mIMM.currentInputMethodSubtype, subtypeList) {\r\n        mutableStateOf(mIMM.currentInputMethodSubtype?.languageTag)\r\n    }\r\n\r\n    CupertinoScaffold(\r\n        containerColor = CupertinoSectionDefaults.containerColor(LocalSectionStyle.current),\r\n        topBar = {\r\n            CupertinoTopAppBar(\r\n                navigationIcon = {\r\n                    CupertinoNavigateBackButton(onClick = { navigator.popBackStack() }) {\r\n                        CupertinoText(\"Home\")\r\n                    }\r\n                },\r\n                title = { CupertinoText(\"Keyboards\") }\r\n            )\r\n        }\r\n    ) {\r\n        LazyColumn(\r\n            modifier = Modifier\r\n                .statusBarsPadding()\r\n                .absolutePadding(top = 40.dp),\r\n            userScrollEnabled = true\r\n        ) {\r\n            item(\"Keyboards Settings\") {\r\n                CupertinoSection {\r\n                    this.link(\r\n                        title = { CupertinoText(\"Add Keyboard\", style = tileTextStyle) },\r\n                        onClick = { onAddKeyboard(context) }\r\n                    )\r\n                    this.link(\r\n                        title = { CupertinoText(\"Change Keyboard\", style = tileTextStyle) },\r\n                        onClick = { mIMM.showInputMethodPicker() }\r\n                    )\r\n                }\r\n            }\r\n            item(\"Keyboards List\") {\r\n                CupertinoSection {\r\n                    subtypeList.forEachIndexed { index, subtype ->\r\n                        val subtypeTag = subtype.languageTag\r\n                        val name = subtype.getDisplayName(\r\n                            context,\r\n                            context.packageName,\r\n                            context.applicationInfo\r\n                        )\r\n\r\n                        this.link(\r\n                            key = index,\r\n                            title = { CupertinoText(\"$name\", style = tileTextStyle) },\r\n                            trailingIcon = {\r\n                                if (subtypeTag == currentTag) {\r\n                                    CupertinoIcon(\r\n                                        imageVector = CupertinoIcons.Default.CheckmarkCircle,\r\n                                        contentDescription = \"check\",\r\n                                        tint = CupertinoColors.systemBlue,\r\n                                    )\r\n                                }\r\n                            },\r\n                            onClick = {\r\n//                                if(token != null) {\r\n//                                    @Suppress(\"DEPRECATION\")\r\n//                                    mIMM.setInputMethodAndSubtype(token,id, subtype)\r\n//                                }\r\n                            }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/KeyboardsScreen.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/KeyboardsScreen.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/screens/KeyboardsScreen.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/KeyboardsScreen.kt	(date 1707379584768)
@@ -1,11 +1,8 @@
-@file:Suppress("UNCHECKED_CAST")
-
 package com.optiflowx.optikeysx.screens
 
-import android.content.Context
-import android.content.Intent
-import android.provider.Settings
+import android.inputmethodservice.InputMethodService
 import android.view.inputmethod.InputMethodInfo
+import android.view.inputmethod.InputMethodManager
 import android.view.inputmethod.InputMethodSubtype
 import androidx.compose.foundation.layout.absolutePadding
 import androidx.compose.foundation.layout.statusBarsPadding
@@ -20,11 +17,15 @@
 import androidx.compose.ui.unit.TextUnit
 import androidx.compose.ui.unit.TextUnitType
 import androidx.compose.ui.unit.dp
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
+import cafe.adriel.voyager.core.model.rememberScreenModel
+import cafe.adriel.voyager.core.screen.Screen
+import cafe.adriel.voyager.core.screen.ScreenKey
+import cafe.adriel.voyager.core.screen.uniqueScreenKey
+import cafe.adriel.voyager.navigator.LocalNavigator
+import cafe.adriel.voyager.navigator.currentOrThrow
 import com.optiflowx.optikeysx.core.utils.nonScaledSp
 import com.optiflowx.optikeysx.ui.regular
-import com.ramcosta.composedestinations.annotation.Destination
-import com.ramcosta.composedestinations.navigation.DestinationsNavigator
+import com.optiflowx.optikeysx.viewmodels.KeyboardSettingsModel
 import io.github.alexzhirkevich.cupertino.CupertinoIcon
 import io.github.alexzhirkevich.cupertino.CupertinoNavigateBackButton
 import io.github.alexzhirkevich.cupertino.CupertinoScaffold
@@ -41,109 +42,98 @@
 import io.github.alexzhirkevich.cupertino.theme.systemBlue
 import splitties.systemservices.inputMethodManager
 
-private fun onAddKeyboard(context: Context) {
-    val imId = Settings.Secure.getString(
-        context.contentResolver,
-        Settings.Secure.DEFAULT_INPUT_METHOD
-    )
+class KeyboardsScreen : Screen {
+    override val key: ScreenKey = uniqueScreenKey
 
-    val intent = Intent(Settings.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS)
-        .putExtra(Settings.EXTRA_INPUT_METHOD_ID, imId)
-        .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
-        .putExtra(Intent.EXTRA_TITLE, "Select Enabled Subtypes")
-    context.startActivity(intent);
-}
+    companion object {
+        const val TAG = "KeyboardsScreen"
+    }
 
-@OptIn(ExperimentalCupertinoApi::class)
-@Composable
-@Destination
-fun KeyboardsScreen(navigator: DestinationsNavigator) {
-    val context = LocalContext.current
-    val pC = PrefsConstants
+    @OptIn(ExperimentalCupertinoApi::class)
+    @Composable
+    override fun Content() {
+        val context = LocalContext.current
+        val navigator = LocalNavigator.currentOrThrow
 
-    val tileTextStyle = TextStyle(
-        fontSize = TextUnit(17f, TextUnitType.Sp).nonScaledSp,
-        fontFamily = regular,
-    )
+        val tileTextStyle = TextStyle(
+            fontSize = TextUnit(17f, TextUnitType.Sp).nonScaledSp,
+            fontFamily = regular,
+        )
 
-    val mIMM = inputMethodManager
+        val mIMM = context.getSystemService(InputMethodService.INPUT_METHOD_SERVICE) as InputMethodManager
 
-    val inputML: List<InputMethodInfo> = mIMM.enabledInputMethodList
+        val inputML: List<InputMethodInfo> = mIMM.enabledInputMethodList
 
-    val subtypeList: List<InputMethodSubtype> = mIMM.getEnabledInputMethodSubtypeList(
-        inputML[0], true
-    )
+        val subtypeList: List<InputMethodSubtype> = mIMM.getEnabledInputMethodSubtypeList(
+            inputML[0], true
+        )
 
-    val mIMS = mIMM.showInputMethodPicker()
-
-    val id = inputML[0].id
-
-//    val token = mIMS.window.window?.attributes?.token
-
-    val currentTag by remember(mIMM, mIMM.currentInputMethodSubtype, subtypeList) {
-        mutableStateOf(mIMM.currentInputMethodSubtype?.languageTag)
-    }
+        val currentTag by remember(mIMM, mIMM.currentInputMethodSubtype, subtypeList) {
+            mutableStateOf(mIMM.currentInputMethodSubtype?.languageTag)
+        }
 
-    CupertinoScaffold(
-        containerColor = CupertinoSectionDefaults.containerColor(LocalSectionStyle.current),
-        topBar = {
-            CupertinoTopAppBar(
-                navigationIcon = {
-                    CupertinoNavigateBackButton(onClick = { navigator.popBackStack() }) {
-                        CupertinoText("Home")
-                    }
-                },
-                title = { CupertinoText("Keyboards") }
-            )
-        }
-    ) {
-        LazyColumn(
-            modifier = Modifier
-                .statusBarsPadding()
-                .absolutePadding(top = 40.dp),
-            userScrollEnabled = true
-        ) {
-            item("Keyboards Settings") {
-                CupertinoSection {
-                    this.link(
-                        title = { CupertinoText("Add Keyboard", style = tileTextStyle) },
-                        onClick = { onAddKeyboard(context) }
-                    )
-                    this.link(
-                        title = { CupertinoText("Change Keyboard", style = tileTextStyle) },
-                        onClick = { mIMM.showInputMethodPicker() }
-                    )
-                }
-            }
-            item("Keyboards List") {
-                CupertinoSection {
-                    subtypeList.forEachIndexed { index, subtype ->
-                        val subtypeTag = subtype.languageTag
-                        val name = subtype.getDisplayName(
-                            context,
-                            context.packageName,
-                            context.applicationInfo
-                        )
+        val settingsModel = rememberScreenModel(TAG) {
+            KeyboardSettingsModel()
+        }
+
+        CupertinoScaffold(
+            containerColor = CupertinoSectionDefaults.containerColor(LocalSectionStyle.current),
+            topBar = {
+                CupertinoTopAppBar(
+                    navigationIcon = {
+                        CupertinoNavigateBackButton(onClick = { navigator.pop() }) {
+                            CupertinoText("Home")
+                        }
+                    },
+                    title = { CupertinoText("Keyboards") }
+                )
+            }
+        ) {
+            LazyColumn(
+                modifier = Modifier
+                    .statusBarsPadding()
+                    .absolutePadding(top = 40.dp),
+                userScrollEnabled = true
+            ) {
+                item("Keyboards Settings") {
+                    CupertinoSection {
+                        this.link(
+                            title = { CupertinoText("Add Keyboard", style = tileTextStyle) },
+                            onClick = { settingsModel.onAddKeyboard(context) }
+                        )
+                        this.link(
+                            title = { CupertinoText("Change Keyboard", style = tileTextStyle) },
+                            onClick = { inputMethodManager.showInputMethodPicker() }
+                        )
+                    }
+                }
+                item("Keyboards List") {
+                    CupertinoSection {
+                        subtypeList.forEachIndexed { index, subtype ->
+                            val subtypeTag = subtype.languageTag
+                            val dName = subtype.getDisplayName(
+                                context,
+                                context.packageName,
+                                context.applicationInfo
+                            )
 
-                        this.link(
-                            key = index,
-                            title = { CupertinoText("$name", style = tileTextStyle) },
-                            trailingIcon = {
-                                if (subtypeTag == currentTag) {
-                                    CupertinoIcon(
-                                        imageVector = CupertinoIcons.Default.CheckmarkCircle,
-                                        contentDescription = "check",
-                                        tint = CupertinoColors.systemBlue,
-                                    )
-                                }
-                            },
-                            onClick = {
-//                                if(token != null) {
-//                                    @Suppress("DEPRECATION")
-//                                    mIMM.setInputMethodAndSubtype(token,id, subtype)
-//                                }
-                            }
-                        )
+                            val name = dName.ifEmpty { "System Default" }
+
+                            this.link(
+                                key = index,
+                                title = { CupertinoText("$name", style = tileTextStyle) },
+                                trailingIcon = {
+                                    if (subtypeTag == currentTag) {
+                                        CupertinoIcon(
+                                            imageVector = CupertinoIcons.Default.CheckmarkCircle,
+                                            contentDescription = "check",
+                                            tint = CupertinoColors.systemBlue,
+                                        )
+                                    }
+                                },
+                                onClick = {}
+                            )
+                        }
                     }
                 }
             }
Index: app/src/main/java/com/optiflowx/optikeysx/screens/HomeScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/HomeScreen.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/home/HomeScreen.kt
rename from app/src/main/java/com/optiflowx/optikeysx/screens/HomeScreen.kt
rename to app/src/main/java/com/optiflowx/optikeysx/screens/home/HomeScreen.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/screens/HomeScreen.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/home/HomeScreen.kt	(date 1707379584788)
@@ -1,476 +1,186 @@
-package com.optiflowx.optikeysx.screens
+package com.optiflowx.optikeysx.screens.home
 
-import android.content.Intent
-import android.os.Build
-import android.provider.Settings
-import androidx.compose.foundation.interaction.MutableInteractionSource
+import android.app.Activity
 import androidx.compose.foundation.layout.absolutePadding
-import androidx.compose.foundation.layout.padding
 import androidx.compose.foundation.layout.statusBarsPadding
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.lazy.rememberLazyListState
-import androidx.compose.foundation.text.KeyboardOptions
 import androidx.compose.runtime.Composable
 import androidx.compose.runtime.LaunchedEffect
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.rememberCoroutineScope
 import androidx.compose.ui.ExperimentalComposeUiApi
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.platform.LocalFocusManager
-import androidx.compose.ui.platform.LocalUriHandler
 import androidx.compose.ui.platform.testTag
 import androidx.compose.ui.semantics.semantics
 import androidx.compose.ui.semantics.testTagsAsResourceId
 import androidx.compose.ui.text.TextStyle
-import androidx.compose.ui.text.input.KeyboardType
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
-import androidx.lifecycle.ViewModel
-import androidx.lifecycle.ViewModelProvider
-import androidx.lifecycle.viewmodel.compose.viewModel
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
+import cafe.adriel.voyager.core.model.rememberScreenModel
+import cafe.adriel.voyager.core.screen.Screen
+import cafe.adriel.voyager.core.screen.ScreenKey
+import cafe.adriel.voyager.core.screen.uniqueScreenKey
 import com.optiflowx.optikeysx.core.utils.nonScaledSp
 import com.optiflowx.optikeysx.screens.components.TopBar
-import com.optiflowx.optikeysx.screens.destinations.KeyboardFontsScreenDestination
-import com.optiflowx.optikeysx.screens.destinations.KeyboardsScreenDestination
-import com.optiflowx.optikeysx.screens.destinations.TextReplacementScreenDestination
 import com.optiflowx.optikeysx.ui.bold
 import com.optiflowx.optikeysx.ui.cupertino.CopyrightBottomSheet
-import com.optiflowx.optikeysx.ui.cupertino.CupertinoTile
 import com.optiflowx.optikeysx.ui.regular
-import com.optiflowx.optikeysx.viewmodels.AppViewModel
-import com.ramcosta.composedestinations.annotation.Destination
-import com.ramcosta.composedestinations.annotation.RootNavGraph
-import com.ramcosta.composedestinations.navigation.DestinationsNavigator
+import com.optiflowx.optikeysx.viewmodels.KeyboardSettingsModel
 import io.github.alexzhirkevich.cupertino.CupertinoBottomSheetScaffold
 import io.github.alexzhirkevich.cupertino.CupertinoBottomSheetScaffoldDefaults
 import io.github.alexzhirkevich.cupertino.CupertinoNavigationTitle
 import io.github.alexzhirkevich.cupertino.CupertinoSheetValue
 import io.github.alexzhirkevich.cupertino.CupertinoText
-import io.github.alexzhirkevich.cupertino.CupertinoTextField
 import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
 import io.github.alexzhirkevich.cupertino.PresentationDetent
 import io.github.alexzhirkevich.cupertino.PresentationStyle
 import io.github.alexzhirkevich.cupertino.rememberCupertinoBottomSheetScaffoldState
 import io.github.alexzhirkevich.cupertino.rememberCupertinoSheetState
-import io.github.alexzhirkevich.cupertino.section.CupertinoSection
-import io.github.alexzhirkevich.cupertino.section.link
-import io.github.alexzhirkevich.cupertino.section.switch
-import io.github.alexzhirkevich.cupertino.theme.CupertinoColors
 import io.github.alexzhirkevich.cupertino.theme.CupertinoTheme
-import io.github.alexzhirkevich.cupertino.theme.systemBlue
-import io.github.alexzhirkevich.cupertino.theme.systemGreen
-import io.github.alexzhirkevich.cupertino.theme.systemOrange
-import io.github.alexzhirkevich.cupertino.theme.systemRed
-import io.github.alexzhirkevich.cupertino.theme.systemYellow
-import kotlinx.coroutines.launch
-import splitties.systemservices.inputMethodManager
 
+
+data class HomeScreen(val activity: Activity) : Screen {
+    override val key: ScreenKey = uniqueScreenKey
+    companion object {
+        const val TAG = "HomeScreen"
+    }
 
-@Composable
-@Destination
-@OptIn(ExperimentalCupertinoApi::class, ExperimentalComposeUiApi::class)
-@RootNavGraph(start = true)
-fun HomeScreen(navigator: DestinationsNavigator) {
-    val uriHandler = LocalUriHandler.current
-    val context = LocalContext.current
-    val pC = PrefsConstants
+    @Composable
+    @OptIn(ExperimentalCupertinoApi::class, ExperimentalComposeUiApi::class)
+    override fun Content() {
+        val screenModel = rememberScreenModel(tag = TAG) { KeyboardSettingsModel() }
+
+        screenModel.initRecognizerSourceProviders(activity)
 
-    val tileTextStyle = TextStyle(
-        fontSize = 17.sp.nonScaledSp,
-        fontFamily = regular,
-    )
+        val tileTextStyle = TextStyle(
+            fontSize = 17.sp.nonScaledSp,
+            fontFamily = regular,
+        )
 
-    val titleTextStyle = TextStyle(
-        fontSize = 14.sp.nonScaledSp,
-        fontFamily = regular,
-    )
+        val titleTextStyle = TextStyle(
+            fontSize = 14.sp.nonScaledSp,
+            fontFamily = regular,
+        )
 
-    val navigationTextStyle = TextStyle(
-        fontSize = 32.sp.nonScaledSp,
-        fontFamily = bold,
-    )
+        val navigationTextStyle = TextStyle(
+            fontSize = 32.sp.nonScaledSp,
+            fontFamily = bold,
+        )
 
-    val descTextStyle = TextStyle(
-        fontSize = 13.sp.nonScaledSp,
-        fontFamily = regular,
-    )
+        val descTextStyle = TextStyle(
+            fontSize = 13.sp.nonScaledSp,
+            fontFamily = regular,
+        )
 
-    val viewModel = viewModel<AppViewModel>(
-        key = "AppViewModel",
-        factory = object : ViewModelProvider.Factory {
-            @Suppress("UNCHECKED_CAST")
-            override fun <T : ViewModel> create(modelClass: Class<T>): T {
-                return AppViewModel(context) as T
-            }
-        }
-    )
-
-    val packageInfo = context.packageManager.getPackageInfo(context.packageName, 0)
-
-    val isSound = rememberPreference(pC.SOUND_ON_KEY_PRESS_KEY, false)
-
-    val isVibrate = rememberPreference(pC.VIBRATE_ON_KEY_PRESS_KEY, false)
-
-    val isAutoCapitalisation = rememberPreference(pC.AUTO_CAPITALISATION_KEY, true)
-
-    val isDotShortcut = rememberPreference(pC.DOT_SHORTCUT_KEY, true)
-
-    val isEnableCapsLock = rememberPreference(pC.ENABLE_CAPS_LOCK_KEY, true)
-
-    val isPredictive = rememberPreference(pC.PREDICTIVE_KEY, true)
-
-    val isAutoCorrect = rememberPreference(pC.AUTO_CORRECTION_KEY, false)
-
-    val isCheckSpelling = rememberPreference(pC.CHECK_SPELLING_KEY, false)
-
-    val isCharacterPreview = rememberPreference(pC.CHARACTER_PREVIEW_KEY, false)
-
-    val (value, onValueChange) = remember { mutableStateOf("") }
-
-    val interactionSource = remember { MutableInteractionSource() }
-
-    val lazyListState = rememberLazyListState()
+        val lazyListState = rememberLazyListState()
 
-    val scaffoldState = rememberCupertinoBottomSheetScaffoldState(
-        rememberCupertinoSheetState(
-            presentationStyle = PresentationStyle.Modal(
-                detents = setOf(
-                    PresentationDetent.Large,
-                    PresentationDetent.Fraction(.6f),
-                ),
-            )
-        )
-    )
+        val scaffoldState = rememberCupertinoBottomSheetScaffoldState(
+            rememberCupertinoSheetState(
+                presentationStyle = PresentationStyle.Modal(
+                    detents = setOf(
+                        PresentationDetent.Large,
+                        PresentationDetent.Fraction(.6f),
+                    ),
+                )
+            )
+        )
 
-    val coroutineScope = rememberCoroutineScope()
-
-    val sheetSectionColor = CupertinoTheme.colorScheme.tertiarySystemBackground
+        val sheetSectionColor = CupertinoTheme.colorScheme.tertiarySystemBackground
 
-    val focusManager = LocalFocusManager.current
+        val focusManager = LocalFocusManager.current
 
-    LaunchedEffect(lazyListState.isScrollInProgress) {
-        if (lazyListState.isScrollInProgress) {
-            focusManager.clearFocus(force = true)
-        }
-    }
+        LaunchedEffect(lazyListState.isScrollInProgress) {
+            if (lazyListState.isScrollInProgress) {
+                focusManager.clearFocus(force = true)
+            }
+        }
 
-    LaunchedEffect(scaffoldState.bottomSheetState.targetValue) {
-        if (scaffoldState.bottomSheetState.targetValue == CupertinoSheetValue.Hidden) {
-            focusManager.clearFocus(force = true)
-        }
-    }
+        LaunchedEffect(scaffoldState.bottomSheetState.targetValue) {
+            if (scaffoldState.bottomSheetState.targetValue == CupertinoSheetValue.Hidden) {
+                focusManager.clearFocus(force = true)
+            }
+        }
 
-    CupertinoBottomSheetScaffold(
-        hasNavigationTitle = true,
-        modifier = Modifier.semantics {
-            testTagsAsResourceId = true
-        },
-        colors = CupertinoBottomSheetScaffoldDefaults.colors(
-            sheetContainerColor = CupertinoTheme.colorScheme
-                .secondarySystemBackground,
-        ),
-        sheetContent = {
-            CopyrightBottomSheet(
-                scaffoldState = scaffoldState,
-                sheetSectionColor = sheetSectionColor
-            )
-        },
-        scaffoldState = scaffoldState,
-        topBar = {
-            TopBar(
-                lazyListState = lazyListState,
-                title = "OptiKeysX"
-            )
-        },
-    ) {
-        LazyColumn(
-            modifier = Modifier
-                .statusBarsPadding()
-                .absolutePadding(top = 40.dp)
-                .testTag("home_screen_list"),
-            userScrollEnabled = true
-        ) {
-            item {
-                CupertinoNavigationTitle {
-                    CupertinoText("OptiKeysX", style = navigationTextStyle)
-                }
-            }
-            item("Message Section") {
-                CupertinoSection {
-                    item("text") {
-                        CupertinoText(
-                            text = "CAUTION: Acquiring this application for free from unofficial sources may expose " +
-                                    "you to potential malware threats. Thus, I strongly advise against accepting or using any " +
-                                    "modified versions of this app. Download the app from the Google Play Store.",
-                            style = TextStyle(
-                                fontSize = 14.sp.nonScaledSp,
-                                fontFamily = regular,
-                                color = CupertinoColors.systemRed,
-                            ),
-                            modifier = Modifier.padding(it)
-                        )
-                    }
+        CupertinoBottomSheetScaffold(
+            hasNavigationTitle = true,
+            modifier = Modifier.semantics {
+                testTagsAsResourceId = true
+            },
+            colors = CupertinoBottomSheetScaffoldDefaults.colors(
+                sheetContainerColor = CupertinoTheme.colorScheme
+                    .secondarySystemBackground,
+            ),
+            sheetContent = {
+                CopyrightBottomSheet(
+                    scaffoldState = scaffoldState,
+                    sheetSectionColor = sheetSectionColor
+                )
+            },
+            scaffoldState = scaffoldState,
+            topBar = {
+                TopBar(
+                    lazyListState = lazyListState,
+                    title = "OptiKeysX"
+                )
+            },
+        ) {
+            LazyColumn(
+                modifier = Modifier
+                    .statusBarsPadding()
+                    .absolutePadding(top = 40.dp)
+                    .testTag("home_screen_list"),
+                userScrollEnabled = true
+            ) {
+                item {
+                    CupertinoNavigationTitle {
+                        CupertinoText("OptiKeysX", style = navigationTextStyle)
+                    }
+                }
+                item("Message Section") {
+                    MessageSection()
                 }
-            }
-
-            item("Services Section") {
-                CupertinoSection(
-                    title = { CupertinoText("SERVICES", style = titleTextStyle) },
-                    caption = {
-                        CupertinoText(
-                            text = "You can enable or disable the keyboard from here.",
-                            style = descTextStyle,
-                        )
-                    }
-                ) {
-                    this.link(
-                        key = 0,
-                        onClickLabel = "Enable IME Service",
-                        title = { CupertinoText("Enable IME Service", style = tileTextStyle) },
-                        onClick = { context.startActivity(Intent(Settings.ACTION_INPUT_METHOD_SETTINGS)) }
-                    )
-                    this.link(
-                        key = 1,
-                        onClickLabel = "Change IME Service",
-                        title = { CupertinoText("Change IME Service", style = tileTextStyle) },
-                        onClick = {
-                            inputMethodManager.showInputMethodPicker()
-                            focusManager.clearFocus(force = true)
-                        }
-                    )
-                }
-            }
 
-            item("Test Keyboard") {
-                CupertinoSection(
-                    title = {
-                        CupertinoText("TEST KEYBOARD", style = titleTextStyle)
-                    },
-                    caption = {
-                        CupertinoText(
-                            text = "This section is for trying out the keyboard.",
-                            style = descTextStyle
-                        )
-                    }
-                ) {
-                    this.item {
-                        CupertinoTextField(
-                            value = value,
-                            enabled = true,
-                            onValueChange = onValueChange,
-                            modifier = Modifier.padding(it),
-                            interactionSource = interactionSource,
-                            placeholder = {
-                                CupertinoText("Input Test")
-                            },
-                            keyboardOptions = KeyboardOptions(
-                                keyboardType = KeyboardType.Text,
-                            ),
-                        )
-                    }
+                item("Test Keyboard") {
+                    TestKeyboardSection(
+                        titleTextStyle = titleTextStyle,
+                        descTextStyle = descTextStyle,
+                    )
                 }
-            }
 
-            item("General Section") {
-                CupertinoSection(
-                    title = { CupertinoText("GENERAL", style = titleTextStyle) },
-                ) {
-                    this.link(
-                        key = 0,
-                        onClickLabel = "Keyboards",
-                        title = { CupertinoText("Keyboards", style = tileTextStyle) },
-                        onClick = { navigator.navigate(KeyboardsScreenDestination) }
-                    )
-                    this.link(
-                        key = 1,
-                        onClickLabel = "Keyboard Fonts",
-                        title = { CupertinoText("Keyboard Fonts", style = tileTextStyle) },
-                        onClick = { navigator.navigate(KeyboardFontsScreenDestination) }
+                item("General Section") {
+                    GeneralSection(
+                        titleTextStyle = titleTextStyle,
+                        tileTextStyle = tileTextStyle,
                     )
-                    this.link(
-                        key = 2,
-                        onClickLabel = "Text Replacement",
-                        title = {
-                            CupertinoText("Text Replacement", style = tileTextStyle)
-                        },
-                        onClick = {
-                            navigator.navigate(TextReplacementScreenDestination)
-                        }
-                    )
                 }
-            }
 
-            item("Interactions") {
-                CupertinoSection(
-                    title = { CupertinoText("INTERACTIONS", style = titleTextStyle) },
-                ) {
-                    this.switch(
-                        title = {
-                            CupertinoText(
-                                text = "Sound On Key Press",
-                                style = tileTextStyle
-                            )
-                        },
-                        checked = isSound.value,
-                        onCheckedChange = { viewModel.updateSoundOnKeyPress(it) }
+                item("Interactions") {
+                    InteractionsSection(
+                        titleTextStyle = titleTextStyle,
+                        tileTextStyle = tileTextStyle,
                     )
-                    this.switch(
-                        title = {
-                            CupertinoText("Vibrate On Key Press", style = tileTextStyle)
-                        },
-                        checked = isVibrate.value,
-                        onCheckedChange = { viewModel.updateVibrateOnKeyPress(it) }
-                    )
                 }
-            }
 
-            item("All Keyboards Section") {
-                CupertinoSection(
-                    title = { CupertinoText("ALL KEYBOARDS", style = titleTextStyle) },
-                    caption = {
-                        CupertinoText(
-                            text = "Double tapping the space bar will insert a full stop followed by a space.",
-                            style = descTextStyle
-                        )
-                    }
-                ) {
-                    this.switch(
-                        title = {
-                            CupertinoText("Auto-Capitalisation", style = tileTextStyle)
-                        },
-                        checked = isAutoCapitalisation.value,
-                        onCheckedChange = { viewModel.updateAutoCapitalisation(it) }
-                    )
-                    this.switch(
-                        title = {
-                            CupertinoText(
-                                text = "Auto-Correction",
-                                color = CupertinoColors.systemOrange,
-                                style = tileTextStyle
-                            )
-                        },
-                        checked = isAutoCorrect.value,
-                        onCheckedChange = { viewModel.updateAutoCorrection(it) }
-                    )
-                    this.switch(
-                        title = {
-                            CupertinoText(
-                                text = "Check Spelling",
-                                color = CupertinoColors.systemOrange,
-                                style = tileTextStyle
-                            )
-                        },
-                        checked = isCheckSpelling.value,
-                        onCheckedChange = { viewModel.updateCheckSpelling(it) }
-                    )
-                    this.switch(
-                        title = {
-                            CupertinoText("Enable Caps Lock", style = tileTextStyle)
-                        },
-                        checked = isEnableCapsLock.value,
-                        onCheckedChange = { viewModel.updateEnableCapsLock(it) }
+                item("All Keyboards Section") {
+                    AllKeyboardsSection(
+                        titleTextStyle = titleTextStyle,
+                        tileTextStyle = tileTextStyle,
+                        descTextStyle = descTextStyle,
                     )
-                    this.switch(
-                        title = {
-                            CupertinoText("Predictive", style = tileTextStyle)
-                        },
-                        checked = isPredictive.value,
-                        onCheckedChange = { viewModel.updatePredictive(it) }
-                    )
-
-                    this.switch(
-                        title = {
-                            CupertinoText(
-                                text = "Character Preview",
-                                color = CupertinoColors.systemYellow,
-                                style = tileTextStyle
-                            )
-                        },
-                        checked = isCharacterPreview.value,
-                        onCheckedChange = { viewModel.updateCharacterPreview(it) }
-                    )
-                    this.switch(
-                        title = {
-                            CupertinoText("\".\" Shortcut", style = tileTextStyle)
-                        },
-                        checked = isDotShortcut.value,
-                        onCheckedChange = { viewModel.updateDotShortcut(it) }
-                    )
                 }
-            }
 
-            item("App Information Section") {
-                CupertinoSection(
-                    title = { CupertinoText("APP INFORMATION", style = titleTextStyle) }
-                ) {
-                    this.item(0) {
-                        CupertinoTile(
-                            title = "Version",
-                            trailingText = packageInfo.versionName,
-                            trailingIcon = null,
-                        )
-                    }
-                    this.item(1) {
-                        CupertinoTile(
-                            title = "Package Name",
-                            trailingText = packageInfo.packageName,
-                            trailingIcon = null,
-                        )
-                    }
-                    this.item(2) {
-                        CupertinoTile(
-                            title = "Build Version",
-                            trailingText = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
-                                packageInfo.longVersionCode.toString()
-                            } else {
-                                @Suppress("DEPRECATION")
-                                packageInfo.versionCode.toString()
-                            },
-                            trailingIcon = null,
-                        )
-                    }
+                item("App Information Section") {
+                    AppInformationSection(
+                        titleTextStyle = titleTextStyle
+                    )
                 }
-            }
 
-            item("Developer Section") {
-                CupertinoSection(
-                    title = { CupertinoText("DEVELOPER", style = titleTextStyle) },
-                    caption = {
-                        CupertinoText(
-                            text = "This section contains important information from the developer.",
-                            style = descTextStyle
-                        )
-                    }
-                ) {
-                    this.link(
-                        onClickLabel = "Copyright Information",
-                        title = {
-                            CupertinoText(
-                                text = "Copyright Information",
-                                color = CupertinoColors.systemBlue,
-                                style = tileTextStyle
-                            )
-                        },
-                        onClick = {
-                            coroutineScope.launch {
-                                scaffoldState.bottomSheetState.show()
-                            }
-                        }
-                    )
-                    this.link(
-                        onClickLabel = "Join The Support Channel",
-                        title = {
-                            CupertinoText(
-                                text = "Join The Support Channel",
-                                color = CupertinoColors.systemGreen,
-                                style = tileTextStyle
-                            )
-                        },
-                        onClick = { uriHandler.openUri("https://t.me/optiflowxparadise/") }
+                item("Developer Section") {
+                    DeveloperSection(
+                        titleTextStyle = titleTextStyle,
+                        tileTextStyle = tileTextStyle,
+                        descTextStyle = descTextStyle,
+                        scaffoldState = scaffoldState,
                     )
                 }
             }
Index: app/src/main/java/com/optiflowx/optikeysx/screens/KeyboardFontsScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>@file:Suppress(\"UNCHECKED_CAST\")\r\n\r\npackage com.optiflowx.optikeysx.screens\r\n\r\nimport androidx.compose.foundation.layout.absolutePadding\r\nimport androidx.compose.foundation.layout.statusBarsPadding\r\nimport androidx.compose.foundation.lazy.LazyColumn\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.getValue\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.platform.LocalContext\r\nimport androidx.compose.ui.text.TextStyle\r\nimport androidx.compose.ui.unit.TextUnit\r\nimport androidx.compose.ui.unit.TextUnitType\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.ViewModelProvider\r\nimport androidx.lifecycle.viewmodel.compose.viewModel\r\nimport com.optiflowx.optikeysx.core.enums.KeyboardFontType\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.preferences.rememberPreference\r\nimport com.optiflowx.optikeysx.ui.bold\r\nimport com.optiflowx.optikeysx.ui.regular\r\nimport com.optiflowx.optikeysx.core.utils.nonScaledSp\r\nimport com.optiflowx.optikeysx.viewmodels.AppViewModel\r\nimport com.ramcosta.composedestinations.annotation.Destination\r\nimport com.ramcosta.composedestinations.navigation.DestinationsNavigator\r\nimport io.github.alexzhirkevich.cupertino.CupertinoIcon\r\nimport io.github.alexzhirkevich.cupertino.CupertinoNavigateBackButton\r\nimport io.github.alexzhirkevich.cupertino.CupertinoScaffold\r\nimport io.github.alexzhirkevich.cupertino.CupertinoText\r\nimport io.github.alexzhirkevich.cupertino.CupertinoTopAppBar\r\nimport io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi\r\nimport io.github.alexzhirkevich.cupertino.icons.CupertinoIcons\r\nimport io.github.alexzhirkevich.cupertino.icons.outlined.CheckmarkCircle\r\nimport io.github.alexzhirkevich.cupertino.section.CupertinoSection\r\nimport io.github.alexzhirkevich.cupertino.section.CupertinoSectionDefaults\r\nimport io.github.alexzhirkevich.cupertino.section.LocalSectionStyle\r\nimport io.github.alexzhirkevich.cupertino.section.link\r\nimport io.github.alexzhirkevich.cupertino.theme.CupertinoColors\r\nimport io.github.alexzhirkevich.cupertino.theme.systemBlue\r\n\r\n@OptIn(ExperimentalCupertinoApi::class)\r\n@Composable\r\n@Destination\r\nfun KeyboardFontsScreen(navigator: DestinationsNavigator) {\r\n    val fonts = KeyboardFontType.entries\r\n    val context = LocalContext.current\r\n\r\n    val tileTextStyle = TextStyle(\r\n        fontSize = TextUnit(17f, TextUnitType.Sp).nonScaledSp,\r\n        fontFamily = regular,\r\n    )\r\n\r\n    val viewModel = viewModel<AppViewModel>(\r\n        key = \"AppViewModel\",\r\n        factory = object : ViewModelProvider.Factory {\r\n            override fun <T : ViewModel> create(modelClass: Class<T>): T {\r\n                return AppViewModel(context) as T\r\n            }\r\n        }\r\n    )\r\n\r\n    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, \"Regular\")\r\n\r\n    CupertinoScaffold(\r\n        containerColor = CupertinoSectionDefaults.containerColor(LocalSectionStyle.current),\r\n        topBar = {\r\n            CupertinoTopAppBar(\r\n                navigationIcon = {\r\n                    CupertinoNavigateBackButton(onClick = { navigator.popBackStack() }) {\r\n                        CupertinoText(\"Home\")\r\n                    }\r\n                },\r\n                title = {\r\n                    CupertinoText(\r\n                        text = \"Keyboard Fonts\",\r\n                        fontFamily = bold,\r\n                    )\r\n                }\r\n            )\r\n        }\r\n    ) {\r\n        LazyColumn(\r\n            modifier = Modifier.statusBarsPadding().absolutePadding(top = 40.dp),\r\n            userScrollEnabled = true\r\n        ) {\r\n\r\n            item(\"Keyboard Fonts\") {\r\n                CupertinoSection {\r\n                    fonts.forEachIndexed { index, font ->\r\n                        this.link(\r\n                            key = index,\r\n                            title = { CupertinoText(font.name, style = tileTextStyle) },\r\n                            trailingIcon = {\r\n                                if (font.name == fontType) {\r\n                                    CupertinoIcon(\r\n                                        imageVector = CupertinoIcons.Default.CheckmarkCircle,\r\n                                        contentDescription = \"check\",\r\n                                        tint = CupertinoColors.systemBlue,\r\n                                    )\r\n                                }\r\n                            },\r\n                            onClick = { viewModel.updateFontType(font.name) }\r\n                        )\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n//    navigator: DestinationsNavigator\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/KeyboardFontsScreen.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/KeyboardFontsScreen.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/screens/KeyboardFontsScreen.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/KeyboardFontsScreen.kt	(date 1707382622274)
@@ -1,30 +1,23 @@
-@file:Suppress("UNCHECKED_CAST")
-
 package com.optiflowx.optikeysx.screens
 
 import androidx.compose.foundation.layout.absolutePadding
 import androidx.compose.foundation.layout.statusBarsPadding
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.runtime.Composable
-import androidx.compose.runtime.getValue
 import androidx.compose.ui.Modifier
-import androidx.compose.ui.platform.LocalContext
 import androidx.compose.ui.text.TextStyle
 import androidx.compose.ui.unit.TextUnit
 import androidx.compose.ui.unit.TextUnitType
 import androidx.compose.ui.unit.dp
-import androidx.lifecycle.ViewModel
-import androidx.lifecycle.ViewModelProvider
-import androidx.lifecycle.viewmodel.compose.viewModel
+import cafe.adriel.voyager.core.screen.Screen
+import cafe.adriel.voyager.navigator.LocalNavigator
+import cafe.adriel.voyager.navigator.currentOrThrow
 import com.optiflowx.optikeysx.core.enums.KeyboardFontType
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
-import com.optiflowx.optikeysx.core.preferences.rememberPreference
+import com.optiflowx.optikeysx.core.utils.nonScaledSp
+import com.optiflowx.optikeysx.optikeysxPreferences
 import com.optiflowx.optikeysx.ui.bold
 import com.optiflowx.optikeysx.ui.regular
-import com.optiflowx.optikeysx.core.utils.nonScaledSp
-import com.optiflowx.optikeysx.viewmodels.AppViewModel
-import com.ramcosta.composedestinations.annotation.Destination
-import com.ramcosta.composedestinations.navigation.DestinationsNavigator
+import dev.patrickgold.jetpref.datastore.model.observeAsState
 import io.github.alexzhirkevich.cupertino.CupertinoIcon
 import io.github.alexzhirkevich.cupertino.CupertinoNavigateBackButton
 import io.github.alexzhirkevich.cupertino.CupertinoScaffold
@@ -40,74 +33,68 @@
 import io.github.alexzhirkevich.cupertino.theme.CupertinoColors
 import io.github.alexzhirkevich.cupertino.theme.systemBlue
 
-@OptIn(ExperimentalCupertinoApi::class)
-@Composable
-@Destination
-fun KeyboardFontsScreen(navigator: DestinationsNavigator) {
-    val fonts = KeyboardFontType.entries
-    val context = LocalContext.current
+class KeyboardFontsScreen : Screen {
+    val prefs by optikeysxPreferences()
+
+    @OptIn(ExperimentalCupertinoApi::class)
+    @Composable
+    override fun Content() {
+        val fonts = KeyboardFontType.entries
+        val navigator = LocalNavigator.currentOrThrow
+
+        val currentFontType = prefs.keyboardFontType.observeAsState().value
 
-    val tileTextStyle = TextStyle(
-        fontSize = TextUnit(17f, TextUnitType.Sp).nonScaledSp,
-        fontFamily = regular,
-    )
+        val tileTextStyle = TextStyle(
+            fontSize = TextUnit(17f, TextUnitType.Sp).nonScaledSp,
+            fontFamily = regular,
+        )
 
-    val viewModel = viewModel<AppViewModel>(
-        key = "AppViewModel",
-        factory = object : ViewModelProvider.Factory {
-            override fun <T : ViewModel> create(modelClass: Class<T>): T {
-                return AppViewModel(context) as T
-            }
-        }
-    )
-
-    val fontType by rememberPreference(PrefsConstants.FONT_TYPE_KEY, "Regular")
-
-    CupertinoScaffold(
-        containerColor = CupertinoSectionDefaults.containerColor(LocalSectionStyle.current),
-        topBar = {
-            CupertinoTopAppBar(
-                navigationIcon = {
-                    CupertinoNavigateBackButton(onClick = { navigator.popBackStack() }) {
-                        CupertinoText("Home")
-                    }
-                },
-                title = {
-                    CupertinoText(
-                        text = "Keyboard Fonts",
-                        fontFamily = bold,
-                    )
-                }
-            )
-        }
-    ) {
-        LazyColumn(
-            modifier = Modifier.statusBarsPadding().absolutePadding(top = 40.dp),
-            userScrollEnabled = true
-        ) {
+        CupertinoScaffold(
+            containerColor = CupertinoSectionDefaults.containerColor(LocalSectionStyle.current),
+            topBar = {
+                CupertinoTopAppBar(
+                    navigationIcon = {
+                        CupertinoNavigateBackButton(onClick = { navigator.pop() }) {
+                            CupertinoText("Home")
+                        }
+                    },
+                    title = {
+                        CupertinoText(
+                            text = "Keyboard Fonts",
+                            fontFamily = bold,
+                        )
+                    }
+                )
+            }
+        ) {
+            LazyColumn(
+                modifier = Modifier
+                    .statusBarsPadding()
+                    .absolutePadding(top = 40.dp),
+                userScrollEnabled = true
+            ) {
 
-            item("Keyboard Fonts") {
-                CupertinoSection {
-                    fonts.forEachIndexed { index, font ->
-                        this.link(
-                            key = index,
-                            title = { CupertinoText(font.name, style = tileTextStyle) },
-                            trailingIcon = {
-                                if (font.name == fontType) {
-                                    CupertinoIcon(
-                                        imageVector = CupertinoIcons.Default.CheckmarkCircle,
-                                        contentDescription = "check",
-                                        tint = CupertinoColors.systemBlue,
-                                    )
-                                }
-                            },
-                            onClick = { viewModel.updateFontType(font.name) }
-                        )
+                item("Keyboard Fonts") {
+                    CupertinoSection {
+                        fonts.forEachIndexed { index, font ->
+                            this.link(
+                                key = index,
+                                title = { CupertinoText(font.name, style = tileTextStyle) },
+                                trailingIcon = {
+                                    if (font == currentFontType) {
+                                        CupertinoIcon(
+                                            imageVector = CupertinoIcons.Default.CheckmarkCircle,
+                                            contentDescription = "check",
+                                            tint = CupertinoColors.systemBlue,
+                                        )
+                                    }
+                                },
+                                onClick = { prefs.keyboardFontType.set(font) }
+                            )
+                        }
                     }
                 }
             }
         }
     }
-//    navigator: DestinationsNavigator
-
 }
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/screens/home/MessageSection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/home/MessageSection.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/home/MessageSection.kt
new file mode 100644
--- /dev/null	(date 1707376148533)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/home/MessageSection.kt	(date 1707376148533)
@@ -0,0 +1,34 @@
+package com.optiflowx.optikeysx.screens.home
+
+import androidx.compose.foundation.layout.padding
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.unit.sp
+import com.optiflowx.optikeysx.core.utils.nonScaledSp
+import com.optiflowx.optikeysx.ui.regular
+import io.github.alexzhirkevich.cupertino.CupertinoText
+import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
+import io.github.alexzhirkevich.cupertino.section.CupertinoSection
+import io.github.alexzhirkevich.cupertino.theme.CupertinoColors
+import io.github.alexzhirkevich.cupertino.theme.systemRed
+
+@OptIn(ExperimentalCupertinoApi::class)
+@Composable
+fun MessageSection() {
+    CupertinoSection {
+        item("text") {
+            CupertinoText(
+                text = "CAUTION: Acquiring this application from unofficial sources may expose " +
+                        "you to potential malware threats. Thus, I strongly advise against accepting or using any " +
+                        "modified versions of this app. Download the app from the Google Play Store.",
+                style = TextStyle(
+                    fontSize = 14.sp.nonScaledSp,
+                    fontFamily = regular,
+                    color = CupertinoColors.systemRed,
+                ),
+                modifier = Modifier.padding(it)
+            )
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/viewmodels/KeyboardViewModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.viewmodels\r\n\r\nimport android.content.ClipboardManager\r\nimport android.content.Context\r\nimport android.inputmethodservice.InputMethodService\r\nimport android.media.AudioAttributes\r\nimport android.media.SoundPool\r\nimport android.os.Build\r\nimport android.os.VibrationEffect\r\nimport android.view.inputmethod.InputConnection\r\nimport android.view.inputmethod.InputConnection.GET_TEXT_WITH_STYLES\r\nimport android.view.inputmethod.InputMethodManager\r\nimport androidx.compose.runtime.Stable\r\nimport androidx.compose.ui.graphics.Color\r\nimport androidx.lifecycle.LiveData\r\nimport androidx.lifecycle.ViewModel\r\nimport androidx.lifecycle.viewModelScope\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.algorithm.DictationProcessor\r\nimport com.optiflowx.optikeysx.core.database.dao.ClipboardDatabaseDAO\r\nimport com.optiflowx.optikeysx.core.database.dao.FrequentlyUsedEmojiDatabaseDAO\r\nimport com.optiflowx.optikeysx.core.database.dbs.ClipboardDatabase\r\nimport com.optiflowx.optikeysx.core.database.dbs.FrequentlyUsedDatabase\r\nimport com.optiflowx.optikeysx.core.database.entities.ClipData\r\nimport com.optiflowx.optikeysx.core.database.entities.FrequentlyUsedEmoji\r\nimport com.optiflowx.optikeysx.core.enums.KeyboardType\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.preferences.PreferencesHelper\r\nimport com.optiflowx.optikeysx.core.preferences.PrefsConstants\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.languages.english.enListA\r\nimport com.optiflowx.optikeysx.languages.english.enListB\r\nimport com.optiflowx.optikeysx.languages.english.enListC\r\nimport com.optiflowx.optikeysx.languages.english.enListD\r\nimport com.optiflowx.optikeysx.languages.french.frListA\r\nimport com.optiflowx.optikeysx.languages.french.frListB\r\nimport com.optiflowx.optikeysx.languages.french.frListC\r\nimport com.optiflowx.optikeysx.languages.french.frListD\r\nimport com.optiflowx.optikeysx.languages.portuguese.ptListA\r\nimport com.optiflowx.optikeysx.languages.portuguese.ptListB\r\nimport com.optiflowx.optikeysx.languages.portuguese.ptListC\r\nimport com.optiflowx.optikeysx.languages.portuguese.ptListD\r\nimport com.optiflowx.optikeysx.languages.spanish.spListA\r\nimport com.optiflowx.optikeysx.languages.spanish.spListB\r\nimport com.optiflowx.optikeysx.languages.spanish.spListC\r\nimport com.optiflowx.optikeysx.languages.spanish.spListD\r\nimport com.optiflowx.optikeysx.services.IMEService\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.flow.MutableStateFlow\r\nimport kotlinx.coroutines.flow.asStateFlow\r\nimport kotlinx.coroutines.flow.collectLatest\r\nimport kotlinx.coroutines.launch\r\nimport splitties.systemservices.vibrator\r\n\r\n@Stable\r\nclass KeyboardViewModel(context: Context) : ViewModel() {\r\n\r\n    //UI FLows\r\n    private val _isAllCaps = MutableStateFlow(false)\r\n    val isAllCaps = _isAllCaps.asStateFlow()\r\n\r\n    private val _keyboardType = MutableStateFlow(KeyboardType.Normal)\r\n    val keyboardType = _keyboardType.asStateFlow()\r\n\r\n    private val _isNumberSymbol = MutableStateFlow(false)\r\n    val isNumberSymbol = _isNumberSymbol.asStateFlow()\r\n\r\n    private val _isCapsLock = MutableStateFlow(false)\r\n    val isCapsLock = _isCapsLock.asStateFlow()\r\n\r\n    private val _isPhoneSymbol = MutableStateFlow(false)\r\n    val isPhoneSymbol = _isPhoneSymbol.asStateFlow()\r\n\r\n    private val _isEmojiSearch = MutableStateFlow(false)\r\n    val isEmojiSearch = _isEmojiSearch.asStateFlow()\r\n\r\n    private val _isShowOptions = MutableStateFlow(false)\r\n    val isShowOptions = _isShowOptions.asStateFlow()\r\n\r\n    private val _keyActionButtonColor = MutableStateFlow(Color.Transparent)\r\n    val keyActionButtonColor = _keyActionButtonColor.asStateFlow()\r\n\r\n    private val _keyActionTextColor = MutableStateFlow(Color.Transparent)\r\n    val keyActionTextColor = _keyActionTextColor.asStateFlow()\r\n\r\n    private val _keyActionText = MutableStateFlow(\"return\")\r\n    val keyActionText = _keyActionText.asStateFlow()\r\n\r\n    private val _locale = MutableStateFlow(\"en-US\")\r\n    val locale = _locale.asStateFlow()\r\n\r\n    private val _wordsDictionary = MutableStateFlow(listOf<String>())\r\n    val wordsDictionary = _wordsDictionary.asStateFlow()\r\n\r\n    //Sound\r\n    private val _isPoolLoaded = MutableStateFlow(false)\r\n    private val _soundIDT = MutableStateFlow(0)\r\n    private val _soundIDD = MutableStateFlow(0)\r\n    private val _soundIDS = MutableStateFlow(0)\r\n    private val _soundIDR = MutableStateFlow(0)\r\n\r\n    //Private Variables\r\n    private val englishWords = (enListA + enListB + enListC + enListD).toSet()\r\n    private val spanishWords = (spListA + spListB + spListC + spListD).toSet()\r\n    private val ptWords = (ptListA + ptListB + ptListC + ptListD).toSet()\r\n    private val frenchWords = (frListA + frListB + frListC + frListD).toSet()\r\n\r\n    //Sound\r\n    private lateinit var _soundPool: SoundPool\r\n\r\n    //DAO\r\n    private lateinit var _fuEmojiDbDAO: FrequentlyUsedEmojiDatabaseDAO\r\n    private lateinit var _clipDataDbDAO: ClipboardDatabaseDAO\r\n\r\n    //Databases\r\n    private lateinit var _fuEmojiDB: FrequentlyUsedDatabase\r\n    private lateinit var _clipboardDB: ClipboardDatabase\r\n\r\n    //Database Utils\r\n    lateinit var frequentlyUsedEmojis: LiveData<List<FrequentlyUsedEmoji>>\r\n    lateinit var clipData: LiveData<List<ClipData>>\r\n\r\n    //DictationProcessor\r\n    private lateinit var _dictationProcessor: DictationProcessor\r\n    private lateinit var _dictionary: Set<String>\r\n\r\n    private val mIMM =\r\n        (context.getSystemService(InputMethodService.INPUT_METHOD_SERVICE) as InputMethodManager)\r\n\r\n    val mIMS = mIMM.currentInputMethodSubtype\r\n\r\n    private val clipboardManager =\r\n        context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager\r\n\r\n    //UI Locale\r\n    private val _keyboardLocale = KeyboardLocale(locale.value)\r\n\r\n\r\n    //DataStore\r\n    private val preferences = PreferencesHelper(context)\r\n    private val pC = PrefsConstants\r\n\r\n    init {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            initSoundPool()\r\n            //Init Databases\r\n            _fuEmojiDB = FrequentlyUsedDatabase.getInstance(context)\r\n            _clipboardDB = ClipboardDatabase.getInstance(context)\r\n\r\n            //Init DAO\r\n            _fuEmojiDbDAO = _fuEmojiDB.fUsedEmojiDatabaseDAO()\r\n            _clipDataDbDAO = _clipboardDB.clipboardDAO()\r\n\r\n            //Init LiveData\r\n            frequentlyUsedEmojis = _fuEmojiDbDAO.getAllEmojis()\r\n            clipData = _clipDataDbDAO.getAllClipData()\r\n        }\r\n\r\n        clipboardManager.addPrimaryClipChangedListener {\r\n            val clipData = clipboardManager.primaryClip?.getItemAt(0)?.text\r\n            viewModelScope.launch(Dispatchers.IO) {\r\n                if (!clipData.isNullOrEmpty()) {\r\n                    val text = clipData.toString()\r\n                    val id = text.hashCode()\r\n\r\n                    _clipDataDbDAO.insert(ClipData(id, text))\r\n                }\r\n            }\r\n        }\r\n\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            _locale.collectLatest { locale ->\r\n                _dictionary = when (locale) {\r\n                    \"fr-FR\" -> frenchWords\r\n                    \"es\" -> spanishWords\r\n                    \"pt-BR\" -> ptWords\r\n                    else -> englishWords\r\n                }\r\n\r\n                _dictationProcessor = DictationProcessor(_dictionary)\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onCleared() {\r\n        super.onCleared()\r\n\r\n        _fuEmojiDB.close()\r\n        _clipboardDB.close()\r\n        _soundPool.release()\r\n\r\n        clipboardManager.removePrimaryClipChangedListener {}\r\n    }\r\n\r\n    fun initLocale(data: String) {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            _locale.value = data\r\n        }\r\n    }\r\n\r\n//    fun updateIsAllCaps(value: Boolean) {\r\n//        viewModelScope.launch {\r\n//            _isAllCaps.value = value\r\n//        }\r\n//    }\r\n\r\n    fun updateIsEmojiSearch(value: Boolean) {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            _isEmojiSearch.value = value\r\n        }\r\n    }\r\n\r\n    fun updateIsShowOptions(value: Boolean) {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            _isShowOptions.value = value\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    fun updateIMEActions(colorA: Color, colorB: Color, text: String) {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            _keyActionButtonColor.value = colorA\r\n            _keyActionTextColor.value = colorB\r\n            _keyActionText.value = text\r\n        }\r\n    }\r\n\r\n    private fun initSoundPool() = viewModelScope.launch(Dispatchers.IO) {\r\n        val audioAttributes = AudioAttributes.Builder()\r\n            .setUsage(AudioAttributes.USAGE_ASSISTANCE_SONIFICATION)\r\n            .setContentType(AudioAttributes.CONTENT_TYPE_SONIFICATION)\r\n            .build()\r\n\r\n        _soundPool = SoundPool.Builder()\r\n            .setMaxStreams(1)\r\n            .setAudioAttributes(audioAttributes)\r\n            .build()\r\n    }\r\n\r\n    @Stable\r\n    fun initSoundIDs(context: Context) {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            _soundIDT.value = _soundPool.load(context, R.raw.standard, 1)\r\n            _soundIDD.value = _soundPool.load(context, R.raw.delete, 1)\r\n            _soundIDS.value = _soundPool.load(context, R.raw.spacebar, 1)\r\n            _soundIDR.value = _soundPool.load(context, R.raw.ret, 1)\r\n\r\n            _soundPool.setOnLoadCompleteListener { _, _, status ->\r\n                _isPoolLoaded.value = (status == 0)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    fun onDisposeSoundIDs() {\r\n        viewModelScope.launch {\r\n            viewModelScope.launch {\r\n                _soundPool.unload(_soundIDT.value)\r\n                _soundPool.unload(_soundIDD.value)\r\n                _soundPool.unload(_soundIDS.value)\r\n                _soundPool.unload(_soundIDR.value)\r\n            }.invokeOnCompletion {\r\n                _isPoolLoaded.value = false\r\n                _soundIDT.value = 0\r\n                _soundIDD.value = 0\r\n                _soundIDS.value = 0\r\n                _soundIDR.value = 0\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    @Stable\r\n    fun playSound(key: Key) = viewModelScope.launch(Dispatchers.IO) {\r\n        val value: Boolean = preferences.getPreference(pC.SOUND_ON_KEY_PRESS_KEY, true)\r\n        if (value && _isPoolLoaded.value) {\r\n            when (key.id) {\r\n                \"delete\" -> _soundPool.play(_soundIDD.value, 0.5f, 0.5f, 1, 0, 1.05f)\r\n                \"return\" -> _soundPool.play(_soundIDR.value, 0.5f, 0.5f, 1, 0, 1.05f)\r\n                \"space\" -> _soundPool.play(_soundIDS.value, 0.5f, 0.5f, 1, 0, 1.05f)\r\n                else -> _soundPool.play(_soundIDT.value, 0.5f, 0.5f, 1, 0, 1.05f)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    fun vibrate() = viewModelScope.launch(Dispatchers.IO) {\r\n        val value: Boolean = preferences.getPreference(pC.VIBRATE_ON_KEY_PRESS_KEY, true)\r\n        if (value) {\r\n            @Suppress(\"DEPRECATION\")\r\n            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n                vibrator.vibrate(VibrationEffect.createOneShot(45, -1))\r\n            } else vibrator.vibrate(45)\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    fun pasteTextFromClipboard(text: String, context: Context) {\r\n        val connection = (context as IMEService).currentInputConnection\r\n        connection.commitText(text, text.length)\r\n    }\r\n\r\n    @Stable\r\n    fun clearClipboard(data: List<ClipData>?) {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            if (!data.isNullOrEmpty()) {\r\n                _clipDataDbDAO.clear(data)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    private fun checkSpelling(connection: InputConnection) {\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            val checkSpelling: Boolean = preferences.getPreference(pC.CHECK_SPELLING_KEY, false)\r\n            val autoCorrect = preferences.getPreference(pC.AUTO_CORRECTION_KEY, false)\r\n            //Remove the space first\r\n            if (checkSpelling && autoCorrect) {\r\n                this.launch(Dispatchers.IO) {\r\n                    connection.deleteSurroundingText(1, 0).let {\r\n                        val tBC = connection.getTextBeforeCursor(12, GET_TEXT_WITH_STYLES)\r\n                        if (tBC != null) {\r\n                            val lastWord = tBC.split(\" \").last()\r\n\r\n                            this.launch(Dispatchers.IO) {\r\n                                val correction = _dictationProcessor.correct(lastWord)\r\n                                connection.deleteSurroundingText(lastWord.length, 0).let { value ->\r\n                                    if (value) connection.commitText(\"$correction \", 0)\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    private fun handleCapsLock() {\r\n        if (_isAllCaps.value && !_isCapsLock.value) {\r\n            _isAllCaps.value = false\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    private suspend fun updateCapsLock() {\r\n        val value: Boolean = preferences.getPreference(pC.AUTO_CAPITALISATION_KEY, true)\r\n        if (value) {\r\n            _isAllCaps.value = true\r\n            _isCapsLock.value = false\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    private fun handleDotShortcut(connection: InputConnection) {\r\n        viewModelScope.launch {\r\n            val value: Boolean = preferences.getPreference(pC.DOT_SHORTCUT_KEY, true)\r\n            if (value) {\r\n                connection.deleteSurroundingText(1, 0).let {\r\n                    connection.commitText(\". \", \". \".length)\r\n                }\r\n                updateCapsLock()\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    private fun capitalizeI(connection: InputConnection) {\r\n        viewModelScope.launch {\r\n            val value: Boolean = preferences.getPreference(pC.AUTO_CAPITALISATION_KEY, true)\r\n            if (value) {\r\n                connection.deleteSurroundingText(2, 0).let {\r\n                    connection.commitText(\" I \", \" I \".length)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    private fun getNextSuggestions(connection: InputConnection) {\r\n        val charSequence = connection.getTextBeforeCursor(24, GET_TEXT_WITH_STYLES)\r\n        if (charSequence != null) {\r\n            val filterText = charSequence.split(\" \").last()\r\n            _wordsDictionary.value = _dictionary.filter {\r\n                it.startsWith(filterText.lowercase())\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    fun onSuggestionClick(suggestion: String, context: Context) {\r\n        val connection = (context as IMEService).currentInputConnection\r\n        val charSequence = connection.getTextBeforeCursor(24, GET_TEXT_WITH_STYLES)\r\n\r\n        if (charSequence != null) {\r\n            val textToReplace = charSequence.split(\" \").last()\r\n            connection.deleteSurroundingText(textToReplace.length, 0).let {\r\n                if (it) connection.commitText(\"$suggestion \", suggestion.length + 1)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    fun onEmojiClick(context: Context, emoji: String, title: String) {\r\n        val connection = (context as IMEService).currentInputConnection\r\n        connection.commitText(emoji, emoji.length)\r\n\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            if (!title.lowercase().contains(\"frequently\")) {\r\n                val id = emoji.hashCode()\r\n                val data = _fuEmojiDbDAO.getEmojisById(id)\r\n                val all = _fuEmojiDbDAO.getAllEmojis().value\r\n\r\n                if (data != null && data.emoji == emoji) {\r\n                    _fuEmojiDbDAO.deleteAndInsertEmoji(data, data)\r\n                } else if (all?.isNotEmpty() == true && all.size >= 18) {\r\n                    val oldData = all.last()\r\n                    val newData = FrequentlyUsedEmoji(id, emoji)\r\n\r\n                    _fuEmojiDbDAO.deleteAndInsertEmoji(newData, oldData)\r\n                } else _fuEmojiDbDAO.insert(FrequentlyUsedEmoji(id = id, emoji = emoji))\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    fun onTKeyClick(key: Key, context: Context, action: String = \"return\") {\r\n        val connection = (context as IMEService).currentInputConnection\r\n\r\n        when (key.id) {\r\n            \"ABC\" -> onUpdateKeyboardType(KeyboardType.Normal)\r\n\r\n            \"123\" -> onUpdateKeyboardType(KeyboardType.Symbol)\r\n\r\n            \"action\" -> onAction(connection, context, action)\r\n\r\n            \"space\" -> onSpace(connection)\r\n\r\n            else -> onText(connection, key)\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    fun onNumKeyClick(key: Key, context: Context) {\r\n        val connection = (context as IMEService).currentInputConnection\r\n        viewModelScope.launch(Dispatchers.IO) {\r\n            when (key.value) {\r\n                \"*\" -> connection.commitText(key.value, key.value.length)\r\n                \"#\" -> connection.commitText(key.value, key.value.length)\r\n                \"+\" -> connection.commitText(key.value, key.value.length)\r\n                _keyboardLocale.wait() -> connection.commitText(\";\", \";\".length)\r\n                _keyboardLocale.pause() -> connection.commitText(\".\", \".\".length)\r\n                else -> {\r\n                    if (key.id == \"period\") connection.commitText(\".\", \".\".length)\r\n                    else connection.commitText(key.id, key.id.length)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    fun onIKeyClick(key: Key, context: Context) {\r\n        when (key.id) {\r\n            \"emoji\" -> onUpdateKeyboardType(KeyboardType.Emoji)\r\n\r\n            \"delete\" -> onErase(context)\r\n\r\n            \"shift\" -> onShift()\r\n\r\n            \"symbol\" -> onNumSymbol()\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    fun onUpdateKeyboardType(newType: KeyboardType) {\r\n        _keyboardType.value = newType\r\n    }\r\n\r\n    @Stable\r\n    fun onPhoneSymbol() {\r\n        _isPhoneSymbol.value = !(_isPhoneSymbol.value)\r\n    }\r\n\r\n    @Stable\r\n    private fun onSpace(connection: InputConnection) {\r\n        val tBCA = connection.getTextBeforeCursor(1, GET_TEXT_WITH_STYLES)\r\n        val tBCB = connection.getTextBeforeCursor(2, GET_TEXT_WITH_STYLES)\r\n\r\n        if (tBCA.toString() == \" \") handleDotShortcut(connection)\r\n        else if (tBCB.toString() == \" i\") capitalizeI(connection)\r\n        else {\r\n            //Handle Space and Spelling Checker\r\n            connection.commitText(\" \", \" \".length).let {\r\n                if (it) checkSpelling(connection)\r\n            }\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    private fun onText(connection: InputConnection, key: Key) {\r\n        connection.commitText(\r\n            (if (_isAllCaps.value) {\r\n                key.value.uppercase()\r\n            } else key.value.lowercase()), key.value.length\r\n        )\r\n        getNextSuggestions(connection)\r\n        handleCapsLock()\r\n    }\r\n\r\n    @Stable\r\n    private fun onAction(connection: InputConnection, ctx: Context, action: String) {\r\n        if (action == \"return\") {\r\n            connection.commitText(\"\\n\", \"\\n\".length)\r\n        } else (ctx as IMEService).sendDefaultEditorAction(false)\r\n    }\r\n\r\n    @Stable\r\n    private fun onErase(context: Context) {\r\n        val connection = (context as IMEService).currentInputConnection\r\n        val selectedText = connection.getSelectedText(GET_TEXT_WITH_STYLES)\r\n        val text = connection.getTextBeforeCursor(16, 0)?.split(\" \")?.last()\r\n\r\n        if (selectedText != null) {\r\n            connection.commitText(\"\", \"\".length)\r\n        } else if (text?.codePoints() != null && text.codePoints().toArray().isNotEmpty()) {\r\n            connection.deleteSurroundingTextInCodePoints(1, 0)\r\n        } else connection.deleteSurroundingText(1, 0)\r\n\r\n        getNextSuggestions(connection)\r\n        handleCapsLock()\r\n    }\r\n\r\n    @Stable\r\n    private fun onShift() {\r\n        if (_isCapsLock.value) {\r\n            _isCapsLock.value = false\r\n            _isAllCaps.value = false\r\n        } else if (_isAllCaps.value && !(_isCapsLock.value)) {\r\n            onCapsLock()\r\n        } else _isAllCaps.value = !(isAllCaps.value)\r\n    }\r\n\r\n    @Stable\r\n    private fun onCapsLock() {\r\n        viewModelScope.launch {\r\n            val value = preferences.getPreference(pC.ENABLE_CAPS_LOCK_KEY, true)\r\n            if (value) _isCapsLock.value = true //isAllCaps is already true.\r\n            else _isAllCaps.value = false\r\n        }\r\n    }\r\n\r\n    @Stable\r\n    private fun onNumSymbol() {\r\n        viewModelScope.launch {\r\n            _isNumberSymbol.value = !(_isNumberSymbol.value)\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/viewmodels/KeyboardViewModel.kt b/app/src/main/java/com/optiflowx/optikeysx/viewmodels/KeyboardViewModel.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/viewmodels/KeyboardViewModel.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/viewmodels/KeyboardViewModel.kt	(date 1707381185720)
@@ -17,6 +17,7 @@
 import androidx.lifecycle.viewModelScope
 import com.optiflowx.optikeysx.R
 import com.optiflowx.optikeysx.core.algorithm.DictationProcessor
+import com.optiflowx.optikeysx.core.data.KeyboardData
 import com.optiflowx.optikeysx.core.database.dao.ClipboardDatabaseDAO
 import com.optiflowx.optikeysx.core.database.dao.FrequentlyUsedEmojiDatabaseDAO
 import com.optiflowx.optikeysx.core.database.dbs.ClipboardDatabase
@@ -25,9 +26,8 @@
 import com.optiflowx.optikeysx.core.database.entities.FrequentlyUsedEmoji
 import com.optiflowx.optikeysx.core.enums.KeyboardType
 import com.optiflowx.optikeysx.core.model.Key
-import com.optiflowx.optikeysx.core.preferences.PreferencesHelper
-import com.optiflowx.optikeysx.core.preferences.PrefsConstants
 import com.optiflowx.optikeysx.core.utils.KeyboardLocale
+import com.optiflowx.optikeysx.ime.IMEService
 import com.optiflowx.optikeysx.languages.english.enListA
 import com.optiflowx.optikeysx.languages.english.enListB
 import com.optiflowx.optikeysx.languages.english.enListC
@@ -44,7 +44,7 @@
 import com.optiflowx.optikeysx.languages.spanish.spListB
 import com.optiflowx.optikeysx.languages.spanish.spListC
 import com.optiflowx.optikeysx.languages.spanish.spListD
-import com.optiflowx.optikeysx.services.IMEService
+import com.optiflowx.optikeysx.optikeysxPreferences
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.flow.MutableStateFlow
 import kotlinx.coroutines.flow.asStateFlow
@@ -86,8 +86,8 @@
     private val _keyActionText = MutableStateFlow("return")
     val keyActionText = _keyActionText.asStateFlow()
 
-    private val _locale = MutableStateFlow("en-US")
-    val locale = _locale.asStateFlow()
+    private val _keyboardData = MutableStateFlow(KeyboardData())
+    val keyboardData = _keyboardData.asStateFlow()
 
     private val _wordsDictionary = MutableStateFlow(listOf<String>())
     val wordsDictionary = _wordsDictionary.asStateFlow()
@@ -133,12 +133,9 @@
         context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
 
     //UI Locale
-    private val _keyboardLocale = KeyboardLocale(locale.value)
+    private val _keyboardLocale = KeyboardLocale(keyboardData.value.locale)
 
-
-    //DataStore
-    private val preferences = PreferencesHelper(context)
-    private val pC = PrefsConstants
+     val prefs by optikeysxPreferences()
 
     init {
         viewModelScope.launch(Dispatchers.IO) {
@@ -169,8 +166,8 @@
         }
 
         viewModelScope.launch(Dispatchers.IO) {
-            _locale.collectLatest { locale ->
-                _dictionary = when (locale) {
+            keyboardData.collectLatest { data ->
+                _dictionary = when (data.locale) {
                     "fr-FR" -> frenchWords
                     "es" -> spanishWords
                     "pt-BR" -> ptWords
@@ -192,9 +189,9 @@
         clipboardManager.removePrimaryClipChangedListener {}
     }
 
-    fun initLocale(data: String) {
+    fun initKeyboardData(data: KeyboardData) {
         viewModelScope.launch(Dispatchers.IO) {
-            _locale.value = data
+            _keyboardData.value = data
         }
     }
 
@@ -272,7 +269,7 @@
 
     @Stable
     fun playSound(key: Key) = viewModelScope.launch(Dispatchers.IO) {
-        val value: Boolean = preferences.getPreference(pC.SOUND_ON_KEY_PRESS_KEY, true)
+        val value: Boolean = prefs.isSoundOnKeypress.get()
         if (value && _isPoolLoaded.value) {
             when (key.id) {
                 "delete" -> _soundPool.play(_soundIDD.value, 0.5f, 0.5f, 1, 0, 1.05f)
@@ -285,7 +282,7 @@
 
     @Stable
     fun vibrate() = viewModelScope.launch(Dispatchers.IO) {
-        val value: Boolean = preferences.getPreference(pC.VIBRATE_ON_KEY_PRESS_KEY, true)
+        val value: Boolean = prefs.isVibrateOnKeypress.get()
         if (value) {
             @Suppress("DEPRECATION")
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
@@ -312,8 +309,8 @@
     @Stable
     private fun checkSpelling(connection: InputConnection) {
         viewModelScope.launch(Dispatchers.IO) {
-            val checkSpelling: Boolean = preferences.getPreference(pC.CHECK_SPELLING_KEY, false)
-            val autoCorrect = preferences.getPreference(pC.AUTO_CORRECTION_KEY, false)
+            val checkSpelling = prefs.isCheckSpelling.get()
+            val autoCorrect = prefs.isAutoCorrect.get()
             //Remove the space first
             if (checkSpelling && autoCorrect) {
                 this.launch(Dispatchers.IO) {
@@ -344,7 +341,7 @@
 
     @Stable
     private suspend fun updateCapsLock() {
-        val value: Boolean = preferences.getPreference(pC.AUTO_CAPITALISATION_KEY, true)
+        val value: Boolean = prefs.isAutoCapitalisation.get()
         if (value) {
             _isAllCaps.value = true
             _isCapsLock.value = false
@@ -354,7 +351,7 @@
     @Stable
     private fun handleDotShortcut(connection: InputConnection) {
         viewModelScope.launch {
-            val value: Boolean = preferences.getPreference(pC.DOT_SHORTCUT_KEY, true)
+            val value: Boolean = prefs.isDotShortcut.get()
             if (value) {
                 connection.deleteSurroundingText(1, 0).let {
                     connection.commitText(". ", ". ".length)
@@ -367,7 +364,7 @@
     @Stable
     private fun capitalizeI(connection: InputConnection) {
         viewModelScope.launch {
-            val value: Boolean = preferences.getPreference(pC.AUTO_CAPITALISATION_KEY, true)
+            val value: Boolean = prefs.isAutoCapitalisation.get()
             if (value) {
                 connection.deleteSurroundingText(2, 0).let {
                     connection.commitText(" I ", " I ".length)
@@ -543,7 +540,7 @@
     @Stable
     private fun onCapsLock() {
         viewModelScope.launch {
-            val value = preferences.getPreference(pC.ENABLE_CAPS_LOCK_KEY, true)
+            val value = prefs.isEnableCapsLock.get()
             if (value) _isCapsLock.value = true //isAllCaps is already true.
             else _isAllCaps.value = false
         }
Index: app/src/main/java/com/optiflowx/optikeysx/viewmodels/KeyboardSettingsModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/viewmodels/KeyboardSettingsModel.kt b/app/src/main/java/com/optiflowx/optikeysx/viewmodels/KeyboardSettingsModel.kt
new file mode 100644
--- /dev/null	(date 1707379584779)
+++ b/app/src/main/java/com/optiflowx/optikeysx/viewmodels/KeyboardSettingsModel.kt	(date 1707379584779)
@@ -0,0 +1,57 @@
+package com.optiflowx.optikeysx.viewmodels
+
+import android.app.Activity
+import android.content.Context
+import android.content.Intent
+import android.provider.Settings
+import cafe.adriel.voyager.core.model.ScreenModel
+import com.optiflowx.optikeysx.core.downloader.messages.ModelInfo
+import com.optiflowx.optikeysx.core.model.DownloadProgress
+import com.optiflowx.optikeysx.ime.recognizers.providers.Providers
+import com.optiflowx.optikeysx.optikeysxPreferences
+import kotlinx.coroutines.flow.MutableStateFlow
+
+
+class KeyboardSettingsModel : ScreenModel {
+    val prefs by optikeysxPreferences()
+
+    val modelsPendingDownloadLD = MutableStateFlow<List<ModelInfo>>(mutableListOf())
+    private val modelsPendingDownload = mutableListOf<ModelInfo>()
+    val currentDownloadingModel = MutableStateFlow<DownloadProgress?>(null)
+
+    private lateinit var recognizerSourceProviders: Providers
+
+    fun initRecognizerSourceProviders(activity: Activity) {
+        recognizerSourceProviders = Providers(activity)
+    }
+
+    fun reloadModels() {
+        val currentModels = prefs.modelsOrder.get().toMutableList()
+        val installedModels = recognizerSourceProviders.installedModels()
+        currentModels.removeAll { it !in installedModels }
+        for (model in installedModels) {
+            if (model !in currentModels) {
+                currentModels.add(model)
+            }
+        }
+
+        prefs.modelsOrder.set(currentModels)
+    }
+
+    fun onAddKeyboard(context: Context) {
+        val imId = Settings.Secure.getString(
+            context.contentResolver,
+            Settings.Secure.DEFAULT_INPUT_METHOD
+        )
+
+        val intent = Intent(Settings.ACTION_INPUT_METHOD_SUBTYPE_SETTINGS)
+            .putExtra(Settings.EXTRA_INPUT_METHOD_ID, imId)
+            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
+            .putExtra(Intent.EXTRA_TITLE, "Add Keyboard")
+        context.startActivity(intent);
+    }
+
+    override fun onDispose() {
+        super.onDispose()
+    }
+}
\ No newline at end of file
Index: .idea/.name
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.name b/.idea/.name
new file mode 100644
--- /dev/null	(date 1707304984599)
+++ b/.idea/.name	(date 1707304984599)
@@ -0,0 +1,1 @@
+OptiKeysX
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/screens/home/InteractionsSection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/home/InteractionsSection.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/home/InteractionsSection.kt
new file mode 100644
--- /dev/null	(date 1707382571295)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/home/InteractionsSection.kt	(date 1707382571295)
@@ -0,0 +1,43 @@
+package com.optiflowx.optikeysx.screens.home
+
+import androidx.compose.runtime.Composable
+import androidx.compose.ui.text.TextStyle
+import com.optiflowx.optikeysx.optikeysxPreferences
+import dev.patrickgold.jetpref.datastore.model.observeAsState
+import io.github.alexzhirkevich.cupertino.CupertinoText
+import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
+import io.github.alexzhirkevich.cupertino.section.CupertinoSection
+import io.github.alexzhirkevich.cupertino.section.switch
+
+@OptIn(ExperimentalCupertinoApi::class)
+@Composable
+fun InteractionsSection(
+    titleTextStyle: TextStyle,
+    tileTextStyle: TextStyle
+) {
+    val prefs by optikeysxPreferences()
+    val isSoundOnKeypress = prefs.isSoundOnKeypress.observeAsState().value
+    val isVibrateOnKeypress = prefs.isVibrateOnKeypress.observeAsState().value
+
+    CupertinoSection(
+        title = { CupertinoText("INTERACTIONS", style = titleTextStyle) },
+    ) {
+        this.switch(
+            title = {
+                CupertinoText(
+                    text = "Sound On Key Press",
+                    style = tileTextStyle
+                )
+            },
+            checked = isSoundOnKeypress,
+            onCheckedChange = { prefs.isSoundOnKeypress.set(it) }
+        )
+        this.switch(
+            title = {
+                CupertinoText("Vibrate On Key Press", style = tileTextStyle)
+            },
+            checked = isVibrateOnKeypress,
+            onCheckedChange = { prefs.isVibrateOnKeypress.set(it) }
+        )
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/screens/home/TestKeyboardSection.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/screens/home/TestKeyboardSection.kt b/app/src/main/java/com/optiflowx/optikeysx/screens/home/TestKeyboardSection.kt
new file mode 100644
--- /dev/null	(date 1707377222884)
+++ b/app/src/main/java/com/optiflowx/optikeysx/screens/home/TestKeyboardSection.kt	(date 1707377222884)
@@ -0,0 +1,54 @@
+package com.optiflowx.optikeysx.screens.home
+
+import androidx.compose.foundation.interaction.MutableInteractionSource
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.text.KeyboardOptions
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.mutableStateOf
+import androidx.compose.runtime.remember
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.text.TextStyle
+import androidx.compose.ui.text.input.KeyboardType
+import io.github.alexzhirkevich.cupertino.CupertinoText
+import io.github.alexzhirkevich.cupertino.CupertinoTextField
+import io.github.alexzhirkevich.cupertino.ExperimentalCupertinoApi
+import io.github.alexzhirkevich.cupertino.section.CupertinoSection
+
+@OptIn(ExperimentalCupertinoApi::class)
+@Composable
+fun TestKeyboardSection(
+    titleTextStyle: TextStyle,
+    descTextStyle: TextStyle,
+) {
+
+    val (value, onValueChange) = remember { mutableStateOf("") }
+    val interactionSource = remember { MutableInteractionSource() }
+
+    CupertinoSection(
+        title = {
+            CupertinoText("TEST KEYBOARD", style = titleTextStyle)
+        },
+        caption = {
+            CupertinoText(
+                text = "This section is for trying out the keyboard.",
+                style = descTextStyle
+            )
+        }
+    ) {
+        this.item {
+            CupertinoTextField(
+                value = value,
+                enabled = true,
+                onValueChange = onValueChange,
+                modifier = Modifier.padding(it),
+                interactionSource = interactionSource,
+                placeholder = {
+                    CupertinoText("Input Test")
+                },
+                keyboardOptions = KeyboardOptions(
+                    keyboardType = KeyboardType.Text,
+                ),
+            )
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/UnzipProgress.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/UnzipProgress.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/UnzipProgress.kt
new file mode 100644
--- /dev/null	(date 1707315546081)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/UnzipProgress.kt	(date 1707315546081)
@@ -0,0 +1,3 @@
+package com.optiflowx.optikeysx.core.downloader.messages
+
+data class UnzipProgress(val info: ModelInfo, val progress: Float)
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelFinished.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelFinished.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelFinished.kt
new file mode 100644
--- /dev/null	(date 1707315545973)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelFinished.kt	(date 1707315545973)
@@ -0,0 +1,3 @@
+package com.optiflowx.optikeysx.core.downloader.messages
+
+data class CancelFinished(val info: ModelInfo)
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelCurrent.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelCurrent.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelCurrent.kt
new file mode 100644
--- /dev/null	(date 1707315545943)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelCurrent.kt	(date 1707315545943)
@@ -0,0 +1,3 @@
+package com.optiflowx.optikeysx.core.downloader.messages
+
+data class CancelCurrent(val info: ModelInfo)
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/Status.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/Status.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/Status.kt
new file mode 100644
--- /dev/null	(date 1707315546174)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/Status.kt	(date 1707315546174)
@@ -0,0 +1,11 @@
+package com.optiflowx.optikeysx.core.downloader.messages
+
+import java.util.Queue
+
+data class Status(
+    val current: ModelInfo?,
+    val queued: Queue<ModelInfo>,
+    val downloadProgress: Float,
+    val unzipProgress: Float,
+    val state: State
+)
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/data/KeyboardData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/data/KeyboardData.kt b/app/src/main/java/com/optiflowx/optikeysx/core/data/KeyboardData.kt
new file mode 100644
--- /dev/null	(date 1707331363383)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/data/KeyboardData.kt	(date 1707331363383)
@@ -0,0 +1,12 @@
+package com.optiflowx.optikeysx.core.data
+
+import android.os.IBinder
+import android.view.inputmethod.EditorInfo
+
+data class KeyboardData(
+    val locale: String = "",
+    val enterAction: Int = EditorInfo.IME_ACTION_UNSPECIFIED,
+    val token: IBinder? = null,
+    val inputType: Int = 0,
+
+    )
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/State.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/State.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/State.kt
new file mode 100644
--- /dev/null	(date 1707315546022)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/State.kt	(date 1707315546022)
@@ -0,0 +1,5 @@
+package com.optiflowx.optikeysx.core.downloader.messages
+
+enum class State {
+    NONE, QUEUED, DOWNLOAD_STARTED, DOWNLOAD_FINISHED, UNZIP_STARTED, UNZIP_FINISHED, FINISHED, ERROR, CANCELED
+}
\ No newline at end of file
Index: app/proguard-rules.pro
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Add project specific ProGuard rules here.\r\n# You can control the set of applied configuration files using the\r\n# proguardFiles setting in build.gradle.\r\n#\r\n# For more details, see\r\n#   http://developer.android.com/guide/developing/tools/proguard.html\r\n\r\n# If your project uses WebView with JS, uncomment the following\r\n# and specify the fully qualified class name to the JavaScript interface\r\n# class:\r\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\r\n#   public *;\r\n#}\r\n\r\n-keepclassmembers class * extends androidx.datastore.preferences.protobuf.GeneratedMessageLite {\r\n    <fields>;\r\n}\r\n\r\n\r\n\r\n# Uncomment this to preserve the line number information for\r\n# debugging stack traces.\r\n#-keepattributes SourceFile,LineNumberTable\r\n\r\n# If you keep the line number information, uncomment this to\r\n# hide the original source file name.\r\n#-renamesourcefileattribute SourceFile
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/proguard-rules.pro b/app/proguard-rules.pro
--- a/app/proguard-rules.pro	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/proguard-rules.pro	(date 1707221829505)
@@ -16,7 +16,13 @@
     <fields>;
 }
 
+-keep class com.sun.jna.* { *; }
+-keepclassmembers class * extends com.sun.jna.* { public *; }
 
+-dontwarn java.awt.Component
+-dontwarn java.awt.GraphicsEnvironment
+-dontwarn java.awt.HeadlessException
+-dontwarn java.awt.Window
 
 # Uncomment this to preserve the line number information for
 # debugging stack traces.
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelPending.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelPending.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelPending.kt
new file mode 100644
--- /dev/null	(date 1707315546060)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/CancelPending.kt	(date 1707315546060)
@@ -0,0 +1,3 @@
+package com.optiflowx.optikeysx.core.downloader.messages
+
+data class CancelPending(val info: ModelInfo)
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadProgress.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadProgress.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadProgress.kt
new file mode 100644
--- /dev/null	(date 1707315546148)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadProgress.kt	(date 1707315546148)
@@ -0,0 +1,3 @@
+package com.optiflowx.optikeysx.core.downloader.messages
+
+data class DownloadProgress(val info: ModelInfo, val progress: Float)
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadState.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadState.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadState.kt
new file mode 100644
--- /dev/null	(date 1707315545985)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadState.kt	(date 1707315545985)
@@ -0,0 +1,3 @@
+package com.optiflowx.optikeysx.core.downloader.messages
+
+data class DownloadState(val info: ModelInfo, val state: State)
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1707304984763)
+++ b/.idea/compiler.xml	(date 1707304984763)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="17" />
+  </component>
+</project>
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultPortraitKeyboard.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.defaults\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.mandatorySystemGesturesPadding\r\nimport androidx.compose.foundation.layout.wrapContentSize\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.platform.LocalConfiguration\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport androidx.constraintlayout.compose.ConstraintSet\r\nimport com.optiflowx.optikeysx.core.enums.KeyboardType\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyboardBottomView\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyboardTopView\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\nimport com.optiflowx.optikeysx.views.clipboard.ClipboardKeyboardView\r\nimport com.optiflowx.optikeysx.views.emoji.EmojiKeyboardView\r\nimport com.optiflowx.optikeysx.views.keyboards.french.FrenchKeyboardView\r\nimport com.optiflowx.optikeysx.views.keyboards.portuguese.PortugueseKeyboardView\r\nimport com.optiflowx.optikeysx.views.keyboards.russian.RussianKeyboardView\r\nimport com.optiflowx.optikeysx.views.keyboards.spanish.SpanishKeyboardView\r\nimport com.optiflowx.optikeysx.views.keyboards.standard.StandardKeyboardView\r\nimport com.optiflowx.optikeysx.views.symbols.SymbolsKeyboardView\r\n\r\n@Composable\r\nfun DefaultPortraitKeyboard(\r\n    vM: KeyboardViewModel\r\n) {\r\n    val vW = LocalConfiguration.current.screenWidthDp.dp\r\n    val vH: Dp = 230.dp\r\n    val cVH: Dp = 200.dp\r\n    val eCC: Int = 6\r\n    val keyboardType = vM.keyboardType.collectAsState()\r\n    val locale = vM.locale.collectAsState().value\r\n\r\n    val constraintsSet = ConstraintSet {\r\n        val topView = createRefFor(\"topView\")\r\n        val keyboardView = createRefFor(\"keyboardView\")\r\n        val bottomView = createRefFor(\"bottomView\")\r\n\r\n        constrain(topView) {\r\n            top.linkTo(parent.top)\r\n            start.linkTo(parent.start)\r\n            end.linkTo(parent.end)\r\n        }\r\n\r\n        constrain(keyboardView) {\r\n            top.linkTo(topView.bottom)\r\n            start.linkTo(parent.start)\r\n            end.linkTo(parent.end)\r\n        }\r\n\r\n        constrain(bottomView) {\r\n            top.linkTo(keyboardView.bottom)\r\n            start.linkTo(parent.start)\r\n            end.linkTo(parent.end)\r\n            bottom.linkTo(parent.bottom)\r\n        }\r\n    }\r\n\r\n    \r\n\r\n    ConstraintLayout(\r\n        constraintSet = constraintsSet,\r\n        modifier = Modifier.mandatorySystemGesturesPadding(),\r\n        optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n        animateChanges = true,\r\n    ) {\r\n        KeyboardTopView(vM, viewWidth = vW)\r\n\r\n        Box(\r\n            modifier = Modifier\r\n                .layoutId(\"keyboardView\")\r\n                .wrapContentSize(),\r\n            contentAlignment = Alignment.Center,\r\n        ) {\r\n            when (keyboardType.value) {\r\n                KeyboardType.Normal -> {\r\n                    when (locale) {\r\n                        \"pt-BR\" -> PortugueseKeyboardView(vM, vW)\r\n                        \"pt-PT\" -> PortugueseKeyboardView(vM, vW)\r\n                        \"fr-FR\" -> FrenchKeyboardView(vM, vW)\r\n                        \"es\" -> SpanishKeyboardView(vM, vW)\r\n                        \"ru\" -> RussianKeyboardView(vM, vW)\r\n                        else -> StandardKeyboardView(vM, vW)\r\n                    }\r\n                }\r\n\r\n                KeyboardType.Symbol -> SymbolsKeyboardView(vM, vW)\r\n\r\n                KeyboardType.Emoji -> EmojiKeyboardView(vM, vW)\r\n\r\n                KeyboardType.Clipboard -> ClipboardKeyboardView(vM, vW)\r\n            }\r\n        }\r\n\r\n        KeyboardBottomView(vM)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultPortraitKeyboard.kt b/app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultPortraitKeyboard.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultPortraitKeyboard.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/defaults/DefaultPortraitKeyboard.kt	(date 1707381652734)
@@ -9,7 +9,6 @@
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.layout.layoutId
 import androidx.compose.ui.platform.LocalConfiguration
-import androidx.compose.ui.unit.Dp
 import androidx.compose.ui.unit.dp
 import androidx.constraintlayout.compose.ConstraintLayout
 import androidx.constraintlayout.compose.ConstraintSet
@@ -32,11 +31,8 @@
     vM: KeyboardViewModel
 ) {
     val vW = LocalConfiguration.current.screenWidthDp.dp
-    val vH: Dp = 230.dp
-    val cVH: Dp = 200.dp
-    val eCC: Int = 6
     val keyboardType = vM.keyboardType.collectAsState()
-    val locale = vM.locale.collectAsState().value
+    val locale = vM.keyboardData.collectAsState().value.locale
 
     val constraintsSet = ConstraintSet {
         val topView = createRefFor("topView")
@@ -63,8 +59,6 @@
         }
     }
 
-    
-
     ConstraintLayout(
         constraintSet = constraintsSet,
         modifier = Modifier.mandatorySystemGesturesPadding(),
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\">\r\n\r\n    <uses-permission android:name=\"android.permission.VIBRATE\" />\r\n\r\n    <application\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"@string/app_name\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/Theme.AppCompat.NoActionBar\">\r\n        <activity\r\n            android:name=\".MainActivity\"\r\n            android:windowSoftInputMode=\"adjustResize\"\r\n            android:theme=\"@style/Theme.AppCompat.NoActionBar\"\r\n            android:exported=\"true\">\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n\r\n<!--        Spelling Check Service-->\r\n\r\n        <service\r\n            android:name=\".services.IMEService\"\r\n            android:label=\"@string/app_name\"\r\n            android:permission=\"android.permission.BIND_INPUT_METHOD\"\r\n            android:exported=\"false\">\r\n\r\n            <intent-filter>\r\n                <action android:name=\"android.view.InputMethod\" />\r\n            </intent-filter>\r\n\r\n            <meta-data\r\n                android:name=\"android.view.im\"\r\n                android:resource=\"@xml/method\" />\r\n        </service>\r\n    </application>\r\n\r\n</manifest>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/AndroidManifest.xml	(date 1707346739533)
@@ -2,8 +2,18 @@
 <manifest xmlns:android="http://schemas.android.com/apk/res/android">
 
     <uses-permission android:name="android.permission.VIBRATE" />
+    <uses-permission android:name="android.permission.POST_NOTIFICATIONS" />
+    <uses-permission android:name="android.permission.RECORD_AUDIO" />
+    <uses-permission android:name="android.permission.INTERNET" />
+
+    <uses-permission android:name="android.permission.FOREGROUND_SERVICE" />
+
+    <uses-permission
+        android:name="android.permission.FOREGROUND_SERVICE_DATA_SYNC"
+        android:minSdkVersion="34" />
 
     <application
+        android:name=".OptiKeysXApplication"
         android:allowBackup="true"
         android:icon="@mipmap/ic_launcher"
         android:label="@string/app_name"
@@ -19,12 +29,14 @@
 
                 <category android:name="android.intent.category.LAUNCHER" />
             </intent-filter>
+
+            <meta-data
+                android:name="android.app.lib_name"
+                android:value="" />
         </activity>
 
-<!--        Spelling Check Service-->
-
         <service
-            android:name=".services.IMEService"
+            android:name=".ime.IMEService"
             android:label="@string/app_name"
             android:permission="android.permission.BIND_INPUT_METHOD"
             android:exported="false">
@@ -37,6 +49,15 @@
                 android:name="android.view.im"
                 android:resource="@xml/method" />
         </service>
+
+        <service
+            android:name=".core.downloader.FileDownloadService"
+            android:exported="true"
+            android:foregroundServiceType="dataSync" />
+
+
+
+
     </application>
 
 </manifest>
Index: app/src/main/java/com/optiflowx/optikeysx/core/enums/KeepScreenAwakeMode.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/enums/KeepScreenAwakeMode.kt b/app/src/main/java/com/optiflowx/optikeysx/core/enums/KeepScreenAwakeMode.kt
new file mode 100644
--- /dev/null	(date 1707315545963)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/enums/KeepScreenAwakeMode.kt	(date 1707315545963)
@@ -0,0 +1,26 @@
+package com.optiflowx.optikeysx.core.enums
+
+import androidx.compose.runtime.Composable
+import dev.patrickgold.jetpref.datastore.ui.listPrefEntries
+
+enum class KeepScreenAwakeMode {
+    NEVER, WHEN_LISTENING, WHEN_OPEN;
+
+    companion object {
+        @Composable
+        fun listEntries() = listPrefEntries {
+            entry(
+                key = NEVER,
+                label = "Never",
+            )
+            entry(
+                key = WHEN_LISTENING,
+                label = "When Listening",
+            )
+            entry(
+                key = WHEN_OPEN,
+                label = "When Open",
+            )
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadError.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadError.kt b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadError.kt
new file mode 100644
--- /dev/null	(date 1707315546105)
+++ b/app/src/main/java/com/optiflowx/optikeysx/core/downloader/messages/DownloadError.kt	(date 1707315546105)
@@ -0,0 +1,3 @@
+package com.optiflowx.optikeysx.core.downloader.messages
+
+data class DownloadError(val info: ModelInfo, val message: String)
\ No newline at end of file
Index: app/src/main/java/com/optiflowx/optikeysx/views/symbols/SymbolsKeyboardView.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.optiflowx.optikeysx.views.symbols\r\n\r\nimport androidx.compose.foundation.layout.Box\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.foundation.layout.width\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.runtime.collectAsState\r\nimport androidx.compose.ui.Alignment\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.layout.layoutId\r\nimport androidx.compose.ui.res.stringResource\r\nimport androidx.compose.ui.unit.Dp\r\nimport androidx.compose.ui.unit.dp\r\nimport androidx.constraintlayout.compose.ConstraintLayout\r\nimport com.optiflowx.optikeysx.R\r\nimport com.optiflowx.optikeysx.core.model.Key\r\nimport com.optiflowx.optikeysx.core.utils.KeyboardLocale\r\nimport com.optiflowx.optikeysx.core.utils.OPTIMIZATION_STANDARDIZED\r\nimport com.optiflowx.optikeysx.ui.keyboard.KeyboardKey\r\nimport com.optiflowx.optikeysx.viewmodels.KeyboardViewModel\r\n\r\n@Composable\r\nfun SymbolsKeyboardView(\r\n    viewModel: KeyboardViewModel,\r\n    viewWidth: Dp,\r\n    keyHeight: Dp = 42.dp,\r\n    rowHeight: Dp = 56.dp,\r\n) {\r\n    \r\n    val isSymbol = viewModel.isNumberSymbol.collectAsState().value\r\n    val symbolConst = SymbolConstraintSet(keyHeight, rowHeight)\r\n    val locale = viewModel.locale.collectAsState().value\r\n    val keyboardLocale = KeyboardLocale(locale)\r\n    val symbolRowKeys = SymbolRowKeys()\r\n\r\n    ConstraintLayout(\r\n        constraintSet = symbolConst.main,\r\n        modifier = Modifier.width(viewWidth),\r\n        optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n        animateChanges = true,\r\n        \r\n    ) {\r\n        Box(Modifier.layoutId('1')) {\r\n            ConstraintLayout(\r\n                constraintSet = symbolConst.firstRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                if (!isSymbol) {\r\n                    for (key in symbolRowKeys.row1Keys) KeyboardKey(key, viewModel)\r\n                } else {\r\n                    for (key in symbolRowKeys.row1SymbolKeys) KeyboardKey(key, viewModel)\r\n                }\r\n            }\r\n        }\r\n        Box(Modifier.layoutId('2')) {\r\n            ConstraintLayout(\r\n                constraintSet = symbolConst.secondRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                if (!isSymbol) {\r\n                    for (key in symbolRowKeys.row2Keys) KeyboardKey(key, viewModel)\r\n                } else {\r\n                    for (key in symbolRowKeys.row2SymbolKeys) KeyboardKey(key, viewModel)\r\n                }\r\n            }\r\n        }\r\n        Box(Modifier.layoutId('3')) {\r\n            ConstraintLayout(\r\n                constraintSet = symbolConst.thirdRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED, animateChanges = true,\r\n\r\n            ) {\r\n                KeyboardKey(Key(\"symbol\", \"\"), viewModel)\r\n                for (key in symbolRowKeys.row3Keys) KeyboardKey(key, viewModel)\r\n                KeyboardKey(Key(\"delete\", \"\"), viewModel)\r\n            }\r\n        }\r\n        Box(Modifier.layoutId('4')) {\r\n            ConstraintLayout(\r\n                constraintSet = symbolConst.fourthRowConstraints,\r\n                modifier = Modifier\r\n                    .width(viewWidth)\r\n                    .padding(start = 2.dp, end = 3.5.dp)\r\n                    .align(Alignment.Center),\r\n                optimizationLevel = OPTIMIZATION_STANDARDIZED,\r\n                animateChanges = true,\r\n                \r\n            ) {\r\n                KeyboardKey(Key(\"ABC\", stringResource(R.string.abc)), viewModel)\r\n                KeyboardKey(Key(\"emoji\", \"emoji\"), viewModel)\r\n                KeyboardKey(Key(\"space\", keyboardLocale.space()), viewModel)\r\n                KeyboardKey(\r\n                    Key(\"action\", keyboardLocale.action(\"return\")),\r\n                    viewModel\r\n                )\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/optiflowx/optikeysx/views/symbols/SymbolsKeyboardView.kt b/app/src/main/java/com/optiflowx/optikeysx/views/symbols/SymbolsKeyboardView.kt
--- a/app/src/main/java/com/optiflowx/optikeysx/views/symbols/SymbolsKeyboardView.kt	(revision 66ce2ca0b40a8f71f57b2f89d6f1c4983712665a)
+++ b/app/src/main/java/com/optiflowx/optikeysx/views/symbols/SymbolsKeyboardView.kt	(date 1707381446747)
@@ -29,7 +29,7 @@
     
     val isSymbol = viewModel.isNumberSymbol.collectAsState().value
     val symbolConst = SymbolConstraintSet(keyHeight, rowHeight)
-    val locale = viewModel.locale.collectAsState().value
+    val locale = viewModel.keyboardData.collectAsState().value.locale
     val keyboardLocale = KeyboardLocale(locale)
     val symbolRowKeys = SymbolRowKeys()
 
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/french/FrenListD.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/french/FrenListD.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/french/FrenListD.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/french/FrenListD.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/french/FrenListA.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/french/FrenListA.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/french/FrenListA.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/french/FrenListA.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/french/FrenListB.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/french/FrenListB.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/french/FrenListB.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/french/FrenListB.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/french/FrenListC.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/french/FrenListC.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/french/FrenListC.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/french/FrenListC.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/english/EngListB.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/english/EngListB.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/english/EngListB.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/english/EngListB.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/english/EngListC.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/english/EngListC.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/english/EngListC.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/english/EngListC.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/english/EngListD.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/english/EngListD.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/english/EngListD.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/english/EngListD.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/spanish/EspListD.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/spanish/EspListD.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/spanish/EspListD.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/spanish/EspListD.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/spanish/EspListB.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/spanish/EspListB.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/spanish/EspListB.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/spanish/EspListB.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/spanish/EspListA.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/spanish/EspListA.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/spanish/EspListA.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/spanish/EspListA.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/spanish/EspListC.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/spanish/EspListC.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/spanish/EspListC.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/spanish/EspListC.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/portuguese/PTListC.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/portuguese/PTListC.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/portuguese/PTListC.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/portuguese/PTListC.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/portuguese/PTListB.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/portuguese/PTListB.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/portuguese/PTListB.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/portuguese/PTListB.kt
diff --git a/app/src/main/java/com/optiflowx/optikeysx/core/languages/portuguese/PTListD.kt b/app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/portuguese/PTListD.kt
rename from app/src/main/java/com/optiflowx/optikeysx/core/languages/portuguese/PTListD.kt
rename to app/src/main/java/com/optiflowx/optikeysx/core/dictionaries/portuguese/PTListD.kt
